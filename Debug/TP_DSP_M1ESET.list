
TP_DSP_M1ESET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c29c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005118  0800c468  0800c468  0001c468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011580  08011580  00021580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011588  08011588  00021588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801158c  0801158c  0002158c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000000  08011590  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000084dc  2000005c  080115ec  0003005c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20008538  080115ec  00038538  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0003005c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e736  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004e24  00000000  00000000  0005e7c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b98  00000000  00000000  000635e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019d8  00000000  00000000  00065180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00029bc8  00000000  00000000  00066b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020c67  00000000  00000000  00090720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f7c08  00000000  00000000  000b1387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001a8f8f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000783c  00000000  00000000  001a8fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c44c 	.word	0x0800c44c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800c44c 	.word	0x0800c44c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2f>:
 8000b04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b0c:	bf24      	itt	cs
 8000b0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b16:	d90d      	bls.n	8000b34 <__aeabi_d2f+0x30>
 8000b18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b2c:	bf08      	it	eq
 8000b2e:	f020 0001 	biceq.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b38:	d121      	bne.n	8000b7e <__aeabi_d2f+0x7a>
 8000b3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3e:	bfbc      	itt	lt
 8000b40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	4770      	bxlt	lr
 8000b46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4e:	f1c2 0218 	rsb	r2, r2, #24
 8000b52:	f1c2 0c20 	rsb	ip, r2, #32
 8000b56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5e:	bf18      	it	ne
 8000b60:	f040 0001 	orrne.w	r0, r0, #1
 8000b64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b70:	ea40 000c 	orr.w	r0, r0, ip
 8000b74:	fa23 f302 	lsr.w	r3, r3, r2
 8000b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b7c:	e7cc      	b.n	8000b18 <__aeabi_d2f+0x14>
 8000b7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b82:	d107      	bne.n	8000b94 <__aeabi_d2f+0x90>
 8000b84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b88:	bf1e      	ittt	ne
 8000b8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b92:	4770      	bxne	lr
 8000b94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b96e 	b.w	8000e98 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd8:	9d08      	ldr	r5, [sp, #32]
 8000bda:	4604      	mov	r4, r0
 8000bdc:	468c      	mov	ip, r1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f040 8083 	bne.w	8000cea <__udivmoddi4+0x116>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4617      	mov	r7, r2
 8000be8:	d947      	bls.n	8000c7a <__udivmoddi4+0xa6>
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	b142      	cbz	r2, 8000c02 <__udivmoddi4+0x2e>
 8000bf0:	f1c2 0020 	rsb	r0, r2, #32
 8000bf4:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	4097      	lsls	r7, r2
 8000bfc:	ea40 0c01 	orr.w	ip, r0, r1
 8000c00:	4094      	lsls	r4, r2
 8000c02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c06:	0c23      	lsrs	r3, r4, #16
 8000c08:	fbbc f6f8 	udiv	r6, ip, r8
 8000c0c:	fa1f fe87 	uxth.w	lr, r7
 8000c10:	fb08 c116 	mls	r1, r8, r6, ip
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb06 f10e 	mul.w	r1, r6, lr
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d909      	bls.n	8000c34 <__udivmoddi4+0x60>
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c26:	f080 8119 	bcs.w	8000e5c <__udivmoddi4+0x288>
 8000c2a:	4299      	cmp	r1, r3
 8000c2c:	f240 8116 	bls.w	8000e5c <__udivmoddi4+0x288>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	443b      	add	r3, r7
 8000c34:	1a5b      	subs	r3, r3, r1
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	d909      	bls.n	8000c60 <__udivmoddi4+0x8c>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c52:	f080 8105 	bcs.w	8000e60 <__udivmoddi4+0x28c>
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	f240 8102 	bls.w	8000e60 <__udivmoddi4+0x28c>
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	443c      	add	r4, r7
 8000c60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	2600      	movs	r6, #0
 8000c6a:	b11d      	cbz	r5, 8000c74 <__udivmoddi4+0xa0>
 8000c6c:	40d4      	lsrs	r4, r2
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e9c5 4300 	strd	r4, r3, [r5]
 8000c74:	4631      	mov	r1, r6
 8000c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7a:	b902      	cbnz	r2, 8000c7e <__udivmoddi4+0xaa>
 8000c7c:	deff      	udf	#255	; 0xff
 8000c7e:	fab2 f282 	clz	r2, r2
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d150      	bne.n	8000d28 <__udivmoddi4+0x154>
 8000c86:	1bcb      	subs	r3, r1, r7
 8000c88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c8c:	fa1f f887 	uxth.w	r8, r7
 8000c90:	2601      	movs	r6, #1
 8000c92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c96:	0c21      	lsrs	r1, r4, #16
 8000c98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	d907      	bls.n	8000cb8 <__udivmoddi4+0xe4>
 8000ca8:	1879      	adds	r1, r7, r1
 8000caa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0xe2>
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	f200 80e9 	bhi.w	8000e88 <__udivmoddi4+0x2b4>
 8000cb6:	4684      	mov	ip, r0
 8000cb8:	1ac9      	subs	r1, r1, r3
 8000cba:	b2a3      	uxth	r3, r4
 8000cbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc8:	fb08 f800 	mul.w	r8, r8, r0
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x10c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x10a>
 8000cd8:	45a0      	cmp	r8, r4
 8000cda:	f200 80d9 	bhi.w	8000e90 <__udivmoddi4+0x2bc>
 8000cde:	4618      	mov	r0, r3
 8000ce0:	eba4 0408 	sub.w	r4, r4, r8
 8000ce4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce8:	e7bf      	b.n	8000c6a <__udivmoddi4+0x96>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d909      	bls.n	8000d02 <__udivmoddi4+0x12e>
 8000cee:	2d00      	cmp	r5, #0
 8000cf0:	f000 80b1 	beq.w	8000e56 <__udivmoddi4+0x282>
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	fab3 f683 	clz	r6, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d14a      	bne.n	8000da0 <__udivmoddi4+0x1cc>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d302      	bcc.n	8000d14 <__udivmoddi4+0x140>
 8000d0e:	4282      	cmp	r2, r0
 8000d10:	f200 80b8 	bhi.w	8000e84 <__udivmoddi4+0x2b0>
 8000d14:	1a84      	subs	r4, r0, r2
 8000d16:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	468c      	mov	ip, r1
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d0a8      	beq.n	8000c74 <__udivmoddi4+0xa0>
 8000d22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000d28:	f1c2 0320 	rsb	r3, r2, #32
 8000d2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000d30:	4097      	lsls	r7, r2
 8000d32:	fa01 f002 	lsl.w	r0, r1, r2
 8000d36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3a:	40d9      	lsrs	r1, r3
 8000d3c:	4330      	orrs	r0, r6
 8000d3e:	0c03      	lsrs	r3, r0, #16
 8000d40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d44:	fa1f f887 	uxth.w	r8, r7
 8000d48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d50:	fb06 f108 	mul.w	r1, r6, r8
 8000d54:	4299      	cmp	r1, r3
 8000d56:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5a:	d909      	bls.n	8000d70 <__udivmoddi4+0x19c>
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d62:	f080 808d 	bcs.w	8000e80 <__udivmoddi4+0x2ac>
 8000d66:	4299      	cmp	r1, r3
 8000d68:	f240 808a 	bls.w	8000e80 <__udivmoddi4+0x2ac>
 8000d6c:	3e02      	subs	r6, #2
 8000d6e:	443b      	add	r3, r7
 8000d70:	1a5b      	subs	r3, r3, r1
 8000d72:	b281      	uxth	r1, r0
 8000d74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d80:	fb00 f308 	mul.w	r3, r0, r8
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0x1c4>
 8000d88:	1879      	adds	r1, r7, r1
 8000d8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8e:	d273      	bcs.n	8000e78 <__udivmoddi4+0x2a4>
 8000d90:	428b      	cmp	r3, r1
 8000d92:	d971      	bls.n	8000e78 <__udivmoddi4+0x2a4>
 8000d94:	3802      	subs	r0, #2
 8000d96:	4439      	add	r1, r7
 8000d98:	1acb      	subs	r3, r1, r3
 8000d9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9e:	e778      	b.n	8000c92 <__udivmoddi4+0xbe>
 8000da0:	f1c6 0c20 	rsb	ip, r6, #32
 8000da4:	fa03 f406 	lsl.w	r4, r3, r6
 8000da8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dac:	431c      	orrs	r4, r3
 8000dae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db2:	fa01 f306 	lsl.w	r3, r1, r6
 8000db6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dbe:	431f      	orrs	r7, r3
 8000dc0:	0c3b      	lsrs	r3, r7, #16
 8000dc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc6:	fa1f f884 	uxth.w	r8, r4
 8000dca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd6:	458a      	cmp	sl, r1
 8000dd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000ddc:	fa00 f306 	lsl.w	r3, r0, r6
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x220>
 8000de2:	1861      	adds	r1, r4, r1
 8000de4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de8:	d248      	bcs.n	8000e7c <__udivmoddi4+0x2a8>
 8000dea:	458a      	cmp	sl, r1
 8000dec:	d946      	bls.n	8000e7c <__udivmoddi4+0x2a8>
 8000dee:	f1a9 0902 	sub.w	r9, r9, #2
 8000df2:	4421      	add	r1, r4
 8000df4:	eba1 010a 	sub.w	r1, r1, sl
 8000df8:	b2bf      	uxth	r7, r7
 8000dfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e06:	fb00 f808 	mul.w	r8, r0, r8
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d907      	bls.n	8000e1e <__udivmoddi4+0x24a>
 8000e0e:	19e7      	adds	r7, r4, r7
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d22e      	bcs.n	8000e74 <__udivmoddi4+0x2a0>
 8000e16:	45b8      	cmp	r8, r7
 8000e18:	d92c      	bls.n	8000e74 <__udivmoddi4+0x2a0>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4427      	add	r7, r4
 8000e1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e22:	eba7 0708 	sub.w	r7, r7, r8
 8000e26:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2a:	454f      	cmp	r7, r9
 8000e2c:	46c6      	mov	lr, r8
 8000e2e:	4649      	mov	r1, r9
 8000e30:	d31a      	bcc.n	8000e68 <__udivmoddi4+0x294>
 8000e32:	d017      	beq.n	8000e64 <__udivmoddi4+0x290>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x27a>
 8000e36:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e42:	40f2      	lsrs	r2, r6
 8000e44:	ea4c 0202 	orr.w	r2, ip, r2
 8000e48:	40f7      	lsrs	r7, r6
 8000e4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	462e      	mov	r6, r5
 8000e58:	4628      	mov	r0, r5
 8000e5a:	e70b      	b.n	8000c74 <__udivmoddi4+0xa0>
 8000e5c:	4606      	mov	r6, r0
 8000e5e:	e6e9      	b.n	8000c34 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fd      	b.n	8000c60 <__udivmoddi4+0x8c>
 8000e64:	4543      	cmp	r3, r8
 8000e66:	d2e5      	bcs.n	8000e34 <__udivmoddi4+0x260>
 8000e68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e70:	3801      	subs	r0, #1
 8000e72:	e7df      	b.n	8000e34 <__udivmoddi4+0x260>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e7d2      	b.n	8000e1e <__udivmoddi4+0x24a>
 8000e78:	4660      	mov	r0, ip
 8000e7a:	e78d      	b.n	8000d98 <__udivmoddi4+0x1c4>
 8000e7c:	4681      	mov	r9, r0
 8000e7e:	e7b9      	b.n	8000df4 <__udivmoddi4+0x220>
 8000e80:	4666      	mov	r6, ip
 8000e82:	e775      	b.n	8000d70 <__udivmoddi4+0x19c>
 8000e84:	4630      	mov	r0, r6
 8000e86:	e74a      	b.n	8000d1e <__udivmoddi4+0x14a>
 8000e88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e8c:	4439      	add	r1, r7
 8000e8e:	e713      	b.n	8000cb8 <__udivmoddi4+0xe4>
 8000e90:	3802      	subs	r0, #2
 8000e92:	443c      	add	r4, r7
 8000e94:	e724      	b.n	8000ce0 <__udivmoddi4+0x10c>
 8000e96:	bf00      	nop

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	81fb      	strh	r3, [r7, #14]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	81bb      	strh	r3, [r7, #12]
 8000eac:	4613      	mov	r3, r2
 8000eae:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000eb4:	89bb      	ldrh	r3, [r7, #12]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 8000eba:	89bb      	ldrh	r3, [r7, #12]
 8000ebc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000ec0:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8000ec6:	f001 fc71 	bl	80027ac <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 8000eca:	89fb      	ldrh	r3, [r7, #14]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2203      	movs	r2, #3
 8000ed0:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f001 fafb 	bl	80024d0 <CODEC_IO_Write>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461a      	mov	r2, r3
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000ee4:	89fb      	ldrh	r3, [r7, #14]
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f640 0117 	movw	r1, #2071	; 0x817
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 faee 	bl	80024d0 <CODEC_IO_Write>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	4413      	add	r3, r2
 8000efc:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fae1 	bl	80024d0 <CODEC_IO_Write>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	461a      	mov	r2, r3
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	4413      	add	r3, r2
 8000f16:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 8000f18:	89fb      	ldrh	r3, [r7, #14]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	226c      	movs	r2, #108	; 0x6c
 8000f1e:	2139      	movs	r1, #57	; 0x39
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fad5 	bl	80024d0 <CODEC_IO_Write>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8000f30:	8afb      	ldrh	r3, [r7, #22]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d00c      	beq.n	8000f50 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 8000f36:	89fb      	ldrh	r3, [r7, #14]
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2213      	movs	r2, #19
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f001 fac6 	bl	80024d0 <CODEC_IO_Write>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e00b      	b.n	8000f68 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8000f50:	89fb      	ldrh	r3, [r7, #14]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2203      	movs	r2, #3
 8000f56:	2101      	movs	r1, #1
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fab9 	bl	80024d0 <CODEC_IO_Write>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	4413      	add	r3, r2
 8000f66:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8000f68:	2032      	movs	r0, #50	; 0x32
 8000f6a:	f001 fc87 	bl	800287c <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 8000f6e:	8b3b      	ldrh	r3, [r7, #24]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 815f 	beq.w	8001234 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8000f76:	4bae      	ldr	r3, [pc, #696]	; (8001230 <wm8994_Init+0x394>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 8000f7c:	8b3b      	ldrh	r3, [r7, #24]
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	f000 808c 	beq.w	800109c <wm8994_Init+0x200>
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	f300 8111 	bgt.w	80011ac <wm8994_Init+0x310>
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d002      	beq.n	8000f94 <wm8994_Init+0xf8>
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d042      	beq.n	8001018 <wm8994_Init+0x17c>
 8000f92:	e10b      	b.n	80011ac <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8000f94:	89fb      	ldrh	r3, [r7, #14]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000f9c:	2105      	movs	r1, #5
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fa96 	bl	80024d0 <CODEC_IO_Write>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	4413      	add	r3, r2
 8000fac:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f240 6101 	movw	r1, #1537	; 0x601
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fa89 	bl	80024d0 <CODEC_IO_Write>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f240 6102 	movw	r1, #1538	; 0x602
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 fa7c 	bl	80024d0 <CODEC_IO_Write>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	4413      	add	r3, r2
 8000fe0:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000fe2:	89fb      	ldrh	r3, [r7, #14]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f240 6104 	movw	r1, #1540	; 0x604
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fa6f 	bl	80024d0 <CODEC_IO_Write>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000ffc:	89fb      	ldrh	r3, [r7, #14]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2202      	movs	r2, #2
 8001002:	f240 6105 	movw	r1, #1541	; 0x605
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fa62 	bl	80024d0 <CODEC_IO_Write>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	4413      	add	r3, r2
 8001014:	61fb      	str	r3, [r7, #28]
      break;
 8001016:	e110      	b.n	800123a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8001018:	89fb      	ldrh	r3, [r7, #14]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	f240 3203 	movw	r2, #771	; 0x303
 8001020:	2105      	movs	r1, #5
 8001022:	4618      	mov	r0, r3
 8001024:	f001 fa54 	bl	80024d0 <CODEC_IO_Write>
 8001028:	4603      	mov	r3, r0
 800102a:	461a      	mov	r2, r3
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	4413      	add	r3, r2
 8001030:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2201      	movs	r2, #1
 8001038:	f240 6101 	movw	r1, #1537	; 0x601
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fa47 	bl	80024d0 <CODEC_IO_Write>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	4413      	add	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800104c:	89fb      	ldrh	r3, [r7, #14]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2201      	movs	r2, #1
 8001052:	f240 6102 	movw	r1, #1538	; 0x602
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fa3a 	bl	80024d0 <CODEC_IO_Write>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	4413      	add	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001066:	89fb      	ldrh	r3, [r7, #14]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2200      	movs	r2, #0
 800106c:	f240 6104 	movw	r1, #1540	; 0x604
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fa2d 	bl	80024d0 <CODEC_IO_Write>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	4413      	add	r3, r2
 800107e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001080:	89fb      	ldrh	r3, [r7, #14]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2200      	movs	r2, #0
 8001086:	f240 6105 	movw	r1, #1541	; 0x605
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fa20 	bl	80024d0 <CODEC_IO_Write>
 8001090:	4603      	mov	r3, r0
 8001092:	461a      	mov	r2, r3
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	4413      	add	r3, r2
 8001098:	61fb      	str	r3, [r7, #28]
      break;
 800109a:	e0ce      	b.n	800123a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800109c:	8afb      	ldrh	r3, [r7, #22]
 800109e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a2:	d141      	bne.n	8001128 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80010ac:	2105      	movs	r1, #5
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fa0e 	bl	80024d0 <CODEC_IO_Write>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2203      	movs	r2, #3
 80010c4:	f240 6101 	movw	r1, #1537	; 0x601
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fa01 	bl	80024d0 <CODEC_IO_Write>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4413      	add	r3, r2
 80010d6:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2203      	movs	r2, #3
 80010de:	f240 6102 	movw	r1, #1538	; 0x602
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 f9f4 	bl	80024d0 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	4413      	add	r3, r2
 80010f0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2203      	movs	r2, #3
 80010f8:	f240 6104 	movw	r1, #1540	; 0x604
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f9e7 	bl	80024d0 <CODEC_IO_Write>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	4413      	add	r3, r2
 800110a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 800110c:	89fb      	ldrh	r3, [r7, #14]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2203      	movs	r2, #3
 8001112:	f240 6105 	movw	r1, #1541	; 0x605
 8001116:	4618      	mov	r0, r3
 8001118:	f001 f9da 	bl	80024d0 <CODEC_IO_Write>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	4413      	add	r3, r2
 8001124:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 8001126:	e088      	b.n	800123a <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001130:	2105      	movs	r1, #5
 8001132:	4618      	mov	r0, r3
 8001134:	f001 f9cc 	bl	80024d0 <CODEC_IO_Write>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	4413      	add	r3, r2
 8001140:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001142:	89fb      	ldrh	r3, [r7, #14]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2201      	movs	r2, #1
 8001148:	f240 6101 	movw	r1, #1537	; 0x601
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f9bf 	bl	80024d0 <CODEC_IO_Write>
 8001152:	4603      	mov	r3, r0
 8001154:	461a      	mov	r2, r3
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	4413      	add	r3, r2
 800115a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800115c:	89fb      	ldrh	r3, [r7, #14]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2201      	movs	r2, #1
 8001162:	f240 6102 	movw	r1, #1538	; 0x602
 8001166:	4618      	mov	r0, r3
 8001168:	f001 f9b2 	bl	80024d0 <CODEC_IO_Write>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	4413      	add	r3, r2
 8001174:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2202      	movs	r2, #2
 800117c:	f240 6104 	movw	r1, #1540	; 0x604
 8001180:	4618      	mov	r0, r3
 8001182:	f001 f9a5 	bl	80024d0 <CODEC_IO_Write>
 8001186:	4603      	mov	r3, r0
 8001188:	461a      	mov	r2, r3
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4413      	add	r3, r2
 800118e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8001190:	89fb      	ldrh	r3, [r7, #14]
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2202      	movs	r2, #2
 8001196:	f240 6105 	movw	r1, #1541	; 0x605
 800119a:	4618      	mov	r0, r3
 800119c:	f001 f998 	bl	80024d0 <CODEC_IO_Write>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	4413      	add	r3, r2
 80011a8:	61fb      	str	r3, [r7, #28]
      break;
 80011aa:	e046      	b.n	800123a <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80011ac:	89fb      	ldrh	r3, [r7, #14]
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f240 3203 	movw	r2, #771	; 0x303
 80011b4:	2105      	movs	r1, #5
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 f98a 	bl	80024d0 <CODEC_IO_Write>
 80011bc:	4603      	mov	r3, r0
 80011be:	461a      	mov	r2, r3
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	4413      	add	r3, r2
 80011c4:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	f240 6101 	movw	r1, #1537	; 0x601
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 f97d 	bl	80024d0 <CODEC_IO_Write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	4413      	add	r3, r2
 80011de:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2201      	movs	r2, #1
 80011e6:	f240 6102 	movw	r1, #1538	; 0x602
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f970 	bl	80024d0 <CODEC_IO_Write>
 80011f0:	4603      	mov	r3, r0
 80011f2:	461a      	mov	r2, r3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	4413      	add	r3, r2
 80011f8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	f240 6104 	movw	r1, #1540	; 0x604
 8001204:	4618      	mov	r0, r3
 8001206:	f001 f963 	bl	80024d0 <CODEC_IO_Write>
 800120a:	4603      	mov	r3, r0
 800120c:	461a      	mov	r2, r3
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	4413      	add	r3, r2
 8001212:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	2200      	movs	r2, #0
 800121a:	f240 6105 	movw	r1, #1541	; 0x605
 800121e:	4618      	mov	r0, r3
 8001220:	f001 f956 	bl	80024d0 <CODEC_IO_Write>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	4413      	add	r3, r2
 800122c:	61fb      	str	r3, [r7, #28]
      break;
 800122e:	e004      	b.n	800123a <wm8994_Init+0x39e>
 8001230:	20000078 	.word	0x20000078
    }
  }
  else
  {
    outputEnabled = 0;
 8001234:	4b99      	ldr	r3, [pc, #612]	; (800149c <wm8994_Init+0x600>)
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800123a:	8afb      	ldrh	r3, [r7, #22]
 800123c:	2b00      	cmp	r3, #0
 800123e:	f000 81ab 	beq.w	8001598 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8001242:	4b97      	ldr	r3, [pc, #604]	; (80014a0 <wm8994_Init+0x604>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
    switch (input_device)
 8001248:	8afb      	ldrh	r3, [r7, #22]
 800124a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800124e:	f000 8129 	beq.w	80014a4 <wm8994_Init+0x608>
 8001252:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001256:	f300 819b 	bgt.w	8001590 <wm8994_Init+0x6f4>
 800125a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800125e:	d05a      	beq.n	8001316 <wm8994_Init+0x47a>
 8001260:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001264:	f300 8194 	bgt.w	8001590 <wm8994_Init+0x6f4>
 8001268:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800126c:	f000 80c6 	beq.w	80013fc <wm8994_Init+0x560>
 8001270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001274:	f040 818c 	bne.w	8001590 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8001280:	2104      	movs	r1, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f001 f924 	bl	80024d0 <CODEC_IO_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	4413      	add	r3, r2
 8001290:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8001292:	89fb      	ldrh	r3, [r7, #14]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	22db      	movs	r2, #219	; 0xdb
 8001298:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800129c:	4618      	mov	r0, r3
 800129e:	f001 f917 	bl	80024d0 <CODEC_IO_Write>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80012b4:	2102      	movs	r1, #2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 f90a 	bl	80024d0 <CODEC_IO_Write>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	4413      	add	r3, r2
 80012c4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2202      	movs	r2, #2
 80012cc:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 f8fd 	bl	80024d0 <CODEC_IO_Write>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461a      	mov	r2, r3
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	4413      	add	r3, r2
 80012de:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 80012e0:	89fb      	ldrh	r3, [r7, #14]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2202      	movs	r2, #2
 80012e6:	f240 6109 	movw	r1, #1545	; 0x609
 80012ea:	4618      	mov	r0, r3
 80012ec:	f001 f8f0 	bl	80024d0 <CODEC_IO_Write>
 80012f0:	4603      	mov	r3, r0
 80012f2:	461a      	mov	r2, r3
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	4413      	add	r3, r2
 80012f8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80012fa:	89fb      	ldrh	r3, [r7, #14]
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	220e      	movs	r2, #14
 8001300:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001304:	4618      	mov	r0, r3
 8001306:	f001 f8e3 	bl	80024d0 <CODEC_IO_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	4413      	add	r3, r2
 8001312:	61fb      	str	r3, [r7, #28]
      break;
 8001314:	e143      	b.n	800159e <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2211      	movs	r2, #17
 800131c:	2128      	movs	r1, #40	; 0x28
 800131e:	4618      	mov	r0, r3
 8001320:	f001 f8d6 	bl	80024d0 <CODEC_IO_Write>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	4413      	add	r3, r2
 800132c:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 800132e:	89fb      	ldrh	r3, [r7, #14]
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2235      	movs	r2, #53	; 0x35
 8001334:	2129      	movs	r1, #41	; 0x29
 8001336:	4618      	mov	r0, r3
 8001338:	f001 f8ca 	bl	80024d0 <CODEC_IO_Write>
 800133c:	4603      	mov	r3, r0
 800133e:	461a      	mov	r2, r3
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	4413      	add	r3, r2
 8001344:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2235      	movs	r2, #53	; 0x35
 800134c:	212a      	movs	r1, #42	; 0x2a
 800134e:	4618      	mov	r0, r3
 8001350:	f001 f8be 	bl	80024d0 <CODEC_IO_Write>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	4413      	add	r3, r2
 800135c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	f240 3203 	movw	r2, #771	; 0x303
 8001366:	2104      	movs	r1, #4
 8001368:	4618      	mov	r0, r3
 800136a:	f001 f8b1 	bl	80024d0 <CODEC_IO_Write>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	4413      	add	r3, r2
 8001376:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	b2db      	uxtb	r3, r3
 800137c:	22db      	movs	r2, #219	; 0xdb
 800137e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f8a4 	bl	80024d0 <CODEC_IO_Write>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001392:	89fb      	ldrh	r3, [r7, #14]
 8001394:	b2db      	uxtb	r3, r3
 8001396:	f246 3250 	movw	r2, #25424	; 0x6350
 800139a:	2102      	movs	r1, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f001 f897 	bl	80024d0 <CODEC_IO_Write>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	4413      	add	r3, r2
 80013aa:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80013ac:	89fb      	ldrh	r3, [r7, #14]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2202      	movs	r2, #2
 80013b2:	f240 6106 	movw	r1, #1542	; 0x606
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 f88a 	bl	80024d0 <CODEC_IO_Write>
 80013bc:	4603      	mov	r3, r0
 80013be:	461a      	mov	r2, r3
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	4413      	add	r3, r2
 80013c4:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80013c6:	89fb      	ldrh	r3, [r7, #14]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2202      	movs	r2, #2
 80013cc:	f240 6107 	movw	r1, #1543	; 0x607
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 f87d 	bl	80024d0 <CODEC_IO_Write>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4413      	add	r3, r2
 80013de:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	220d      	movs	r2, #13
 80013e6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80013ea:	4618      	mov	r0, r3
 80013ec:	f001 f870 	bl	80024d0 <CODEC_IO_Write>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	4413      	add	r3, r2
 80013f8:	61fb      	str	r3, [r7, #28]
      break;
 80013fa:	e0d0      	b.n	800159e <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8001404:	2104      	movs	r1, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f001 f862 	bl	80024d0 <CODEC_IO_Write>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8001416:	89fb      	ldrh	r3, [r7, #14]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	22db      	movs	r2, #219	; 0xdb
 800141c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001420:	4618      	mov	r0, r3
 8001422:	f001 f855 	bl	80024d0 <CODEC_IO_Write>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4413      	add	r3, r2
 800142e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8001430:	89fb      	ldrh	r3, [r7, #14]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	f246 3250 	movw	r2, #25424	; 0x6350
 8001438:	2102      	movs	r1, #2
 800143a:	4618      	mov	r0, r3
 800143c:	f001 f848 	bl	80024d0 <CODEC_IO_Write>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	4413      	add	r3, r2
 8001448:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2202      	movs	r2, #2
 8001450:	f240 6106 	movw	r1, #1542	; 0x606
 8001454:	4618      	mov	r0, r3
 8001456:	f001 f83b 	bl	80024d0 <CODEC_IO_Write>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2202      	movs	r2, #2
 800146a:	f240 6107 	movw	r1, #1543	; 0x607
 800146e:	4618      	mov	r0, r3
 8001470:	f001 f82e 	bl	80024d0 <CODEC_IO_Write>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	4413      	add	r3, r2
 800147c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 800147e:	89fb      	ldrh	r3, [r7, #14]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	220d      	movs	r2, #13
 8001484:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001488:	4618      	mov	r0, r3
 800148a:	f001 f821 	bl	80024d0 <CODEC_IO_Write>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	61fb      	str	r3, [r7, #28]
      break; 
 8001498:	e081      	b.n	800159e <wm8994_Init+0x702>
 800149a:	bf00      	nop
 800149c:	20000078 	.word	0x20000078
 80014a0:	2000007c 	.word	0x2000007c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 80014a4:	89fb      	ldrh	r3, [r7, #14]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f640 723c 	movw	r2, #3900	; 0xf3c
 80014ac:	2104      	movs	r1, #4
 80014ae:	4618      	mov	r0, r3
 80014b0:	f001 f80e 	bl	80024d0 <CODEC_IO_Write>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	69fb      	ldr	r3, [r7, #28]
 80014ba:	4413      	add	r3, r2
 80014bc:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	22db      	movs	r2, #219	; 0xdb
 80014c4:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80014c8:	4618      	mov	r0, r3
 80014ca:	f001 f801 	bl	80024d0 <CODEC_IO_Write>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	4413      	add	r3, r2
 80014d6:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	22db      	movs	r2, #219	; 0xdb
 80014de:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 fff4 	bl	80024d0 <CODEC_IO_Write>
 80014e8:	4603      	mov	r3, r0
 80014ea:	461a      	mov	r2, r3
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 80014f2:	89fb      	ldrh	r3, [r7, #14]
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f246 32a0 	movw	r2, #25504	; 0x63a0
 80014fa:	2102      	movs	r1, #2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 ffe7 	bl	80024d0 <CODEC_IO_Write>
 8001502:	4603      	mov	r3, r0
 8001504:	461a      	mov	r2, r3
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2202      	movs	r2, #2
 8001512:	f240 6106 	movw	r1, #1542	; 0x606
 8001516:	4618      	mov	r0, r3
 8001518:	f000 ffda 	bl	80024d0 <CODEC_IO_Write>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	4413      	add	r3, r2
 8001524:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8001526:	89fb      	ldrh	r3, [r7, #14]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2202      	movs	r2, #2
 800152c:	f240 6107 	movw	r1, #1543	; 0x607
 8001530:	4618      	mov	r0, r3
 8001532:	f000 ffcd 	bl	80024d0 <CODEC_IO_Write>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	4413      	add	r3, r2
 800153e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8001540:	89fb      	ldrh	r3, [r7, #14]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2202      	movs	r2, #2
 8001546:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 800154a:	4618      	mov	r0, r3
 800154c:	f000 ffc0 	bl	80024d0 <CODEC_IO_Write>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	4413      	add	r3, r2
 8001558:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2202      	movs	r2, #2
 8001560:	f240 6109 	movw	r1, #1545	; 0x609
 8001564:	4618      	mov	r0, r3
 8001566:	f000 ffb3 	bl	80024d0 <CODEC_IO_Write>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	4413      	add	r3, r2
 8001572:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	220d      	movs	r2, #13
 800157a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800157e:	4618      	mov	r0, r3
 8001580:	f000 ffa6 	bl	80024d0 <CODEC_IO_Write>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	61fb      	str	r3, [r7, #28]
      break;    
 800158e:	e006      	b.n	800159e <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	3301      	adds	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
      break;
 8001596:	e002      	b.n	800159e <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8001598:	4ba4      	ldr	r3, [pc, #656]	; (800182c <wm8994_Init+0x990>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4aa3      	ldr	r2, [pc, #652]	; (8001830 <wm8994_Init+0x994>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d079      	beq.n	800169a <wm8994_Init+0x7fe>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4aa1      	ldr	r2, [pc, #644]	; (8001830 <wm8994_Init+0x994>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	f200 80ad 	bhi.w	800170a <wm8994_Init+0x86e>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d061      	beq.n	800167e <wm8994_Init+0x7e2>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80015c0:	4293      	cmp	r3, r2
 80015c2:	f200 80a2 	bhi.w	800170a <wm8994_Init+0x86e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80015cc:	4293      	cmp	r3, r2
 80015ce:	f000 808e 	beq.w	80016ee <wm8994_Init+0x852>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80015d8:	4293      	cmp	r3, r2
 80015da:	f200 8096 	bhi.w	800170a <wm8994_Init+0x86e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80015e4:	d03d      	beq.n	8001662 <wm8994_Init+0x7c6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80015ec:	f200 808d 	bhi.w	800170a <wm8994_Init+0x86e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f245 6222 	movw	r2, #22050	; 0x5622
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d06b      	beq.n	80016d2 <wm8994_Init+0x836>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f245 6222 	movw	r2, #22050	; 0x5622
 8001600:	4293      	cmp	r3, r2
 8001602:	f200 8082 	bhi.w	800170a <wm8994_Init+0x86e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800160c:	d01b      	beq.n	8001646 <wm8994_Init+0x7aa>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001614:	d879      	bhi.n	800170a <wm8994_Init+0x86e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800161c:	d005      	beq.n	800162a <wm8994_Init+0x78e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f642 3211 	movw	r2, #11025	; 0x2b11
 8001624:	4293      	cmp	r3, r2
 8001626:	d046      	beq.n	80016b6 <wm8994_Init+0x81a>
 8001628:	e06f      	b.n	800170a <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 800162a:	89fb      	ldrh	r3, [r7, #14]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2203      	movs	r2, #3
 8001630:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001634:	4618      	mov	r0, r3
 8001636:	f000 ff4b 	bl	80024d0 <CODEC_IO_Write>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
    break;
 8001644:	e06f      	b.n	8001726 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2233      	movs	r2, #51	; 0x33
 800164c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001650:	4618      	mov	r0, r3
 8001652:	f000 ff3d 	bl	80024d0 <CODEC_IO_Write>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	4413      	add	r3, r2
 800165e:	61fb      	str	r3, [r7, #28]
    break;
 8001660:	e061      	b.n	8001726 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001662:	89fb      	ldrh	r3, [r7, #14]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2263      	movs	r2, #99	; 0x63
 8001668:	f44f 7104 	mov.w	r1, #528	; 0x210
 800166c:	4618      	mov	r0, r3
 800166e:	f000 ff2f 	bl	80024d0 <CODEC_IO_Write>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	4413      	add	r3, r2
 800167a:	61fb      	str	r3, [r7, #28]
    break;
 800167c:	e053      	b.n	8001726 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800167e:	89fb      	ldrh	r3, [r7, #14]
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2283      	movs	r2, #131	; 0x83
 8001684:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001688:	4618      	mov	r0, r3
 800168a:	f000 ff21 	bl	80024d0 <CODEC_IO_Write>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	61fb      	str	r3, [r7, #28]
    break;
 8001698:	e045      	b.n	8001726 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	22a3      	movs	r2, #163	; 0xa3
 80016a0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 ff13 	bl	80024d0 <CODEC_IO_Write>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	4413      	add	r3, r2
 80016b2:	61fb      	str	r3, [r7, #28]
    break;
 80016b4:	e037      	b.n	8001726 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80016b6:	89fb      	ldrh	r3, [r7, #14]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2213      	movs	r2, #19
 80016bc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 ff05 	bl	80024d0 <CODEC_IO_Write>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461a      	mov	r2, r3
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4413      	add	r3, r2
 80016ce:	61fb      	str	r3, [r7, #28]
    break;
 80016d0:	e029      	b.n	8001726 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2243      	movs	r2, #67	; 0x43
 80016d8:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016dc:	4618      	mov	r0, r3
 80016de:	f000 fef7 	bl	80024d0 <CODEC_IO_Write>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	61fb      	str	r3, [r7, #28]
    break;
 80016ec:	e01b      	b.n	8001726 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2273      	movs	r2, #115	; 0x73
 80016f4:	f44f 7104 	mov.w	r1, #528	; 0x210
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fee9 	bl	80024d0 <CODEC_IO_Write>
 80016fe:	4603      	mov	r3, r0
 8001700:	461a      	mov	r2, r3
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	4413      	add	r3, r2
 8001706:	61fb      	str	r3, [r7, #28]
    break; 
 8001708:	e00d      	b.n	8001726 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2283      	movs	r2, #131	; 0x83
 8001710:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001714:	4618      	mov	r0, r3
 8001716:	f000 fedb 	bl	80024d0 <CODEC_IO_Write>
 800171a:	4603      	mov	r3, r0
 800171c:	461a      	mov	r2, r3
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	4413      	add	r3, r2
 8001722:	61fb      	str	r3, [r7, #28]
    break; 
 8001724:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001726:	8afb      	ldrh	r3, [r7, #22]
 8001728:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800172c:	d10e      	bne.n	800174c <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f244 0218 	movw	r2, #16408	; 0x4018
 8001736:	f44f 7140 	mov.w	r1, #768	; 0x300
 800173a:	4618      	mov	r0, r3
 800173c:	f000 fec8 	bl	80024d0 <CODEC_IO_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	4413      	add	r3, r2
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e00d      	b.n	8001768 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	b2db      	uxtb	r3, r3
 8001750:	f244 0210 	movw	r2, #16400	; 0x4010
 8001754:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001758:	4618      	mov	r0, r3
 800175a:	f000 feb9 	bl	80024d0 <CODEC_IO_Write>
 800175e:	4603      	mov	r3, r0
 8001760:	461a      	mov	r2, r3
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	4413      	add	r3, r2
 8001766:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8001768:	89fb      	ldrh	r3, [r7, #14]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2200      	movs	r2, #0
 800176e:	f240 3102 	movw	r1, #770	; 0x302
 8001772:	4618      	mov	r0, r3
 8001774:	f000 feac 	bl	80024d0 <CODEC_IO_Write>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	4413      	add	r3, r2
 8001780:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8001782:	89fb      	ldrh	r3, [r7, #14]
 8001784:	b2db      	uxtb	r3, r3
 8001786:	220a      	movs	r2, #10
 8001788:	f44f 7102 	mov.w	r1, #520	; 0x208
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fe9f 	bl	80024d0 <CODEC_IO_Write>
 8001792:	4603      	mov	r3, r0
 8001794:	461a      	mov	r2, r3
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 800179c:	89fb      	ldrh	r3, [r7, #14]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2201      	movs	r2, #1
 80017a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fe92 	bl	80024d0 <CODEC_IO_Write>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	4413      	add	r3, r2
 80017b4:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 80017b6:	8b3b      	ldrh	r3, [r7, #24]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 817b 	beq.w	8001ab4 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 80017be:	8b3b      	ldrh	r3, [r7, #24]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d157      	bne.n	8001874 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 80017c4:	89fb      	ldrh	r3, [r7, #14]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017cc:	212d      	movs	r1, #45	; 0x2d
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fe7e 	bl	80024d0 <CODEC_IO_Write>
 80017d4:	4603      	mov	r3, r0
 80017d6:	461a      	mov	r2, r3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e6:	212e      	movs	r1, #46	; 0x2e
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fe71 	bl	80024d0 <CODEC_IO_Write>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	4413      	add	r3, r2
 80017f6:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 80017f8:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <wm8994_Init+0x998>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d01b      	beq.n	8001838 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8001800:	89fb      	ldrh	r3, [r7, #14]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8001808:	f44f 7188 	mov.w	r1, #272	; 0x110
 800180c:	4618      	mov	r0, r3
 800180e:	f000 fe5f 	bl	80024d0 <CODEC_IO_Write>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	4413      	add	r3, r2
 800181a:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <wm8994_Init+0x998>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8001822:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001826:	f001 f829 	bl	800287c <AUDIO_IO_Delay>
 800182a:	e016      	b.n	800185a <wm8994_Init+0x9be>
 800182c:	2000007c 	.word	0x2000007c
 8001830:	00017700 	.word	0x00017700
 8001834:	20000030 	.word	0x20000030
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8001838:	89fb      	ldrh	r3, [r7, #14]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f248 1208 	movw	r2, #33032	; 0x8108
 8001840:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fe43 	bl	80024d0 <CODEC_IO_Write>
 800184a:	4603      	mov	r3, r0
 800184c:	461a      	mov	r2, r3
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	4413      	add	r3, r2
 8001852:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8001854:	2032      	movs	r0, #50	; 0x32
 8001856:	f001 f811 	bl	800287c <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001864:	4618      	mov	r0, r3
 8001866:	f000 fe33 	bl	80024d0 <CODEC_IO_Write>
 800186a:	4603      	mov	r3, r0
 800186c:	461a      	mov	r2, r3
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	4413      	add	r3, r2
 8001872:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f44f 7240 	mov.w	r2, #768	; 0x300
 800187c:	2103      	movs	r1, #3
 800187e:	4618      	mov	r0, r3
 8001880:	f000 fe26 	bl	80024d0 <CODEC_IO_Write>
 8001884:	4603      	mov	r3, r0
 8001886:	461a      	mov	r2, r3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	4413      	add	r3, r2
 800188c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 800188e:	89fb      	ldrh	r3, [r7, #14]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2200      	movs	r2, #0
 8001894:	2122      	movs	r1, #34	; 0x22
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fe1a 	bl	80024d0 <CODEC_IO_Write>
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	4413      	add	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 80018a6:	89fb      	ldrh	r3, [r7, #14]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2200      	movs	r2, #0
 80018ac:	2123      	movs	r1, #35	; 0x23
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fe0e 	bl	80024d0 <CODEC_IO_Write>
 80018b4:	4603      	mov	r3, r0
 80018b6:	461a      	mov	r2, r3
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	4413      	add	r3, r2
 80018bc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80018c6:	2136      	movs	r1, #54	; 0x36
 80018c8:	4618      	mov	r0, r3
 80018ca:	f000 fe01 	bl	80024d0 <CODEC_IO_Write>
 80018ce:	4603      	mov	r3, r0
 80018d0:	461a      	mov	r2, r3
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	4413      	add	r3, r2
 80018d6:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 80018d8:	89fb      	ldrh	r3, [r7, #14]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f243 0203 	movw	r2, #12291	; 0x3003
 80018e0:	2101      	movs	r1, #1
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fdf4 	bl	80024d0 <CODEC_IO_Write>
 80018e8:	4603      	mov	r3, r0
 80018ea:	461a      	mov	r2, r3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	4413      	add	r3, r2
 80018f0:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80018f2:	8afb      	ldrh	r3, [r7, #22]
 80018f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018f8:	d10d      	bne.n	8001916 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 80018fa:	89fb      	ldrh	r3, [r7, #14]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	f240 2205 	movw	r2, #517	; 0x205
 8001902:	2151      	movs	r1, #81	; 0x51
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fde3 	bl	80024d0 <CODEC_IO_Write>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	e00b      	b.n	800192e <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8001916:	89fb      	ldrh	r3, [r7, #14]
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2205      	movs	r2, #5
 800191c:	2151      	movs	r1, #81	; 0x51
 800191e:	4618      	mov	r0, r3
 8001920:	f000 fdd6 	bl	80024d0 <CODEC_IO_Write>
 8001924:	4603      	mov	r3, r0
 8001926:	461a      	mov	r2, r3
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	4413      	add	r3, r2
 800192c:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 800192e:	8b7b      	ldrh	r3, [r7, #26]
 8001930:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8001934:	f043 0303 	orr.w	r3, r3, #3
 8001938:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	8b7a      	ldrh	r2, [r7, #26]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f000 fdc4 	bl	80024d0 <CODEC_IO_Write>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	4413      	add	r3, r2
 8001950:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2222      	movs	r2, #34	; 0x22
 8001958:	2160      	movs	r1, #96	; 0x60
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fdb8 	bl	80024d0 <CODEC_IO_Write>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 800196a:	89fb      	ldrh	r3, [r7, #14]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8001972:	214c      	movs	r1, #76	; 0x4c
 8001974:	4618      	mov	r0, r3
 8001976:	f000 fdab 	bl	80024d0 <CODEC_IO_Write>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8001984:	200f      	movs	r0, #15
 8001986:	f000 ff79 	bl	800287c <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	2201      	movs	r2, #1
 8001990:	212d      	movs	r1, #45	; 0x2d
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fd9c 	bl	80024d0 <CODEC_IO_Write>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	4413      	add	r3, r2
 80019a0:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 80019a2:	89fb      	ldrh	r3, [r7, #14]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2201      	movs	r2, #1
 80019a8:	212e      	movs	r1, #46	; 0x2e
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 fd90 	bl	80024d0 <CODEC_IO_Write>
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	4413      	add	r3, r2
 80019b8:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f44f 724c 	mov.w	r2, #816	; 0x330
 80019c2:	2103      	movs	r1, #3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fd83 	bl	80024d0 <CODEC_IO_Write>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 80019d4:	89fb      	ldrh	r3, [r7, #14]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2233      	movs	r2, #51	; 0x33
 80019da:	2154      	movs	r1, #84	; 0x54
 80019dc:	4618      	mov	r0, r3
 80019de:	f000 fd77 	bl	80024d0 <CODEC_IO_Write>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	4413      	add	r3, r2
 80019ea:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 80019ec:	f240 1001 	movw	r0, #257	; 0x101
 80019f0:	f000 ff44 	bl	800287c <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 80019f4:	89fb      	ldrh	r3, [r7, #14]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	22ee      	movs	r2, #238	; 0xee
 80019fa:	2160      	movs	r1, #96	; 0x60
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fd67 	bl	80024d0 <CODEC_IO_Write>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	22c0      	movs	r2, #192	; 0xc0
 8001a12:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 fd5a 	bl	80024d0 <CODEC_IO_Write>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	4413      	add	r3, r2
 8001a24:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8001a26:	89fb      	ldrh	r3, [r7, #14]
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	22c0      	movs	r2, #192	; 0xc0
 8001a2c:	f240 6111 	movw	r1, #1553	; 0x611
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fd4d 	bl	80024d0 <CODEC_IO_Write>
 8001a36:	4603      	mov	r3, r0
 8001a38:	461a      	mov	r2, r3
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8001a40:	89fb      	ldrh	r3, [r7, #14]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2210      	movs	r2, #16
 8001a46:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f000 fd40 	bl	80024d0 <CODEC_IO_Write>
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	4413      	add	r3, r2
 8001a58:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 8001a5a:	89fb      	ldrh	r3, [r7, #14]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	22c0      	movs	r2, #192	; 0xc0
 8001a60:	f240 6112 	movw	r1, #1554	; 0x612
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fd33 	bl	80024d0 <CODEC_IO_Write>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	4413      	add	r3, r2
 8001a72:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8001a74:	89fb      	ldrh	r3, [r7, #14]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	22c0      	movs	r2, #192	; 0xc0
 8001a7a:	f240 6113 	movw	r1, #1555	; 0x613
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fd26 	bl	80024d0 <CODEC_IO_Write>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2210      	movs	r2, #16
 8001a94:	f240 4122 	movw	r1, #1058	; 0x422
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 fd19 	bl	80024d0 <CODEC_IO_Write>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001aa8:	7afa      	ldrb	r2, [r7, #11]
 8001aaa:	89fb      	ldrh	r3, [r7, #14]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f984 	bl	8001dbc <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001ab4:	8afb      	ldrh	r3, [r7, #22]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 80a6 	beq.w	8001c08 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001abc:	8afb      	ldrh	r3, [r7, #22]
 8001abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ac2:	d003      	beq.n	8001acc <wm8994_Init+0xc30>
 8001ac4:	8afb      	ldrh	r3, [r7, #22]
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d12b      	bne.n	8001b24 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001acc:	8b7b      	ldrh	r3, [r7, #26]
 8001ace:	f043 0313 	orr.w	r3, r3, #19
 8001ad2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001ad4:	89fb      	ldrh	r3, [r7, #14]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	8b7a      	ldrh	r2, [r7, #26]
 8001ada:	2101      	movs	r1, #1
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fcf7 	bl	80024d0 <CODEC_IO_Write>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	4413      	add	r3, r2
 8001aea:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001aec:	89fb      	ldrh	r3, [r7, #14]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	2202      	movs	r2, #2
 8001af2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 fcea 	bl	80024d0 <CODEC_IO_Write>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	4413      	add	r3, r2
 8001b04:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b0e:	f240 4111 	movw	r1, #1041	; 0x411
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fcdc 	bl	80024d0 <CODEC_IO_Write>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	4413      	add	r3, r2
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e06b      	b.n	8001bfc <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001b24:	8afb      	ldrh	r3, [r7, #22]
 8001b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b2a:	d139      	bne.n	8001ba0 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001b2c:	8b7b      	ldrh	r3, [r7, #26]
 8001b2e:	f043 0313 	orr.w	r3, r3, #19
 8001b32:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	8b7a      	ldrh	r2, [r7, #26]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fcc7 	bl	80024d0 <CODEC_IO_Write>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	4413      	add	r3, r2
 8001b4a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001b4c:	89fb      	ldrh	r3, [r7, #14]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2202      	movs	r2, #2
 8001b52:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fcba 	bl	80024d0 <CODEC_IO_Write>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001b6e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 fcac 	bl	80024d0 <CODEC_IO_Write>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	4413      	add	r3, r2
 8001b80:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8001b82:	89fb      	ldrh	r3, [r7, #14]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001b8a:	f240 4111 	movw	r1, #1041	; 0x411
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 fc9e 	bl	80024d0 <CODEC_IO_Write>
 8001b94:	4603      	mov	r3, r0
 8001b96:	461a      	mov	r2, r3
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e02d      	b.n	8001bfc <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001ba0:	8afb      	ldrh	r3, [r7, #22]
 8001ba2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ba6:	d003      	beq.n	8001bb0 <wm8994_Init+0xd14>
 8001ba8:	8afb      	ldrh	r3, [r7, #22]
 8001baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bae:	d125      	bne.n	8001bfc <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	220b      	movs	r2, #11
 8001bb6:	2118      	movs	r1, #24
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 fc89 	bl	80024d0 <CODEC_IO_Write>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8001bc8:	89fb      	ldrh	r3, [r7, #14]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	220b      	movs	r2, #11
 8001bce:	211a      	movs	r1, #26
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fc7d 	bl	80024d0 <CODEC_IO_Write>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	4413      	add	r3, r2
 8001bde:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8001be8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001bec:	4618      	mov	r0, r3
 8001bee:	f000 fc6f 	bl	80024d0 <CODEC_IO_Write>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001bfc:	7afa      	ldrb	r2, [r7, #11]
 8001bfe:	89fb      	ldrh	r3, [r7, #14]
 8001c00:	4611      	mov	r1, r2
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f8da 	bl	8001dbc <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 8001c08:	69fb      	ldr	r3, [r7, #28]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop

08001c14 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 8001c18:	f000 fdd2 	bl	80027c0 <AUDIO_IO_DeInit>
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8001c2a:	f000 fdbf 	bl	80027ac <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fdf5 	bl	8002824 <AUDIO_IO_Read>
 8001c3a:	4603      	mov	r3, r0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	80fb      	strh	r3, [r7, #6]
 8001c50:	4613      	mov	r3, r2
 8001c52:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f000 f9d1 	bl	8002004 <wm8994_SetMute>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 f9bc 	bl	8002004 <wm8994_SetMute>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4413      	add	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2201      	movs	r2, #1
 8001c9a:	2102      	movs	r1, #2
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f000 fc17 	bl	80024d0 <CODEC_IO_Write>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4413      	add	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 f99b 	bl	8002004 <wm8994_SetMute>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8001cf0:	4b31      	ldr	r3, [pc, #196]	; (8001db8 <wm8994_Stop+0xd8>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d05a      	beq.n	8001dae <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001cf8:	88fb      	ldrh	r3, [r7, #6]
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f981 	bl	8002004 <wm8994_SetMute>
 8001d02:	4602      	mov	r2, r0
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d04e      	beq.n	8001dae <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d18:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fbd7 	bl	80024d0 <CODEC_IO_Write>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4413      	add	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001d2c:	88fb      	ldrh	r3, [r7, #6]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d34:	f240 4122 	movw	r1, #1058	; 0x422
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 fbc9 	bl	80024d0 <CODEC_IO_Write>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4413      	add	r3, r2
 8001d46:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	212d      	movs	r1, #45	; 0x2d
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 fbbd 	bl	80024d0 <CODEC_IO_Write>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2200      	movs	r2, #0
 8001d66:	212e      	movs	r1, #46	; 0x2e
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fbb1 	bl	80024d0 <CODEC_IO_Write>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	461a      	mov	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	4413      	add	r3, r2
 8001d76:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2105      	movs	r1, #5
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 fba5 	bl	80024d0 <CODEC_IO_Write>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f000 fb99 	bl	80024d0 <CODEC_IO_Write>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461a      	mov	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4413      	add	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <wm8994_Stop+0xd8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000078 	.word	0x20000078

08001dbc <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	80fb      	strh	r3, [r7, #6]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001dd0:	797b      	ldrb	r3, [r7, #5]
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d80b      	bhi.n	8001dee <wm8994_SetVolume+0x32>
 8001dd6:	797a      	ldrb	r2, [r7, #5]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	019b      	lsls	r3, r3, #6
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	4a86      	ldr	r2, [pc, #536]	; (8001ff8 <wm8994_SetVolume+0x23c>)
 8001de0:	fb82 1203 	smull	r1, r2, r2, r3
 8001de4:	1152      	asrs	r2, r2, #5
 8001de6:	17db      	asrs	r3, r3, #31
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	e000      	b.n	8001df0 <wm8994_SetVolume+0x34>
 8001dee:	2364      	movs	r3, #100	; 0x64
 8001df0:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001df2:	4b82      	ldr	r3, [pc, #520]	; (8001ffc <wm8994_SetVolume+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 809b 	beq.w	8001f32 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	2b3e      	cmp	r3, #62	; 0x3e
 8001e00:	d93d      	bls.n	8001e7e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 f8fc 	bl	8002004 <wm8994_SetMute>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4413      	add	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f240 127f 	movw	r2, #383	; 0x17f
 8001e1c:	211c      	movs	r1, #28
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fb56 	bl	80024d0 <CODEC_IO_Write>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	f240 127f 	movw	r2, #383	; 0x17f
 8001e36:	211d      	movs	r1, #29
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fb49 	bl	80024d0 <CODEC_IO_Write>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461a      	mov	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4413      	add	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 8001e48:	88fb      	ldrh	r3, [r7, #6]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f240 127f 	movw	r2, #383	; 0x17f
 8001e50:	2126      	movs	r1, #38	; 0x26
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fb3c 	bl	80024d0 <CODEC_IO_Write>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4413      	add	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	f240 127f 	movw	r2, #383	; 0x17f
 8001e6a:	2127      	movs	r1, #39	; 0x27
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 fb2f 	bl	80024d0 <CODEC_IO_Write>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4413      	add	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e059      	b.n	8001f32 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 8001e7e:	797b      	ldrb	r3, [r7, #5]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d109      	bne.n	8001e98 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	2101      	movs	r1, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f8bb 	bl	8002004 <wm8994_SetMute>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	e04c      	b.n	8001f32 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001e98:	88fb      	ldrh	r3, [r7, #6]
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f000 f8b1 	bl	8002004 <wm8994_SetMute>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	b2d8      	uxtb	r0, r3
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001eb6:	b21b      	sxth	r3, r3
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	211c      	movs	r1, #28
 8001ebe:	f000 fb07 	bl	80024d0 <CODEC_IO_Write>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4413      	add	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001ecc:	88fb      	ldrh	r3, [r7, #6]
 8001ece:	b2d8      	uxtb	r0, r3
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	b21b      	sxth	r3, r3
 8001ed4:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	461a      	mov	r2, r3
 8001ede:	211d      	movs	r1, #29
 8001ee0:	f000 faf6 	bl	80024d0 <CODEC_IO_Write>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	b2d8      	uxtb	r0, r3
 8001ef2:	7afb      	ldrb	r3, [r7, #11]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	2126      	movs	r1, #38	; 0x26
 8001f02:	f000 fae5 	bl	80024d0 <CODEC_IO_Write>
 8001f06:	4603      	mov	r3, r0
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	b2d8      	uxtb	r0, r3
 8001f14:	7afb      	ldrb	r3, [r7, #11]
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	2127      	movs	r1, #39	; 0x27
 8001f24:	f000 fad4 	bl	80024d0 <CODEC_IO_Write>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <wm8994_SetVolume+0x244>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d059      	beq.n	8001fee <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 8001f3a:	797b      	ldrb	r3, [r7, #5]
 8001f3c:	2b63      	cmp	r3, #99	; 0x63
 8001f3e:	d80c      	bhi.n	8001f5a <wm8994_SetVolume+0x19e>
 8001f40:	797a      	ldrb	r2, [r7, #5]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <wm8994_SetVolume+0x23c>)
 8001f4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f50:	1152      	asrs	r2, r2, #5
 8001f52:	17db      	asrs	r3, r3, #31
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	e000      	b.n	8001f5c <wm8994_SetVolume+0x1a0>
 8001f5a:	23ef      	movs	r3, #239	; 0xef
 8001f5c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	b2d8      	uxtb	r0, r3
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	f000 faac 	bl	80024d0 <CODEC_IO_Write>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	4413      	add	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	b2d8      	uxtb	r0, r3
 8001f86:	7afb      	ldrb	r3, [r7, #11]
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	f240 4101 	movw	r1, #1025	; 0x401
 8001f98:	f000 fa9a 	bl	80024d0 <CODEC_IO_Write>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	b2d8      	uxtb	r0, r3
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	b21b      	sxth	r3, r3
 8001fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f240 4104 	movw	r1, #1028	; 0x404
 8001fbc:	f000 fa88 	bl	80024d0 <CODEC_IO_Write>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	b2d8      	uxtb	r0, r3
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f240 4105 	movw	r1, #1029	; 0x405
 8001fe0:	f000 fa76 	bl	80024d0 <CODEC_IO_Write>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	51eb851f 	.word	0x51eb851f
 8001ffc:	20000078 	.word	0x20000078
 8002000:	2000007c 	.word	0x2000007c

08002004 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	6039      	str	r1, [r7, #0]
 800200e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <wm8994_SetMute+0x98>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d039      	beq.n	8002090 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d11c      	bne.n	800205c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800202a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fa4e 	bl	80024d0 <CODEC_IO_Write>
 8002034:	4603      	mov	r3, r0
 8002036:	461a      	mov	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4413      	add	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002046:	f240 4122 	movw	r1, #1058	; 0x422
 800204a:	4618      	mov	r0, r3
 800204c:	f000 fa40 	bl	80024d0 <CODEC_IO_Write>
 8002050:	4603      	mov	r3, r0
 8002052:	461a      	mov	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e019      	b.n	8002090 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2210      	movs	r2, #16
 8002062:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8002066:	4618      	mov	r0, r3
 8002068:	f000 fa32 	bl	80024d0 <CODEC_IO_Write>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2210      	movs	r2, #16
 800207c:	f240 4122 	movw	r1, #1058	; 0x422
 8002080:	4618      	mov	r0, r3
 8002082:	f000 fa25 	bl	80024d0 <CODEC_IO_Write>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000078 	.word	0x20000078

080020a0 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	460a      	mov	r2, r1
 80020aa:	80fb      	strh	r3, [r7, #6]
 80020ac:	4613      	mov	r3, r2
 80020ae:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80020b4:	797b      	ldrb	r3, [r7, #5]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	f000 808c 	beq.w	80021d4 <wm8994_SetOutputMode+0x134>
 80020bc:	2b03      	cmp	r3, #3
 80020be:	f300 80cb 	bgt.w	8002258 <wm8994_SetOutputMode+0x1b8>
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d002      	beq.n	80020cc <wm8994_SetOutputMode+0x2c>
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d042      	beq.n	8002150 <wm8994_SetOutputMode+0xb0>
 80020ca:	e0c5      	b.n	8002258 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f640 420c 	movw	r2, #3084	; 0xc0c
 80020d4:	2105      	movs	r1, #5
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f9fa 	bl	80024d0 <CODEC_IO_Write>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	4413      	add	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80020e6:	88fb      	ldrh	r3, [r7, #6]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2200      	movs	r2, #0
 80020ec:	f240 6101 	movw	r1, #1537	; 0x601
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 f9ed 	bl	80024d0 <CODEC_IO_Write>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4413      	add	r3, r2
 80020fe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2200      	movs	r2, #0
 8002106:	f240 6102 	movw	r1, #1538	; 0x602
 800210a:	4618      	mov	r0, r3
 800210c:	f000 f9e0 	bl	80024d0 <CODEC_IO_Write>
 8002110:	4603      	mov	r3, r0
 8002112:	461a      	mov	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4413      	add	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2202      	movs	r2, #2
 8002120:	f240 6104 	movw	r1, #1540	; 0x604
 8002124:	4618      	mov	r0, r3
 8002126:	f000 f9d3 	bl	80024d0 <CODEC_IO_Write>
 800212a:	4603      	mov	r3, r0
 800212c:	461a      	mov	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	4413      	add	r3, r2
 8002132:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2202      	movs	r2, #2
 800213a:	f240 6105 	movw	r1, #1541	; 0x605
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f9c6 	bl	80024d0 <CODEC_IO_Write>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
    break;
 800214e:	e0c5      	b.n	80022dc <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002150:	88fb      	ldrh	r3, [r7, #6]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f240 3203 	movw	r2, #771	; 0x303
 8002158:	2105      	movs	r1, #5
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f9b8 	bl	80024d0 <CODEC_IO_Write>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4413      	add	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2201      	movs	r2, #1
 8002170:	f240 6101 	movw	r1, #1537	; 0x601
 8002174:	4618      	mov	r0, r3
 8002176:	f000 f9ab 	bl	80024d0 <CODEC_IO_Write>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	4413      	add	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002184:	88fb      	ldrh	r3, [r7, #6]
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2201      	movs	r2, #1
 800218a:	f240 6102 	movw	r1, #1538	; 0x602
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f99e 	bl	80024d0 <CODEC_IO_Write>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	4413      	add	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2200      	movs	r2, #0
 80021a4:	f240 6104 	movw	r1, #1540	; 0x604
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f991 	bl	80024d0 <CODEC_IO_Write>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2200      	movs	r2, #0
 80021be:	f240 6105 	movw	r1, #1541	; 0x605
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f984 	bl	80024d0 <CODEC_IO_Write>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
    break;
 80021d2:	e083      	b.n	80022dc <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	f640 720f 	movw	r2, #3855	; 0xf0f
 80021dc:	2105      	movs	r1, #5
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 f976 	bl	80024d0 <CODEC_IO_Write>
 80021e4:	4603      	mov	r3, r0
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2201      	movs	r2, #1
 80021f4:	f240 6101 	movw	r1, #1537	; 0x601
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 f969 	bl	80024d0 <CODEC_IO_Write>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4413      	add	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2201      	movs	r2, #1
 800220e:	f240 6102 	movw	r1, #1538	; 0x602
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f95c 	bl	80024d0 <CODEC_IO_Write>
 8002218:	4603      	mov	r3, r0
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8002222:	88fb      	ldrh	r3, [r7, #6]
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2202      	movs	r2, #2
 8002228:	f240 6104 	movw	r1, #1540	; 0x604
 800222c:	4618      	mov	r0, r3
 800222e:	f000 f94f 	bl	80024d0 <CODEC_IO_Write>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	4413      	add	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2202      	movs	r2, #2
 8002242:	f240 6105 	movw	r1, #1541	; 0x605
 8002246:	4618      	mov	r0, r3
 8002248:	f000 f942 	bl	80024d0 <CODEC_IO_Write>
 800224c:	4603      	mov	r3, r0
 800224e:	461a      	mov	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4413      	add	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
    break;
 8002256:	e041      	b.n	80022dc <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	b2db      	uxtb	r3, r3
 800225c:	f240 3203 	movw	r2, #771	; 0x303
 8002260:	2105      	movs	r1, #5
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f934 	bl	80024d0 <CODEC_IO_Write>
 8002268:	4603      	mov	r3, r0
 800226a:	461a      	mov	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4413      	add	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2201      	movs	r2, #1
 8002278:	f240 6101 	movw	r1, #1537	; 0x601
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f927 	bl	80024d0 <CODEC_IO_Write>
 8002282:	4603      	mov	r3, r0
 8002284:	461a      	mov	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2201      	movs	r2, #1
 8002292:	f240 6102 	movw	r1, #1538	; 0x602
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f91a 	bl	80024d0 <CODEC_IO_Write>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	f240 6104 	movw	r1, #1540	; 0x604
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f90d 	bl	80024d0 <CODEC_IO_Write>
 80022b6:	4603      	mov	r3, r0
 80022b8:	461a      	mov	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4413      	add	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2200      	movs	r2, #0
 80022c6:	f240 6105 	movw	r1, #1541	; 0x605
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f900 	bl	80024d0 <CODEC_IO_Write>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
    break;    
 80022da:	bf00      	nop
  }  
  return counter;
 80022dc:	68fb      	ldr	r3, [r7, #12]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	4603      	mov	r3, r0
 80022f0:	6039      	str	r1, [r7, #0]
 80022f2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	4a64      	ldr	r2, [pc, #400]	; (800248c <wm8994_SetFrequency+0x1a4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d079      	beq.n	80023f4 <wm8994_SetFrequency+0x10c>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4a62      	ldr	r2, [pc, #392]	; (800248c <wm8994_SetFrequency+0x1a4>)
 8002304:	4293      	cmp	r3, r2
 8002306:	f200 80ad 	bhi.w	8002464 <wm8994_SetFrequency+0x17c>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8002310:	4293      	cmp	r3, r2
 8002312:	d061      	beq.n	80023d8 <wm8994_SetFrequency+0xf0>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800231a:	4293      	cmp	r3, r2
 800231c:	f200 80a2 	bhi.w	8002464 <wm8994_SetFrequency+0x17c>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002326:	4293      	cmp	r3, r2
 8002328:	f000 808e 	beq.w	8002448 <wm8994_SetFrequency+0x160>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002332:	4293      	cmp	r3, r2
 8002334:	f200 8096 	bhi.w	8002464 <wm8994_SetFrequency+0x17c>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800233e:	d03d      	beq.n	80023bc <wm8994_SetFrequency+0xd4>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002346:	f200 808d 	bhi.w	8002464 <wm8994_SetFrequency+0x17c>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	f245 6222 	movw	r2, #22050	; 0x5622
 8002350:	4293      	cmp	r3, r2
 8002352:	d06b      	beq.n	800242c <wm8994_SetFrequency+0x144>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	f245 6222 	movw	r2, #22050	; 0x5622
 800235a:	4293      	cmp	r3, r2
 800235c:	f200 8082 	bhi.w	8002464 <wm8994_SetFrequency+0x17c>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8002366:	d01b      	beq.n	80023a0 <wm8994_SetFrequency+0xb8>
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800236e:	d879      	bhi.n	8002464 <wm8994_SetFrequency+0x17c>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002376:	d005      	beq.n	8002384 <wm8994_SetFrequency+0x9c>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800237e:	4293      	cmp	r3, r2
 8002380:	d046      	beq.n	8002410 <wm8994_SetFrequency+0x128>
 8002382:	e06f      	b.n	8002464 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2203      	movs	r2, #3
 800238a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f89e 	bl	80024d0 <CODEC_IO_Write>
 8002394:	4603      	mov	r3, r0
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    break;
 800239e:	e06f      	b.n	8002480 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2233      	movs	r2, #51	; 0x33
 80023a6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f890 	bl	80024d0 <CODEC_IO_Write>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461a      	mov	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4413      	add	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
    break;
 80023ba:	e061      	b.n	8002480 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2263      	movs	r2, #99	; 0x63
 80023c2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f882 	bl	80024d0 <CODEC_IO_Write>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
    break;
 80023d6:	e053      	b.n	8002480 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 80023d8:	88fb      	ldrh	r3, [r7, #6]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2283      	movs	r2, #131	; 0x83
 80023de:	f44f 7104 	mov.w	r1, #528	; 0x210
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 f874 	bl	80024d0 <CODEC_IO_Write>
 80023e8:	4603      	mov	r3, r0
 80023ea:	461a      	mov	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]
    break;
 80023f2:	e045      	b.n	8002480 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80023f4:	88fb      	ldrh	r3, [r7, #6]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	22a3      	movs	r2, #163	; 0xa3
 80023fa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f866 	bl	80024d0 <CODEC_IO_Write>
 8002404:	4603      	mov	r3, r0
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
    break;
 800240e:	e037      	b.n	8002480 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2213      	movs	r2, #19
 8002416:	f44f 7104 	mov.w	r1, #528	; 0x210
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f858 	bl	80024d0 <CODEC_IO_Write>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4413      	add	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
    break;
 800242a:	e029      	b.n	8002480 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2243      	movs	r2, #67	; 0x43
 8002432:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f84a 	bl	80024d0 <CODEC_IO_Write>
 800243c:	4603      	mov	r3, r0
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
    break;
 8002446:	e01b      	b.n	8002480 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2273      	movs	r2, #115	; 0x73
 800244e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f83c 	bl	80024d0 <CODEC_IO_Write>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4413      	add	r3, r2
 8002460:	60fb      	str	r3, [r7, #12]
    break; 
 8002462:	e00d      	b.n	8002480 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8002464:	88fb      	ldrh	r3, [r7, #6]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2283      	movs	r2, #131	; 0x83
 800246a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f82e 	bl	80024d0 <CODEC_IO_Write>
 8002474:	4603      	mov	r3, r0
 8002476:	461a      	mov	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    break; 
 800247e:	bf00      	nop
  }
  return counter;
 8002480:	68fb      	ldr	r3, [r7, #12]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	00017700 	.word	0x00017700

08002490 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 800249e:	88fb      	ldrh	r3, [r7, #6]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f812 	bl	80024d0 <CODEC_IO_Write>
 80024ac:	4603      	mov	r3, r0
 80024ae:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <wm8994_Reset+0x38>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <wm8994_Reset+0x3c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

  return counter;
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000078 	.word	0x20000078
 80024cc:	2000007c 	.word	0x2000007c

080024d0 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
 80024da:	460b      	mov	r3, r1
 80024dc:	80bb      	strh	r3, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	88b9      	ldrh	r1, [r7, #4]
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f96f 	bl	80027d0 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	b2db      	uxtb	r3, r3
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08c      	sub	sp, #48	; 0x30
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a51      	ldr	r2, [pc, #324]	; (8002650 <I2Cx_MspInit+0x150>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d14d      	bne.n	80025ac <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002510:	4b50      	ldr	r3, [pc, #320]	; (8002654 <I2Cx_MspInit+0x154>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <I2Cx_MspInit+0x154>)
 8002516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800251a:	6313      	str	r3, [r2, #48]	; 0x30
 800251c:	4b4d      	ldr	r3, [pc, #308]	; (8002654 <I2Cx_MspInit+0x154>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800252c:	2312      	movs	r3, #18
 800252e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002534:	2302      	movs	r3, #2
 8002536:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002538:	2304      	movs	r3, #4
 800253a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800253c:	f107 031c 	add.w	r3, r7, #28
 8002540:	4619      	mov	r1, r3
 8002542:	4845      	ldr	r0, [pc, #276]	; (8002658 <I2Cx_MspInit+0x158>)
 8002544:	f002 f89c 	bl	8004680 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800254c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800254e:	f107 031c 	add.w	r3, r7, #28
 8002552:	4619      	mov	r1, r3
 8002554:	4840      	ldr	r0, [pc, #256]	; (8002658 <I2Cx_MspInit+0x158>)
 8002556:	f002 f893 	bl	8004680 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <I2Cx_MspInit+0x154>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a3d      	ldr	r2, [pc, #244]	; (8002654 <I2Cx_MspInit+0x154>)
 8002560:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b3b      	ldr	r3, [pc, #236]	; (8002654 <I2Cx_MspInit+0x154>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <I2Cx_MspInit+0x154>)
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4a37      	ldr	r2, [pc, #220]	; (8002654 <I2Cx_MspInit+0x154>)
 8002578:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800257c:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800257e:	4b35      	ldr	r3, [pc, #212]	; (8002654 <I2Cx_MspInit+0x154>)
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	4a34      	ldr	r2, [pc, #208]	; (8002654 <I2Cx_MspInit+0x154>)
 8002584:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002588:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	210f      	movs	r1, #15
 800258e:	2048      	movs	r0, #72	; 0x48
 8002590:	f001 fad7 	bl	8003b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002594:	2048      	movs	r0, #72	; 0x48
 8002596:	f001 faf0 	bl	8003b7a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	210f      	movs	r1, #15
 800259e:	2049      	movs	r0, #73	; 0x49
 80025a0:	f001 facf 	bl	8003b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80025a4:	2049      	movs	r0, #73	; 0x49
 80025a6:	f001 fae8 	bl	8003b7a <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80025aa:	e04d      	b.n	8002648 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <I2Cx_MspInit+0x154>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4a28      	ldr	r2, [pc, #160]	; (8002654 <I2Cx_MspInit+0x154>)
 80025b2:	f043 0302 	orr.w	r3, r3, #2
 80025b6:	6313      	str	r3, [r2, #48]	; 0x30
 80025b8:	4b26      	ldr	r3, [pc, #152]	; (8002654 <I2Cx_MspInit+0x154>)
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80025c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025c8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025ca:	2312      	movs	r3, #18
 80025cc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025d2:	2302      	movs	r3, #2
 80025d4:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80025d6:	2304      	movs	r3, #4
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	4619      	mov	r1, r3
 80025e0:	481e      	ldr	r0, [pc, #120]	; (800265c <I2Cx_MspInit+0x15c>)
 80025e2:	f002 f84d 	bl	8004680 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80025e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	4619      	mov	r1, r3
 80025f2:	481a      	ldr	r0, [pc, #104]	; (800265c <I2Cx_MspInit+0x15c>)
 80025f4:	f002 f844 	bl	8004680 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80025f8:	4b16      	ldr	r3, [pc, #88]	; (8002654 <I2Cx_MspInit+0x154>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <I2Cx_MspInit+0x154>)
 80025fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002602:	6413      	str	r3, [r2, #64]	; 0x40
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <I2Cx_MspInit+0x154>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002610:	4b10      	ldr	r3, [pc, #64]	; (8002654 <I2Cx_MspInit+0x154>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <I2Cx_MspInit+0x154>)
 8002616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800261a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 800261c:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <I2Cx_MspInit+0x154>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a0c      	ldr	r2, [pc, #48]	; (8002654 <I2Cx_MspInit+0x154>)
 8002622:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002626:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002628:	2200      	movs	r2, #0
 800262a:	210f      	movs	r1, #15
 800262c:	201f      	movs	r0, #31
 800262e:	f001 fa88 	bl	8003b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002632:	201f      	movs	r0, #31
 8002634:	f001 faa1 	bl	8003b7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002638:	2200      	movs	r2, #0
 800263a:	210f      	movs	r1, #15
 800263c:	2020      	movs	r0, #32
 800263e:	f001 fa80 	bl	8003b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002642:	2020      	movs	r0, #32
 8002644:	f001 fa99 	bl	8003b7a <HAL_NVIC_EnableIRQ>
}
 8002648:	bf00      	nop
 800264a:	3730      	adds	r7, #48	; 0x30
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000080 	.word	0x20000080
 8002654:	40023800 	.word	0x40023800
 8002658:	40021c00 	.word	0x40021c00
 800265c:	40020400 	.word	0x40020400

08002660 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f002 fde7 	bl	800523c <HAL_I2C_GetState>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d125      	bne.n	80026c0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <I2Cx_Init+0x68>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d103      	bne.n	8002684 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a13      	ldr	r2, [pc, #76]	; (80026cc <I2Cx_Init+0x6c>)
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e002      	b.n	800268a <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <I2Cx_Init+0x70>)
 8002688:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <I2Cx_Init+0x74>)
 800268e:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2201      	movs	r2, #1
 800269a:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff23 	bl	8002500 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f002 fab2 	bl	8004c24 <HAL_I2C_Init>
  }
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000080 	.word	0x20000080
 80026cc:	40005c00 	.word	0x40005c00
 80026d0:	40005400 	.word	0x40005400
 80026d4:	40912732 	.word	0x40912732

080026d8 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af04      	add	r7, sp, #16
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	4608      	mov	r0, r1
 80026e2:	4611      	mov	r1, r2
 80026e4:	461a      	mov	r2, r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	72fb      	strb	r3, [r7, #11]
 80026ea:	460b      	mov	r3, r1
 80026ec:	813b      	strh	r3, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	b299      	uxth	r1, r3
 80026fa:	88f8      	ldrh	r0, [r7, #6]
 80026fc:	893a      	ldrh	r2, [r7, #8]
 80026fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002702:	9302      	str	r3, [sp, #8]
 8002704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002706:	9301      	str	r3, [sp, #4]
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	4603      	mov	r3, r0
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f002 fc6e 	bl	8004ff0 <HAL_I2C_Mem_Read>
 8002714:	4603      	mov	r3, r0
 8002716:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002718:	7dfb      	ldrb	r3, [r7, #23]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d004      	beq.n	8002728 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800271e:	7afb      	ldrb	r3, [r7, #11]
 8002720:	4619      	mov	r1, r3
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f832 	bl	800278c <I2Cx_Error>
  }
  return status;    
 8002728:	7dfb      	ldrb	r3, [r7, #23]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b08a      	sub	sp, #40	; 0x28
 8002736:	af04      	add	r7, sp, #16
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	4608      	mov	r0, r1
 800273c:	4611      	mov	r1, r2
 800273e:	461a      	mov	r2, r3
 8002740:	4603      	mov	r3, r0
 8002742:	72fb      	strb	r3, [r7, #11]
 8002744:	460b      	mov	r3, r1
 8002746:	813b      	strh	r3, [r7, #8]
 8002748:	4613      	mov	r3, r2
 800274a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800274c:	2300      	movs	r3, #0
 800274e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002750:	7afb      	ldrb	r3, [r7, #11]
 8002752:	b299      	uxth	r1, r3
 8002754:	88f8      	ldrh	r0, [r7, #6]
 8002756:	893a      	ldrh	r2, [r7, #8]
 8002758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	4603      	mov	r3, r0
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f002 fb1b 	bl	8004da4 <HAL_I2C_Mem_Write>
 800276e:	4603      	mov	r3, r0
 8002770:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d004      	beq.n	8002782 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002778:	7afb      	ldrb	r3, [r7, #11]
 800277a:	4619      	mov	r1, r3
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f805 	bl	800278c <I2Cx_Error>
  }
  return status;
 8002782:	7dfb      	ldrb	r3, [r7, #23]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f002 fad3 	bl	8004d44 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f7ff ff5e 	bl	8002660 <I2Cx_Init>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <AUDIO_IO_Init+0x10>)
 80027b2:	f7ff ff55 	bl	8002660 <I2Cx_Init>
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000080 	.word	0x20000080

080027c0 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
 80027da:	460b      	mov	r3, r1
 80027dc:	80bb      	strh	r3, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80027ee:	89fb      	ldrh	r3, [r7, #14]
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	b29b      	uxth	r3, r3
 8002800:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8002802:	88ba      	ldrh	r2, [r7, #4]
 8002804:	79f9      	ldrb	r1, [r7, #7]
 8002806:	2302      	movs	r3, #2
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	1cbb      	adds	r3, r7, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2302      	movs	r3, #2
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <AUDIO_IO_Write+0x50>)
 8002812:	f7ff ff8e 	bl	8002732 <I2Cx_WriteMultiple>
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	20000080 	.word	0x20000080

08002824 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af02      	add	r7, sp, #8
 800282a:	4603      	mov	r3, r0
 800282c:	460a      	mov	r2, r1
 800282e:	71fb      	strb	r3, [r7, #7]
 8002830:	4613      	mov	r3, r2
 8002832:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	81bb      	strh	r3, [r7, #12]
 8002838:	2300      	movs	r3, #0
 800283a:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 800283c:	88ba      	ldrh	r2, [r7, #4]
 800283e:	79f9      	ldrb	r1, [r7, #7]
 8002840:	2302      	movs	r3, #2
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2302      	movs	r3, #2
 800284c:	480a      	ldr	r0, [pc, #40]	; (8002878 <AUDIO_IO_Read+0x54>)
 800284e:	f7ff ff43 	bl	80026d8 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002852:	89bb      	ldrh	r3, [r7, #12]
 8002854:	0a1b      	lsrs	r3, r3, #8
 8002856:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8002858:	89bb      	ldrh	r3, [r7, #12]
 800285a:	021b      	lsls	r3, r3, #8
 800285c:	b29b      	uxth	r3, r3
 800285e:	b21a      	sxth	r2, r3
 8002860:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002864:	4313      	orrs	r3, r2
 8002866:	b21b      	sxth	r3, r3
 8002868:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 800286e:	89bb      	ldrh	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000080 	.word	0x20000080

0800287c <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f001 f861 	bl	800394c <HAL_Delay>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002898:	4b31      	ldr	r3, [pc, #196]	; (8002960 <BSP_LCD_Init+0xcc>)
 800289a:	2228      	movs	r2, #40	; 0x28
 800289c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800289e:	4b30      	ldr	r3, [pc, #192]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028a0:	2209      	movs	r2, #9
 80028a2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80028a4:	4b2e      	ldr	r3, [pc, #184]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028a6:	2235      	movs	r2, #53	; 0x35
 80028a8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028aa:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028ac:	220b      	movs	r2, #11
 80028ae:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028b0:	4b2b      	ldr	r3, [pc, #172]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028b2:	f240 121b 	movw	r2, #283	; 0x11b
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028ba:	f240 2215 	movw	r2, #533	; 0x215
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80028c0:	4b27      	ldr	r3, [pc, #156]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028c2:	f240 121d 	movw	r2, #285	; 0x11d
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80028c8:	4b25      	ldr	r3, [pc, #148]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028ca:	f240 2235 	movw	r2, #565	; 0x235
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80028d0:	2100      	movs	r1, #0
 80028d2:	4823      	ldr	r0, [pc, #140]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028d4:	f000 fcb4 	bl	8003240 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80028d8:	4b21      	ldr	r3, [pc, #132]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028de:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80028e0:	4b1f      	ldr	r3, [pc, #124]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028e2:	f44f 7288 	mov.w	r2, #272	; 0x110
 80028e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80028e8:	4b1d      	ldr	r3, [pc, #116]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80028f8:	4b19      	ldr	r3, [pc, #100]	; (8002960 <BSP_LCD_Init+0xcc>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <BSP_LCD_Init+0xcc>)
 8002902:	2200      	movs	r2, #0
 8002904:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002906:	4b16      	ldr	r3, [pc, #88]	; (8002960 <BSP_LCD_Init+0xcc>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800290c:	4b14      	ldr	r3, [pc, #80]	; (8002960 <BSP_LCD_Init+0xcc>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002912:	4b13      	ldr	r3, [pc, #76]	; (8002960 <BSP_LCD_Init+0xcc>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <BSP_LCD_Init+0xcc>)
 800291a:	4a12      	ldr	r2, [pc, #72]	; (8002964 <BSP_LCD_Init+0xd0>)
 800291c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800291e:	4810      	ldr	r0, [pc, #64]	; (8002960 <BSP_LCD_Init+0xcc>)
 8002920:	f003 f93e 	bl	8005ba0 <HAL_LTDC_GetState>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800292a:	2100      	movs	r1, #0
 800292c:	480c      	ldr	r0, [pc, #48]	; (8002960 <BSP_LCD_Init+0xcc>)
 800292e:	f000 fbad 	bl	800308c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002932:	480b      	ldr	r0, [pc, #44]	; (8002960 <BSP_LCD_Init+0xcc>)
 8002934:	f002 ff50 	bl	80057d8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800293e:	480a      	ldr	r0, [pc, #40]	; (8002968 <BSP_LCD_Init+0xd4>)
 8002940:	f002 f956 	bl	8004bf0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002944:	2201      	movs	r2, #1
 8002946:	2108      	movs	r1, #8
 8002948:	4808      	ldr	r0, [pc, #32]	; (800296c <BSP_LCD_Init+0xd8>)
 800294a:	f002 f951 	bl	8004bf0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800294e:	f000 fddb 	bl	8003508 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002952:	4807      	ldr	r0, [pc, #28]	; (8002970 <BSP_LCD_Init+0xdc>)
 8002954:	f000 f8d8 	bl	8002b08 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	4618      	mov	r0, r3
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	20007f88 	.word	0x20007f88
 8002964:	40016800 	.word	0x40016800
 8002968:	40022000 	.word	0x40022000
 800296c:	40022800 	.word	0x40022800
 8002970:	20000034 	.word	0x20000034

08002974 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <BSP_LCD_GetXSize+0x20>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a06      	ldr	r2, [pc, #24]	; (8002998 <BSP_LCD_GetXSize+0x24>)
 800297e:	2134      	movs	r1, #52	; 0x34
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3360      	adds	r3, #96	; 0x60
 8002988:	681b      	ldr	r3, [r3, #0]
}
 800298a:	4618      	mov	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	2000010c 	.word	0x2000010c
 8002998:	20007f88 	.word	0x20007f88

0800299c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80029a0:	4b06      	ldr	r3, [pc, #24]	; (80029bc <BSP_LCD_GetYSize+0x20>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <BSP_LCD_GetYSize+0x24>)
 80029a6:	2134      	movs	r1, #52	; 0x34
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3364      	adds	r3, #100	; 0x64
 80029b0:	681b      	ldr	r3, [r3, #0]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	2000010c 	.word	0x2000010c
 80029c0:	20007f88 	.word	0x20007f88

080029c4 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b090      	sub	sp, #64	; 0x40
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80029d4:	f7ff ffce 	bl	8002974 <BSP_LCD_GetXSize>
 80029d8:	4603      	mov	r3, r0
 80029da:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80029e0:	f7ff ffdc 	bl	800299c <BSP_LCD_GetYSize>
 80029e4:	4603      	mov	r3, r0
 80029e6:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80029f0:	23ff      	movs	r3, #255	; 0xff
 80029f2:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a0a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a10:	2307      	movs	r3, #7
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002a14:	f7ff ffae 	bl	8002974 <BSP_LCD_GetXSize>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002a1c:	f7ff ffbe 	bl	800299c <BSP_LCD_GetYSize>
 8002a20:	4603      	mov	r3, r0
 8002a22:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	f107 030c 	add.w	r3, r7, #12
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4812      	ldr	r0, [pc, #72]	; (8002a78 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002a2e:	f003 f879 	bl	8005b24 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002a32:	88fa      	ldrh	r2, [r7, #6]
 8002a34:	4911      	ldr	r1, [pc, #68]	; (8002a7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	3304      	adds	r3, #4
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295
 8002a46:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002a48:	88fa      	ldrh	r2, [r7, #6]
 8002a4a:	490c      	ldr	r1, [pc, #48]	; (8002a7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	3308      	adds	r3, #8
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002a5a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002a5c:	88fa      	ldrh	r2, [r7, #6]
 8002a5e:	4907      	ldr	r1, [pc, #28]	; (8002a7c <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3740      	adds	r7, #64	; 0x40
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	20007f88 	.word	0x20007f88
 8002a7c:	20000110 	.word	0x20000110
 8002a80:	20000034 	.word	0x20000034

08002a84 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <BSP_LCD_SelectLayer+0x1c>)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6013      	str	r3, [r2, #0]
} 
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	2000010c 	.word	0x2000010c

08002aa4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <BSP_LCD_SetTextColor+0x28>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4907      	ldr	r1, [pc, #28]	; (8002ad0 <BSP_LCD_SetTextColor+0x2c>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	601a      	str	r2, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	2000010c 	.word	0x2000010c
 8002ad0:	20000110 	.word	0x20000110

08002ad4 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <BSP_LCD_SetBackColor+0x2c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4908      	ldr	r1, [pc, #32]	; (8002b04 <BSP_LCD_SetBackColor+0x30>)
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	3304      	adds	r3, #4
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	2000010c 	.word	0x2000010c
 8002b04:	20000110 	.word	0x20000110

08002b08 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <BSP_LCD_SetFont+0x2c>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4908      	ldr	r1, [pc, #32]	; (8002b38 <BSP_LCD_SetFont+0x30>)
 8002b16:	4613      	mov	r3, r2
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3308      	adds	r3, #8
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	2000010c 	.word	0x2000010c
 8002b38:	20000110 	.word	0x20000110

08002b3c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af02      	add	r7, sp, #8
 8002b42:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <BSP_LCD_Clear+0x48>)
 8002b46:	681c      	ldr	r4, [r3, #0]
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <BSP_LCD_Clear+0x48>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <BSP_LCD_Clear+0x4c>)
 8002b4e:	2134      	movs	r1, #52	; 0x34
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	335c      	adds	r3, #92	; 0x5c
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	461e      	mov	r6, r3
 8002b5c:	f7ff ff0a 	bl	8002974 <BSP_LCD_GetXSize>
 8002b60:	4605      	mov	r5, r0
 8002b62:	f7ff ff1b 	bl	800299c <BSP_LCD_GetYSize>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	4613      	mov	r3, r2
 8002b72:	462a      	mov	r2, r5
 8002b74:	4631      	mov	r1, r6
 8002b76:	4620      	mov	r0, r4
 8002b78:	f000 fc36 	bl	80033e8 <LL_FillBuffer>
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b84:	2000010c 	.word	0x2000010c
 8002b88:	20007f88 	.word	0x20007f88

08002b8c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
 8002b96:	460b      	mov	r3, r1
 8002b98:	80bb      	strh	r3, [r7, #4]
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	; (8002c0c <BSP_LCD_DisplayChar+0x80>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	491b      	ldr	r1, [pc, #108]	; (8002c10 <BSP_LCD_DisplayChar+0x84>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	3308      	adds	r3, #8
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	6819      	ldr	r1, [r3, #0]
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <BSP_LCD_DisplayChar+0x80>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4c14      	ldr	r4, [pc, #80]	; (8002c10 <BSP_LCD_DisplayChar+0x84>)
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4423      	add	r3, r4
 8002bca:	3308      	adds	r3, #8
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002bd0:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <BSP_LCD_DisplayChar+0x80>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4c0d      	ldr	r4, [pc, #52]	; (8002c10 <BSP_LCD_DisplayChar+0x84>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4423      	add	r3, r4
 8002be4:	3308      	adds	r3, #8
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	889b      	ldrh	r3, [r3, #4]
 8002bea:	3307      	adds	r3, #7
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da00      	bge.n	8002bf2 <BSP_LCD_DisplayChar+0x66>
 8002bf0:	3307      	adds	r3, #7
 8002bf2:	10db      	asrs	r3, r3, #3
 8002bf4:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002bf8:	18ca      	adds	r2, r1, r3
 8002bfa:	88b9      	ldrh	r1, [r7, #4]
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fb3a 	bl	8003278 <DrawChar>
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}
 8002c0c:	2000010c 	.word	0x2000010c
 8002c10:	20000110 	.word	0x20000110

08002c14 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002c14:	b5b0      	push	{r4, r5, r7, lr}
 8002c16:	b088      	sub	sp, #32
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60ba      	str	r2, [r7, #8]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	81fb      	strh	r3, [r7, #14]
 8002c22:	460b      	mov	r3, r1
 8002c24:	81bb      	strh	r3, [r7, #12]
 8002c26:	4613      	mov	r3, r2
 8002c28:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	83fb      	strh	r3, [r7, #30]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002c32:	2300      	movs	r3, #0
 8002c34:	61bb      	str	r3, [r7, #24]
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002c3e:	e002      	b.n	8002c46 <BSP_LCD_DisplayStringAt+0x32>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	3301      	adds	r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	617a      	str	r2, [r7, #20]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f6      	bne.n	8002c40 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002c52:	f7ff fe8f 	bl	8002974 <BSP_LCD_GetXSize>
 8002c56:	4601      	mov	r1, r0
 8002c58:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <BSP_LCD_DisplayStringAt+0x188>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4850      	ldr	r0, [pc, #320]	; (8002da0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c5e:	4613      	mov	r3, r2
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4403      	add	r3, r0
 8002c68:	3308      	adds	r3, #8
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	889b      	ldrh	r3, [r3, #4]
 8002c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c72:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d01c      	beq.n	8002cb4 <BSP_LCD_DisplayStringAt+0xa0>
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	dc33      	bgt.n	8002ce6 <BSP_LCD_DisplayStringAt+0xd2>
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d002      	beq.n	8002c88 <BSP_LCD_DisplayStringAt+0x74>
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d019      	beq.n	8002cba <BSP_LCD_DisplayStringAt+0xa6>
 8002c86:	e02e      	b.n	8002ce6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	1ad1      	subs	r1, r2, r3
 8002c8e:	4b43      	ldr	r3, [pc, #268]	; (8002d9c <BSP_LCD_DisplayStringAt+0x188>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4843      	ldr	r0, [pc, #268]	; (8002da0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4403      	add	r3, r0
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	889b      	ldrh	r3, [r3, #4]
 8002ca4:	fb03 f301 	mul.w	r3, r3, r1
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	89fb      	ldrh	r3, [r7, #14]
 8002cae:	4413      	add	r3, r2
 8002cb0:	83fb      	strh	r3, [r7, #30]
      break;
 8002cb2:	e01b      	b.n	8002cec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002cb4:	89fb      	ldrh	r3, [r7, #14]
 8002cb6:	83fb      	strh	r3, [r7, #30]
      break;
 8002cb8:	e018      	b.n	8002cec <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	b299      	uxth	r1, r3
 8002cc2:	4b36      	ldr	r3, [pc, #216]	; (8002d9c <BSP_LCD_DisplayStringAt+0x188>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4836      	ldr	r0, [pc, #216]	; (8002da0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002cc8:	4613      	mov	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4403      	add	r3, r0
 8002cd2:	3308      	adds	r3, #8
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	889b      	ldrh	r3, [r3, #4]
 8002cd8:	fb11 f303 	smulbb	r3, r1, r3
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	89fb      	ldrh	r3, [r7, #14]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ce4:	e002      	b.n	8002cec <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002ce6:	89fb      	ldrh	r3, [r7, #14]
 8002ce8:	83fb      	strh	r3, [r7, #30]
      break;
 8002cea:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002cec:	8bfb      	ldrh	r3, [r7, #30]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <BSP_LCD_DisplayStringAt+0xe6>
 8002cf2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	da1d      	bge.n	8002d36 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002cfe:	e01a      	b.n	8002d36 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781a      	ldrb	r2, [r3, #0]
 8002d04:	89b9      	ldrh	r1, [r7, #12]
 8002d06:	8bfb      	ldrh	r3, [r7, #30]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff3f 	bl	8002b8c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002d0e:	4b23      	ldr	r3, [pc, #140]	; (8002d9c <BSP_LCD_DisplayStringAt+0x188>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4923      	ldr	r1, [pc, #140]	; (8002da0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3308      	adds	r3, #8
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	889a      	ldrh	r2, [r3, #4]
 8002d24:	8bfb      	ldrh	r3, [r7, #30]
 8002d26:	4413      	add	r3, r2
 8002d28:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
    i++;
 8002d30:	8bbb      	ldrh	r3, [r7, #28]
 8002d32:	3301      	adds	r3, #1
 8002d34:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bf14      	ite	ne
 8002d3e:	2301      	movne	r3, #1
 8002d40:	2300      	moveq	r3, #0
 8002d42:	b2dc      	uxtb	r4, r3
 8002d44:	f7ff fe16 	bl	8002974 <BSP_LCD_GetXSize>
 8002d48:	8bb9      	ldrh	r1, [r7, #28]
 8002d4a:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <BSP_LCD_DisplayStringAt+0x188>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	4d14      	ldr	r5, [pc, #80]	; (8002da0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002d50:	4613      	mov	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	442b      	add	r3, r5
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	889b      	ldrh	r3, [r3, #4]
 8002d60:	fb03 f301 	mul.w	r3, r3, r1
 8002d64:	1ac3      	subs	r3, r0, r3
 8002d66:	b299      	uxth	r1, r3
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <BSP_LCD_DisplayStringAt+0x188>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	480c      	ldr	r0, [pc, #48]	; (8002da0 <BSP_LCD_DisplayStringAt+0x18c>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4403      	add	r3, r0
 8002d78:	3308      	adds	r3, #8
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	889b      	ldrh	r3, [r3, #4]
 8002d7e:	4299      	cmp	r1, r3
 8002d80:	bf2c      	ite	cs
 8002d82:	2301      	movcs	r3, #1
 8002d84:	2300      	movcc	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	4023      	ands	r3, r4
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1b7      	bne.n	8002d00 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002d90:	bf00      	nop
 8002d92:	bf00      	nop
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	2000010c 	.word	0x2000010c
 8002da0:	20000110 	.word	0x20000110

08002da4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002da4:	b5b0      	push	{r4, r5, r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	603a      	str	r2, [r7, #0]
 8002dae:	80fb      	strh	r3, [r7, #6]
 8002db0:	460b      	mov	r3, r1
 8002db2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002db4:	4b1d      	ldr	r3, [pc, #116]	; (8002e2c <BSP_LCD_DrawPixel+0x88>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <BSP_LCD_DrawPixel+0x8c>)
 8002dba:	2134      	movs	r1, #52	; 0x34
 8002dbc:	fb01 f303 	mul.w	r3, r1, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3348      	adds	r3, #72	; 0x48
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d116      	bne.n	8002df8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002dca:	4b18      	ldr	r3, [pc, #96]	; (8002e2c <BSP_LCD_DrawPixel+0x88>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <BSP_LCD_DrawPixel+0x8c>)
 8002dd0:	2134      	movs	r1, #52	; 0x34
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	335c      	adds	r3, #92	; 0x5c
 8002dda:	681c      	ldr	r4, [r3, #0]
 8002ddc:	88bd      	ldrh	r5, [r7, #4]
 8002dde:	f7ff fdc9 	bl	8002974 <BSP_LCD_GetXSize>
 8002de2:	4603      	mov	r3, r0
 8002de4:	fb03 f205 	mul.w	r2, r3, r5
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	4413      	add	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4423      	add	r3, r4
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b292      	uxth	r2, r2
 8002df4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002df6:	e015      	b.n	8002e24 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <BSP_LCD_DrawPixel+0x88>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a0c      	ldr	r2, [pc, #48]	; (8002e30 <BSP_LCD_DrawPixel+0x8c>)
 8002dfe:	2134      	movs	r1, #52	; 0x34
 8002e00:	fb01 f303 	mul.w	r3, r1, r3
 8002e04:	4413      	add	r3, r2
 8002e06:	335c      	adds	r3, #92	; 0x5c
 8002e08:	681c      	ldr	r4, [r3, #0]
 8002e0a:	88bd      	ldrh	r5, [r7, #4]
 8002e0c:	f7ff fdb2 	bl	8002974 <BSP_LCD_GetXSize>
 8002e10:	4603      	mov	r3, r0
 8002e12:	fb03 f205 	mul.w	r2, r3, r5
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4423      	add	r3, r4
 8002e1e:	461a      	mov	r2, r3
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e2c:	2000010c 	.word	0x2000010c
 8002e30:	20007f88 	.word	0x20007f88

08002e34 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002e34:	b590      	push	{r4, r7, lr}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	2300      	movs	r3, #0
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	330a      	adds	r3, #10
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	330b      	adds	r3, #11
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	441a      	add	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	330c      	adds	r3, #12
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	041b      	lsls	r3, r3, #16
 8002e6e:	441a      	add	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	330d      	adds	r3, #13
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	061b      	lsls	r3, r3, #24
 8002e78:	4413      	add	r3, r2
 8002e7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3312      	adds	r3, #18
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3313      	adds	r3, #19
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3314      	adds	r3, #20
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	041b      	lsls	r3, r3, #16
 8002e96:	441a      	add	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3315      	adds	r3, #21
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	061b      	lsls	r3, r3, #24
 8002ea0:	4413      	add	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3316      	adds	r3, #22
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3317      	adds	r3, #23
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	441a      	add	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3318      	adds	r3, #24
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	441a      	add	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3319      	adds	r3, #25
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	061b      	lsls	r3, r3, #24
 8002ec8:	4413      	add	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	331c      	adds	r3, #28
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	331d      	adds	r3, #29
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	4413      	add	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002ee0:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <BSP_LCD_DrawBitmap+0x15c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a2b      	ldr	r2, [pc, #172]	; (8002f94 <BSP_LCD_DrawBitmap+0x160>)
 8002ee6:	2134      	movs	r1, #52	; 0x34
 8002ee8:	fb01 f303 	mul.w	r3, r1, r3
 8002eec:	4413      	add	r3, r2
 8002eee:	335c      	adds	r3, #92	; 0x5c
 8002ef0:	681c      	ldr	r4, [r3, #0]
 8002ef2:	f7ff fd3f 	bl	8002974 <BSP_LCD_GetXSize>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	fb03 f202 	mul.w	r2, r3, r2
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4423      	add	r3, r4
 8002f06:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3b20      	subs	r3, #32
 8002f0c:	2b07      	cmp	r3, #7
 8002f0e:	d802      	bhi.n	8002f16 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	e008      	b.n	8002f28 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	3b10      	subs	r3, #16
 8002f1a:	2b07      	cmp	r3, #7
 8002f1c:	d802      	bhi.n	8002f24 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002f1e:	2302      	movs	r3, #2
 8002f20:	61fb      	str	r3, [r7, #28]
 8002f22:	e001      	b.n	8002f28 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002f24:	2301      	movs	r3, #1
 8002f26:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	08d2      	lsrs	r2, r2, #3
 8002f36:	fb02 f203 	mul.w	r2, r2, r3
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	4413      	add	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	e018      	b.n	8002f7c <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002f4a:	6a39      	ldr	r1, [r7, #32]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fa95 	bl	8003480 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002f56:	f7ff fd0d 	bl	8002974 <BSP_LCD_GetXSize>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	6a3a      	ldr	r2, [r7, #32]
 8002f60:	4413      	add	r3, r2
 8002f62:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	08db      	lsrs	r3, r3, #3
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	425b      	negs	r3, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	3301      	adds	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d3e2      	bcc.n	8002f4a <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	372c      	adds	r7, #44	; 0x2c
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd90      	pop	{r4, r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000010c 	.word	0x2000010c
 8002f94:	20007f88 	.word	0x20007f88

08002f98 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af02      	add	r7, sp, #8
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	4608      	mov	r0, r1
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4623      	mov	r3, r4
 8002faa:	80fb      	strh	r3, [r7, #6]
 8002fac:	4603      	mov	r3, r0
 8002fae:	80bb      	strh	r3, [r7, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	807b      	strh	r3, [r7, #2]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <BSP_LCD_FillRect+0xe8>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	4930      	ldr	r1, [pc, #192]	; (8003084 <BSP_LCD_FillRect+0xec>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff fd68 	bl	8002aa4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <BSP_LCD_FillRect+0xe8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <BSP_LCD_FillRect+0xf0>)
 8002fda:	2134      	movs	r1, #52	; 0x34
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3348      	adds	r3, #72	; 0x48
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d114      	bne.n	8003014 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fea:	4b25      	ldr	r3, [pc, #148]	; (8003080 <BSP_LCD_FillRect+0xe8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <BSP_LCD_FillRect+0xf0>)
 8002ff0:	2134      	movs	r1, #52	; 0x34
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	335c      	adds	r3, #92	; 0x5c
 8002ffa:	681c      	ldr	r4, [r3, #0]
 8002ffc:	f7ff fcba 	bl	8002974 <BSP_LCD_GetXSize>
 8003000:	4602      	mov	r2, r0
 8003002:	88bb      	ldrh	r3, [r7, #4]
 8003004:	fb03 f202 	mul.w	r2, r3, r2
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	4413      	add	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4423      	add	r3, r4
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	e013      	b.n	800303c <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <BSP_LCD_FillRect+0xe8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1b      	ldr	r2, [pc, #108]	; (8003088 <BSP_LCD_FillRect+0xf0>)
 800301a:	2134      	movs	r1, #52	; 0x34
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	335c      	adds	r3, #92	; 0x5c
 8003024:	681c      	ldr	r4, [r3, #0]
 8003026:	f7ff fca5 	bl	8002974 <BSP_LCD_GetXSize>
 800302a:	4602      	mov	r2, r0
 800302c:	88bb      	ldrh	r3, [r7, #4]
 800302e:	fb03 f202 	mul.w	r2, r3, r2
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4423      	add	r3, r4
 800303a:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <BSP_LCD_FillRect+0xe8>)
 800303e:	681c      	ldr	r4, [r3, #0]
 8003040:	68fd      	ldr	r5, [r7, #12]
 8003042:	887e      	ldrh	r6, [r7, #2]
 8003044:	f8b7 8000 	ldrh.w	r8, [r7]
 8003048:	f7ff fc94 	bl	8002974 <BSP_LCD_GetXSize>
 800304c:	4602      	mov	r2, r0
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	1ad1      	subs	r1, r2, r3
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <BSP_LCD_FillRect+0xe8>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	480b      	ldr	r0, [pc, #44]	; (8003084 <BSP_LCD_FillRect+0xec>)
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4403      	add	r3, r0
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	9100      	str	r1, [sp, #0]
 8003068:	4643      	mov	r3, r8
 800306a:	4632      	mov	r2, r6
 800306c:	4629      	mov	r1, r5
 800306e:	4620      	mov	r0, r4
 8003070:	f000 f9ba 	bl	80033e8 <LL_FillBuffer>
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800307e:	bf00      	nop
 8003080:	2000010c 	.word	0x2000010c
 8003084:	20000110 	.word	0x20000110
 8003088:	20007f88 	.word	0x20007f88

0800308c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b090      	sub	sp, #64	; 0x40
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003096:	4b64      	ldr	r3, [pc, #400]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	4a63      	ldr	r2, [pc, #396]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 800309c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030a0:	6453      	str	r3, [r2, #68]	; 0x44
 80030a2:	4b61      	ldr	r3, [pc, #388]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80030ae:	4b5e      	ldr	r3, [pc, #376]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a5d      	ldr	r2, [pc, #372]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b5b      	ldr	r3, [pc, #364]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80030c6:	4b58      	ldr	r3, [pc, #352]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ca:	4a57      	ldr	r2, [pc, #348]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030cc:	f043 0310 	orr.w	r3, r3, #16
 80030d0:	6313      	str	r3, [r2, #48]	; 0x30
 80030d2:	4b55      	ldr	r3, [pc, #340]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	623b      	str	r3, [r7, #32]
 80030dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030de:	4b52      	ldr	r3, [pc, #328]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	4a51      	ldr	r2, [pc, #324]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80030f6:	4b4c      	ldr	r3, [pc, #304]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a4b      	ldr	r2, [pc, #300]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 80030fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b49      	ldr	r3, [pc, #292]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310a:	61bb      	str	r3, [r7, #24]
 800310c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800310e:	4b46      	ldr	r3, [pc, #280]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003112:	4a45      	ldr	r2, [pc, #276]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003118:	6313      	str	r3, [r2, #48]	; 0x30
 800311a:	4b43      	ldr	r3, [pc, #268]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003126:	4b40      	ldr	r3, [pc, #256]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	4a3f      	ldr	r2, [pc, #252]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 800312c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003130:	6313      	str	r3, [r2, #48]	; 0x30
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313a:	613b      	str	r3, [r7, #16]
 800313c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800313e:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a39      	ldr	r2, [pc, #228]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a33      	ldr	r2, [pc, #204]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 800315c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b31      	ldr	r3, [pc, #196]	; (8003228 <BSP_LCD_MspInit+0x19c>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800316e:	2310      	movs	r3, #16
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800317a:	2302      	movs	r3, #2
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800317e:	230e      	movs	r3, #14
 8003180:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003182:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003186:	4619      	mov	r1, r3
 8003188:	4828      	ldr	r0, [pc, #160]	; (800322c <BSP_LCD_MspInit+0x1a0>)
 800318a:	f001 fa79 	bl	8004680 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800318e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003194:	2302      	movs	r3, #2
 8003196:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003198:	2309      	movs	r3, #9
 800319a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800319c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a0:	4619      	mov	r1, r3
 80031a2:	4823      	ldr	r0, [pc, #140]	; (8003230 <BSP_LCD_MspInit+0x1a4>)
 80031a4:	f001 fa6c 	bl	8004680 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80031a8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80031b2:	230e      	movs	r3, #14
 80031b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80031b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ba:	4619      	mov	r1, r3
 80031bc:	481d      	ldr	r0, [pc, #116]	; (8003234 <BSP_LCD_MspInit+0x1a8>)
 80031be:	f001 fa5f 	bl	8004680 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80031c2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80031c6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80031cc:	230e      	movs	r3, #14
 80031ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80031d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031d4:	4619      	mov	r1, r3
 80031d6:	4818      	ldr	r0, [pc, #96]	; (8003238 <BSP_LCD_MspInit+0x1ac>)
 80031d8:	f001 fa52 	bl	8004680 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80031dc:	23f7      	movs	r3, #247	; 0xf7
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80031e0:	2302      	movs	r3, #2
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80031e4:	230e      	movs	r3, #14
 80031e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80031e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031ec:	4619      	mov	r1, r3
 80031ee:	4813      	ldr	r0, [pc, #76]	; (800323c <BSP_LCD_MspInit+0x1b0>)
 80031f0:	f001 fa46 	bl	8004680 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80031f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80031fa:	2301      	movs	r3, #1
 80031fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80031fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003202:	4619      	mov	r1, r3
 8003204:	480b      	ldr	r0, [pc, #44]	; (8003234 <BSP_LCD_MspInit+0x1a8>)
 8003206:	f001 fa3b 	bl	8004680 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800320a:	2308      	movs	r3, #8
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800320e:	2301      	movs	r3, #1
 8003210:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003216:	4619      	mov	r1, r3
 8003218:	4808      	ldr	r0, [pc, #32]	; (800323c <BSP_LCD_MspInit+0x1b0>)
 800321a:	f001 fa31 	bl	8004680 <HAL_GPIO_Init>
}
 800321e:	bf00      	nop
 8003220:	3740      	adds	r7, #64	; 0x40
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	40021000 	.word	0x40021000
 8003230:	40021800 	.word	0x40021800
 8003234:	40022000 	.word	0x40022000
 8003238:	40022400 	.word	0x40022400
 800323c:	40022800 	.word	0x40022800

08003240 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <BSP_LCD_ClockConfig+0x34>)
 800324c:	2208      	movs	r2, #8
 800324e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <BSP_LCD_ClockConfig+0x34>)
 8003252:	22c0      	movs	r2, #192	; 0xc0
 8003254:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <BSP_LCD_ClockConfig+0x34>)
 8003258:	2205      	movs	r2, #5
 800325a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800325c:	4b05      	ldr	r3, [pc, #20]	; (8003274 <BSP_LCD_ClockConfig+0x34>)
 800325e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003262:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003264:	4803      	ldr	r0, [pc, #12]	; (8003274 <BSP_LCD_ClockConfig+0x34>)
 8003266:	f003 faeb 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000128 	.word	0x20000128

08003278 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	603a      	str	r2, [r7, #0]
 8003282:	80fb      	strh	r3, [r7, #6]
 8003284:	460b      	mov	r3, r1
 8003286:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	2300      	movs	r3, #0
 800328e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003290:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <DrawChar+0x168>)
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4953      	ldr	r1, [pc, #332]	; (80033e4 <DrawChar+0x16c>)
 8003296:	4613      	mov	r3, r2
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	4413      	add	r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3308      	adds	r3, #8
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	88db      	ldrh	r3, [r3, #6]
 80032a6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80032a8:	4b4d      	ldr	r3, [pc, #308]	; (80033e0 <DrawChar+0x168>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	494d      	ldr	r1, [pc, #308]	; (80033e4 <DrawChar+0x16c>)
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3308      	adds	r3, #8
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	889b      	ldrh	r3, [r3, #4]
 80032be:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80032c0:	8a3b      	ldrh	r3, [r7, #16]
 80032c2:	3307      	adds	r3, #7
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da00      	bge.n	80032ca <DrawChar+0x52>
 80032c8:	3307      	adds	r3, #7
 80032ca:	10db      	asrs	r3, r3, #3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	8a3b      	ldrh	r3, [r7, #16]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e076      	b.n	80033ce <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80032e0:	8a3b      	ldrh	r3, [r7, #16]
 80032e2:	3307      	adds	r3, #7
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	da00      	bge.n	80032ea <DrawChar+0x72>
 80032e8:	3307      	adds	r3, #7
 80032ea:	10db      	asrs	r3, r3, #3
 80032ec:	461a      	mov	r2, r3
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fb03 f302 	mul.w	r3, r3, r2
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80032fa:	8a3b      	ldrh	r3, [r7, #16]
 80032fc:	3307      	adds	r3, #7
 80032fe:	2b00      	cmp	r3, #0
 8003300:	da00      	bge.n	8003304 <DrawChar+0x8c>
 8003302:	3307      	adds	r3, #7
 8003304:	10db      	asrs	r3, r3, #3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d002      	beq.n	8003310 <DrawChar+0x98>
 800330a:	2b02      	cmp	r3, #2
 800330c:	d004      	beq.n	8003318 <DrawChar+0xa0>
 800330e:	e00c      	b.n	800332a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	617b      	str	r3, [r7, #20]
      break;
 8003316:	e016      	b.n	8003346 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	3201      	adds	r2, #1
 8003322:	7812      	ldrb	r2, [r2, #0]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
      break;
 8003328:	e00d      	b.n	8003346 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	041a      	lsls	r2, r3, #16
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	3301      	adds	r3, #1
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	021b      	lsls	r3, r3, #8
 8003338:	4313      	orrs	r3, r2
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	3202      	adds	r2, #2
 800333e:	7812      	ldrb	r2, [r2, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
      break;
 8003344:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003346:	2300      	movs	r3, #0
 8003348:	61bb      	str	r3, [r7, #24]
 800334a:	e036      	b.n	80033ba <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800334c:	8a3a      	ldrh	r2, [r7, #16]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	1ad2      	subs	r2, r2, r3
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	4413      	add	r3, r2
 8003356:	3b01      	subs	r3, #1
 8003358:	2201      	movs	r2, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	461a      	mov	r2, r3
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d012      	beq.n	800338e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	b29a      	uxth	r2, r3
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	4413      	add	r3, r2
 8003370:	b298      	uxth	r0, r3
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <DrawChar+0x168>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	491b      	ldr	r1, [pc, #108]	; (80033e4 <DrawChar+0x16c>)
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	88bb      	ldrh	r3, [r7, #4]
 8003386:	4619      	mov	r1, r3
 8003388:	f7ff fd0c 	bl	8002da4 <BSP_LCD_DrawPixel>
 800338c:	e012      	b.n	80033b4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	b29a      	uxth	r2, r3
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	4413      	add	r3, r2
 8003396:	b298      	uxth	r0, r3
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <DrawChar+0x168>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4911      	ldr	r1, [pc, #68]	; (80033e4 <DrawChar+0x16c>)
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	3304      	adds	r3, #4
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	88bb      	ldrh	r3, [r7, #4]
 80033ae:	4619      	mov	r1, r3
 80033b0:	f7ff fcf8 	bl	8002da4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	3301      	adds	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
 80033ba:	8a3b      	ldrh	r3, [r7, #16]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d3c4      	bcc.n	800334c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80033c2:	88bb      	ldrh	r3, [r7, #4]
 80033c4:	3301      	adds	r3, #1
 80033c6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3301      	adds	r3, #1
 80033cc:	61fb      	str	r3, [r7, #28]
 80033ce:	8a7b      	ldrh	r3, [r7, #18]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d384      	bcc.n	80032e0 <DrawChar+0x68>
  }
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	2000010c 	.word	0x2000010c
 80033e4:	20000110 	.word	0x20000110

080033e8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <LL_FillBuffer+0x88>)
 80033f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033fc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <LL_FillBuffer+0x8c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <LL_FillBuffer+0x90>)
 8003404:	2134      	movs	r1, #52	; 0x34
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3348      	adds	r3, #72	; 0x48
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b02      	cmp	r3, #2
 8003412:	d103      	bne.n	800341c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003414:	4b16      	ldr	r3, [pc, #88]	; (8003470 <LL_FillBuffer+0x88>)
 8003416:	2202      	movs	r2, #2
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	e002      	b.n	8003422 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800341c:	4b14      	ldr	r3, [pc, #80]	; (8003470 <LL_FillBuffer+0x88>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003422:	4a13      	ldr	r2, [pc, #76]	; (8003470 <LL_FillBuffer+0x88>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <LL_FillBuffer+0x88>)
 800342a:	4a14      	ldr	r2, [pc, #80]	; (800347c <LL_FillBuffer+0x94>)
 800342c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800342e:	4810      	ldr	r0, [pc, #64]	; (8003470 <LL_FillBuffer+0x88>)
 8003430:	f000 fd7c 	bl	8003f2c <HAL_DMA2D_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d115      	bne.n	8003466 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800343a:	68f9      	ldr	r1, [r7, #12]
 800343c:	480c      	ldr	r0, [pc, #48]	; (8003470 <LL_FillBuffer+0x88>)
 800343e:	f000 ffe3 	bl	8004408 <HAL_DMA2D_ConfigLayer>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10e      	bne.n	8003466 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69f9      	ldr	r1, [r7, #28]
 8003452:	4807      	ldr	r0, [pc, #28]	; (8003470 <LL_FillBuffer+0x88>)
 8003454:	f000 fdb4 	bl	8003fc0 <HAL_DMA2D_Start>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800345e:	210a      	movs	r1, #10
 8003460:	4803      	ldr	r0, [pc, #12]	; (8003470 <LL_FillBuffer+0x88>)
 8003462:	f000 fdd8 	bl	8004016 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200000cc 	.word	0x200000cc
 8003474:	2000010c 	.word	0x2000010c
 8003478:	20007f88 	.word	0x20007f88
 800347c:	4002b000 	.word	0x4002b000

08003480 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800348e:	4b1c      	ldr	r3, [pc, #112]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 8003490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003494:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003496:	4b1a      	ldr	r3, [pc, #104]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80034a2:	4b17      	ldr	r3, [pc, #92]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80034a8:	4b15      	ldr	r3, [pc, #84]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034aa:	22ff      	movs	r2, #255	; 0xff
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80034ae:	4a14      	ldr	r2, [pc, #80]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80034b4:	4b12      	ldr	r3, [pc, #72]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <LL_ConvertLineToARGB8888+0x84>)
 80034be:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80034c0:	480f      	ldr	r0, [pc, #60]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034c2:	f000 fd33 	bl	8003f2c <HAL_DMA2D_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d115      	bne.n	80034f8 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80034cc:	2101      	movs	r1, #1
 80034ce:	480c      	ldr	r0, [pc, #48]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034d0:	f000 ff9a 	bl	8004408 <HAL_DMA2D_ConfigLayer>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80034da:	68f9      	ldr	r1, [r7, #12]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	2301      	movs	r3, #1
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4806      	ldr	r0, [pc, #24]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034e6:	f000 fd6b 	bl	8003fc0 <HAL_DMA2D_Start>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80034f0:	210a      	movs	r1, #10
 80034f2:	4803      	ldr	r0, [pc, #12]	; (8003500 <LL_ConvertLineToARGB8888+0x80>)
 80034f4:	f000 fd8f 	bl	8004016 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	200000cc 	.word	0x200000cc
 8003504:	4002b000 	.word	0x4002b000

08003508 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800350c:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800350e:	4a2a      	ldr	r2, [pc, #168]	; (80035b8 <BSP_SDRAM_Init+0xb0>)
 8003510:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003514:	2202      	movs	r2, #2
 8003516:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 800351a:	2207      	movs	r2, #7
 800351c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003520:	2204      	movs	r2, #4
 8003522:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003526:	2207      	movs	r2, #7
 8003528:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 800352c:	2202      	movs	r2, #2
 800352e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003532:	2202      	movs	r2, #2
 8003534:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003538:	2202      	movs	r2, #2
 800353a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800353e:	2200      	movs	r2, #0
 8003540:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800354a:	2204      	movs	r2, #4
 800354c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003550:	2210      	movs	r2, #16
 8003552:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003556:	2240      	movs	r2, #64	; 0x40
 8003558:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800355c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003560:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800356a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800356e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003572:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003578:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800357a:	2200      	movs	r2, #0
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800357e:	2100      	movs	r1, #0
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003582:	f000 f87f 	bl	8003684 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003586:	490d      	ldr	r1, [pc, #52]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003588:	480a      	ldr	r0, [pc, #40]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800358a:	f004 f953 	bl	8007834 <HAL_SDRAM_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <BSP_SDRAM_Init+0xb8>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e002      	b.n	80035a2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <BSP_SDRAM_Init+0xb8>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80035a2:	f240 6003 	movw	r0, #1539	; 0x603
 80035a6:	f000 f80d 	bl	80035c4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <BSP_SDRAM_Init+0xb8>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	20008030 	.word	0x20008030
 80035b8:	a0000140 	.word	0xa0000140
 80035bc:	200001ac 	.word	0x200001ac
 80035c0:	2000004c 	.word	0x2000004c

080035c4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d8:	2210      	movs	r2, #16
 80035da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035de:	2201      	movs	r2, #1
 80035e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80035e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ec:	4923      	ldr	r1, [pc, #140]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035ee:	4824      	ldr	r0, [pc, #144]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035f0:	f004 f954 	bl	800789c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f000 f9a9 	bl	800394c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035fc:	2202      	movs	r2, #2
 80035fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003602:	2210      	movs	r2, #16
 8003604:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003608:	2201      	movs	r2, #1
 800360a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003616:	4919      	ldr	r1, [pc, #100]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003618:	4819      	ldr	r0, [pc, #100]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800361a:	f004 f93f 	bl	800789c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003620:	2203      	movs	r2, #3
 8003622:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003626:	2210      	movs	r2, #16
 8003628:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362c:	2208      	movs	r2, #8
 800362e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800363a:	4910      	ldr	r1, [pc, #64]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800363c:	4810      	ldr	r0, [pc, #64]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800363e:	f004 f92d 	bl	800789c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003642:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003646:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364a:	2204      	movs	r2, #4
 800364c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003650:	2210      	movs	r2, #16
 8003652:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003654:	4b09      	ldr	r3, [pc, #36]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003656:	2201      	movs	r2, #1
 8003658:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003664:	4905      	ldr	r1, [pc, #20]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003666:	4806      	ldr	r0, [pc, #24]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003668:	f004 f918 	bl	800789c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4804      	ldr	r0, [pc, #16]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003670:	f004 f93f 	bl	80078f2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	200001c8 	.word	0x200001c8
 8003680:	20008030 	.word	0x20008030

08003684 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003684:	b580      	push	{r7, lr}
 8003686:	b090      	sub	sp, #64	; 0x40
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800368e:	4b70      	ldr	r3, [pc, #448]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003692:	4a6f      	ldr	r2, [pc, #444]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6393      	str	r3, [r2, #56]	; 0x38
 800369a:	4b6d      	ldr	r3, [pc, #436]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80036a6:	4b6a      	ldr	r3, [pc, #424]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	4a69      	ldr	r2, [pc, #420]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036b0:	6313      	str	r3, [r2, #48]	; 0x30
 80036b2:	4b67      	ldr	r3, [pc, #412]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036be:	4b64      	ldr	r3, [pc, #400]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	4a63      	ldr	r2, [pc, #396]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ca:	4b61      	ldr	r3, [pc, #388]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	623b      	str	r3, [r7, #32]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036d6:	4b5e      	ldr	r3, [pc, #376]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a5d      	ldr	r2, [pc, #372]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036dc:	f043 0308 	orr.w	r3, r3, #8
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b5b      	ldr	r3, [pc, #364]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80036ee:	4b58      	ldr	r3, [pc, #352]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4a57      	ldr	r2, [pc, #348]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036f4:	f043 0310 	orr.w	r3, r3, #16
 80036f8:	6313      	str	r3, [r2, #48]	; 0x30
 80036fa:	4b55      	ldr	r3, [pc, #340]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0310 	and.w	r3, r3, #16
 8003702:	61bb      	str	r3, [r7, #24]
 8003704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003706:	4b52      	ldr	r3, [pc, #328]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a51      	ldr	r2, [pc, #324]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 800370c:	f043 0320 	orr.w	r3, r3, #32
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800371e:	4b4c      	ldr	r3, [pc, #304]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003728:	6313      	str	r3, [r2, #48]	; 0x30
 800372a:	4b49      	ldr	r3, [pc, #292]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003736:	4b46      	ldr	r3, [pc, #280]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a45      	ldr	r2, [pc, #276]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 800373c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003740:	6313      	str	r3, [r2, #48]	; 0x30
 8003742:	4b43      	ldr	r3, [pc, #268]	; (8003850 <BSP_SDRAM_MspInit+0x1cc>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800374e:	2302      	movs	r3, #2
 8003750:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003752:	2301      	movs	r3, #1
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003756:	2302      	movs	r3, #2
 8003758:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800375a:	230c      	movs	r3, #12
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800375e:	2308      	movs	r3, #8
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003766:	4619      	mov	r1, r3
 8003768:	483a      	ldr	r0, [pc, #232]	; (8003854 <BSP_SDRAM_MspInit+0x1d0>)
 800376a:	f000 ff89 	bl	8004680 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800376e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003778:	4619      	mov	r1, r3
 800377a:	4837      	ldr	r0, [pc, #220]	; (8003858 <BSP_SDRAM_MspInit+0x1d4>)
 800377c:	f000 ff80 	bl	8004680 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003780:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003786:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378a:	4619      	mov	r1, r3
 800378c:	4833      	ldr	r0, [pc, #204]	; (800385c <BSP_SDRAM_MspInit+0x1d8>)
 800378e:	f000 ff77 	bl	8004680 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003792:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379c:	4619      	mov	r1, r3
 800379e:	4830      	ldr	r0, [pc, #192]	; (8003860 <BSP_SDRAM_MspInit+0x1dc>)
 80037a0:	f000 ff6e 	bl	8004680 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80037a4:	f248 1333 	movw	r3, #33075	; 0x8133
 80037a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80037aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ae:	4619      	mov	r1, r3
 80037b0:	482c      	ldr	r0, [pc, #176]	; (8003864 <BSP_SDRAM_MspInit+0x1e0>)
 80037b2:	f000 ff65 	bl	8004680 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80037b6:	2328      	movs	r3, #40	; 0x28
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80037ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	4829      	ldr	r0, [pc, #164]	; (8003868 <BSP_SDRAM_MspInit+0x1e4>)
 80037c2:	f000 ff5d 	bl	8004680 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80037c6:	4b29      	ldr	r3, [pc, #164]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80037cc:	4b27      	ldr	r3, [pc, #156]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80037da:	4b24      	ldr	r3, [pc, #144]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037e8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80037ea:	4b20      	ldr	r3, [pc, #128]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037f0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80037f2:	4b1e      	ldr	r3, [pc, #120]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 80037fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037fe:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003800:	4b1a      	ldr	r3, [pc, #104]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 8003802:	2200      	movs	r2, #0
 8003804:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003806:	4b19      	ldr	r3, [pc, #100]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 8003808:	2203      	movs	r2, #3
 800380a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800380c:	4b17      	ldr	r3, [pc, #92]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 800380e:	2200      	movs	r2, #0
 8003810:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003812:	4b16      	ldr	r3, [pc, #88]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003818:	4b14      	ldr	r3, [pc, #80]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 800381a:	4a15      	ldr	r2, [pc, #84]	; (8003870 <BSP_SDRAM_MspInit+0x1ec>)
 800381c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 8003822:	631a      	str	r2, [r3, #48]	; 0x30
 8003824:	4a11      	ldr	r2, [pc, #68]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800382a:	4810      	ldr	r0, [pc, #64]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 800382c:	f000 fa6e 	bl	8003d0c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003830:	480e      	ldr	r0, [pc, #56]	; (800386c <BSP_SDRAM_MspInit+0x1e8>)
 8003832:	f000 f9bd 	bl	8003bb0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003836:	2200      	movs	r2, #0
 8003838:	210f      	movs	r1, #15
 800383a:	2038      	movs	r0, #56	; 0x38
 800383c:	f000 f981 	bl	8003b42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003840:	2038      	movs	r0, #56	; 0x38
 8003842:	f000 f99a 	bl	8003b7a <HAL_NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3740      	adds	r7, #64	; 0x40
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40023800 	.word	0x40023800
 8003854:	40020800 	.word	0x40020800
 8003858:	40020c00 	.word	0x40020c00
 800385c:	40021000 	.word	0x40021000
 8003860:	40021400 	.word	0x40021400
 8003864:	40021800 	.word	0x40021800
 8003868:	40021c00 	.word	0x40021c00
 800386c:	200001d8 	.word	0x200001d8
 8003870:	40026410 	.word	0x40026410

08003874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_Init+0x34>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <HAL_Init+0x34>)
 800387e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003882:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003884:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_Init+0x34>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <HAL_Init+0x34>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003890:	2003      	movs	r0, #3
 8003892:	f000 f94b 	bl	8003b2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003896:	200f      	movs	r0, #15
 8003898:	f000 f808 	bl	80038ac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800389c:	f007 f87e 	bl	800a99c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40023c00 	.word	0x40023c00

080038ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_InitTick+0x54>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_InitTick+0x58>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	4619      	mov	r1, r3
 80038be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f963 	bl	8003b96 <HAL_SYSTICK_Config>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e00e      	b.n	80038f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b0f      	cmp	r3, #15
 80038de:	d80a      	bhi.n	80038f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038e0:	2200      	movs	r2, #0
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	f000 f92b 	bl	8003b42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038ec:	4a06      	ldr	r2, [pc, #24]	; (8003908 <HAL_InitTick+0x5c>)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	e000      	b.n	80038f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3708      	adds	r7, #8
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20000058 	.word	0x20000058
 8003904:	20000054 	.word	0x20000054
 8003908:	20000050 	.word	0x20000050

0800390c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003910:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_IncTick+0x20>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_IncTick+0x24>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4413      	add	r3, r2
 800391c:	4a04      	ldr	r2, [pc, #16]	; (8003930 <HAL_IncTick+0x24>)
 800391e:	6013      	str	r3, [r2, #0]
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20000054 	.word	0x20000054
 8003930:	20008064 	.word	0x20008064

08003934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  return uwTick;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_GetTick+0x14>)
 800393a:	681b      	ldr	r3, [r3, #0]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	20008064 	.word	0x20008064

0800394c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003954:	f7ff ffee 	bl	8003934 <HAL_GetTick>
 8003958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003964:	d005      	beq.n	8003972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <HAL_Delay+0x44>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4413      	add	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003972:	bf00      	nop
 8003974:	f7ff ffde 	bl	8003934 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	429a      	cmp	r2, r3
 8003982:	d8f7      	bhi.n	8003974 <HAL_Delay+0x28>
  {
  }
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000054 	.word	0x20000054

08003994 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <NVIC_SetPriorityGrouping+0x40>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039b0:	4013      	ands	r3, r2
 80039b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <NVIC_SetPriorityGrouping+0x44>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <NVIC_SetPriorityGrouping+0x40>)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	60d3      	str	r3, [r2, #12]
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00
 80039d8:	05fa0000 	.word	0x05fa0000

080039dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <NVIC_GetPriorityGrouping+0x18>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0307 	and.w	r3, r3, #7
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	4603      	mov	r3, r0
 8003a00:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	f003 021f 	and.w	r2, r3, #31
 8003a08:	4907      	ldr	r1, [pc, #28]	; (8003a28 <NVIC_EnableIRQ+0x30>)
 8003a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	2001      	movs	r0, #1
 8003a12:	fa00 f202 	lsl.w	r2, r0, r2
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000e100 	.word	0xe000e100

08003a2c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	6039      	str	r1, [r7, #0]
 8003a36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da0b      	bge.n	8003a58 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	490c      	ldr	r1, [pc, #48]	; (8003a78 <NVIC_SetPriority+0x4c>)
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	3b04      	subs	r3, #4
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a56:	e009      	b.n	8003a6c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	4907      	ldr	r1, [pc, #28]	; (8003a7c <NVIC_SetPriority+0x50>)
 8003a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a62:	0112      	lsls	r2, r2, #4
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	440b      	add	r3, r1
 8003a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00
 8003a7c:	e000e100 	.word	0xe000e100

08003a80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	; 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f1c3 0307 	rsb	r3, r3, #7
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	bf28      	it	cs
 8003a9e:	2304      	movcs	r3, #4
 8003aa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	2b06      	cmp	r3, #6
 8003aa8:	d902      	bls.n	8003ab0 <NVIC_EncodePriority+0x30>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3b03      	subs	r3, #3
 8003aae:	e000      	b.n	8003ab2 <NVIC_EncodePriority+0x32>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad2:	43d9      	mvns	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ad8:	4313      	orrs	r3, r2
         );
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3724      	adds	r7, #36	; 0x24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3b01      	subs	r3, #1
 8003af4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003af8:	d301      	bcc.n	8003afe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003afa:	2301      	movs	r3, #1
 8003afc:	e00f      	b.n	8003b1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003afe:	4a0a      	ldr	r2, [pc, #40]	; (8003b28 <SysTick_Config+0x40>)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b06:	210f      	movs	r1, #15
 8003b08:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0c:	f7ff ff8e 	bl	8003a2c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b10:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <SysTick_Config+0x40>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b16:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <SysTick_Config+0x40>)
 8003b18:	2207      	movs	r2, #7
 8003b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	e000e010 	.word	0xe000e010

08003b2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff ff2d 	bl	8003994 <NVIC_SetPriorityGrouping>
}
 8003b3a:	bf00      	nop
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b086      	sub	sp, #24
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	4603      	mov	r3, r0
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
 8003b4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003b50:	2300      	movs	r3, #0
 8003b52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b54:	f7ff ff42 	bl	80039dc <NVIC_GetPriorityGrouping>
 8003b58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	6978      	ldr	r0, [r7, #20]
 8003b60:	f7ff ff8e 	bl	8003a80 <NVIC_EncodePriority>
 8003b64:	4602      	mov	r2, r0
 8003b66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff ff5d 	bl	8003a2c <NVIC_SetPriority>
}
 8003b72:	bf00      	nop
 8003b74:	3718      	adds	r7, #24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	4603      	mov	r3, r0
 8003b82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff ff35 	bl	80039f8 <NVIC_EnableIRQ>
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff ffa2 	bl	8003ae8 <SysTick_Config>
 8003ba4:	4603      	mov	r3, r0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bbc:	f7ff feba 	bl	8003934 <HAL_GetTick>
 8003bc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e099      	b.n	8003d00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bec:	e00f      	b.n	8003c0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bee:	f7ff fea1 	bl	8003934 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	2b05      	cmp	r3, #5
 8003bfa:	d908      	bls.n	8003c0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2203      	movs	r2, #3
 8003c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e078      	b.n	8003d00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e8      	bne.n	8003bee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <HAL_DMA_Init+0x158>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d107      	bne.n	8003c78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4313      	orrs	r3, r2
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f023 0307 	bic.w	r3, r3, #7
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d117      	bne.n	8003cd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f8bd 	bl	8003e34 <DMA_CheckFifoParam>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2240      	movs	r2, #64	; 0x40
 8003cc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e016      	b.n	8003d00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f874 	bl	8003dc8 <DMA_CalcBaseAndBitshift>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	223f      	movs	r2, #63	; 0x3f
 8003cea:	409a      	lsls	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	f010803f 	.word	0xf010803f

08003d0c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e050      	b.n	8003dc0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d101      	bne.n	8003d2e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003d2a:	2302      	movs	r3, #2
 8003d2c:	e048      	b.n	8003dc0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 0201 	bic.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2221      	movs	r2, #33	; 0x21
 8003d6c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f82a 	bl	8003dc8 <DMA_CalcBaseAndBitshift>
 8003d74:	4603      	mov	r3, r0
 8003d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7c:	223f      	movs	r2, #63	; 0x3f
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	3b10      	subs	r3, #16
 8003dd8:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <DMA_CalcBaseAndBitshift+0x60>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	091b      	lsrs	r3, r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <DMA_CalcBaseAndBitshift+0x64>)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d908      	bls.n	8003e08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <DMA_CalcBaseAndBitshift+0x68>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	1d1a      	adds	r2, r3, #4
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	659a      	str	r2, [r3, #88]	; 0x58
 8003e06:	e006      	b.n	8003e16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <DMA_CalcBaseAndBitshift+0x68>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	aaaaaaab 	.word	0xaaaaaaab
 8003e2c:	0800efac 	.word	0x0800efac
 8003e30:	fffffc00 	.word	0xfffffc00

08003e34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d11f      	bne.n	8003e8e <DMA_CheckFifoParam+0x5a>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d856      	bhi.n	8003f02 <DMA_CheckFifoParam+0xce>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <DMA_CheckFifoParam+0x28>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e7f 	.word	0x08003e7f
 8003e64:	08003e6d 	.word	0x08003e6d
 8003e68:	08003f03 	.word	0x08003f03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d046      	beq.n	8003f06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e7c:	e043      	b.n	8003f06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e86:	d140      	bne.n	8003f0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8c:	e03d      	b.n	8003f0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	d121      	bne.n	8003edc <DMA_CheckFifoParam+0xa8>
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b03      	cmp	r3, #3
 8003e9c:	d837      	bhi.n	8003f0e <DMA_CheckFifoParam+0xda>
 8003e9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <DMA_CheckFifoParam+0x70>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003eb5 	.word	0x08003eb5
 8003ea8:	08003ebb 	.word	0x08003ebb
 8003eac:	08003eb5 	.word	0x08003eb5
 8003eb0:	08003ecd 	.word	0x08003ecd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	e030      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d025      	beq.n	8003f12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eca:	e022      	b.n	8003f12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ed4:	d11f      	bne.n	8003f16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003eda:	e01c      	b.n	8003f16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d903      	bls.n	8003eea <DMA_CheckFifoParam+0xb6>
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	2b03      	cmp	r3, #3
 8003ee6:	d003      	beq.n	8003ef0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ee8:	e018      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
      break;
 8003eee:	e015      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d00e      	beq.n	8003f1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e00b      	b.n	8003f1a <DMA_CheckFifoParam+0xe6>
      break;
 8003f02:	bf00      	nop
 8003f04:	e00a      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      break;
 8003f06:	bf00      	nop
 8003f08:	e008      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e006      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      break;
 8003f0e:	bf00      	nop
 8003f10:	e004      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      break;
 8003f12:	bf00      	nop
 8003f14:	e002      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      break;   
 8003f16:	bf00      	nop
 8003f18:	e000      	b.n	8003f1c <DMA_CheckFifoParam+0xe8>
      break;
 8003f1a:	bf00      	nop
    }
  } 
  
  return status; 
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop

08003f2c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e039      	b.n	8003fb2 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f006 fd46 	bl	800a9e4 <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	f023 0107 	bic.w	r1, r3, #7
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f92:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <HAL_DMA2D_Init+0x90>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68d1      	ldr	r1, [r2, #12]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3708      	adds	r7, #8
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	ffffc000 	.word	0xffffc000

08003fc0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af02      	add	r7, sp, #8
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_DMA2D_Start+0x1c>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e018      	b.n	800400e <HAL_DMA2D_Start+0x4e>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fa9c 	bl	8004534 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0201 	orr.w	r2, r2, #1
 800400a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3710      	adds	r7, #16
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b084      	sub	sp, #16
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004020:	2300      	movs	r3, #0
 8004022:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8004024:	2300      	movs	r3, #0
 8004026:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d056      	beq.n	80040e4 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004036:	f7ff fc7d 	bl	8003934 <HAL_GetTick>
 800403a:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 800403c:	e04b      	b.n	80040d6 <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800404c:	2b00      	cmp	r3, #0
 800404e:	d023      	beq.n	8004098 <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f003 0320 	and.w	r3, r3, #32
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405e:	f043 0202 	orr.w	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d005      	beq.n	800407c <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004074:	f043 0201 	orr.w	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2221      	movs	r2, #33	; 0x21
 8004082:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2204      	movs	r2, #4
 8004088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0a2      	b.n	80041de <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d01a      	beq.n	80040d6 <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_DMA2D_PollForTransfer+0xa0>
 80040a6:	f7ff fc45 	bl	8003934 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d20f      	bcs.n	80040d6 <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	f043 0220 	orr.w	r2, r3, #32
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2203      	movs	r2, #3
 80040c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e083      	b.n	80041de <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ac      	beq.n	800403e <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d106      	bne.n	8004100 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d061      	beq.n	80041c4 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004100:	f7ff fc18 	bl	8003934 <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8004106:	e056      	b.n	80041b6 <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004116:	2b00      	cmp	r3, #0
 8004118:	d02e      	beq.n	8004178 <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d005      	beq.n	8004146 <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	f043 0202 	orr.w	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	f043 0201 	orr.w	r2, r3, #1
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2229      	movs	r2, #41	; 0x29
 8004162:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2204      	movs	r2, #4
 8004168:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 8004174:	2301      	movs	r3, #1
 8004176:	e032      	b.n	80041de <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d01a      	beq.n	80041b6 <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <HAL_DMA2D_PollForTransfer+0x180>
 8004186:	f7ff fbd5 	bl	8003934 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d20f      	bcs.n	80041b6 <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2203      	movs	r2, #3
 80041a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e013      	b.n	80041de <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0a1      	beq.n	8004108 <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2212      	movs	r2, #18
 80041ca:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3710      	adds	r7, #16
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.  
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60bb      	str	r3, [r7, #8]
        
  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b00      	cmp	r3, #0
 8004206:	d026      	beq.n	8004256 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)    
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d021      	beq.n	8004256 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004220:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004226:	f043 0201 	orr.w	r2, r3, #1
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2201      	movs	r2, #1
 8004234:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2204      	movs	r2, #4
 800423a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 0320 	and.w	r3, r3, #32
 800425c:	2b00      	cmp	r3, #0
 800425e:	d026      	beq.n	80042ae <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)    
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d021      	beq.n	80042ae <HAL_DMA2D_IRQHandler+0xc8>
    {  
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004278:	601a      	str	r2, [r3, #0]
  
      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2220      	movs	r2, #32
 8004280:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2204      	movs	r2, #4
 8004292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0308 	and.w	r3, r3, #8
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d026      	beq.n	8004306 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d021      	beq.n	8004306 <HAL_DMA2D_IRQHandler+0x120>
    {    
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042d0:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2208      	movs	r2, #8
 80042d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	f043 0204 	orr.w	r2, r3, #4
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2204      	movs	r2, #4
 80042ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
      }
    }
  }  
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <HAL_DMA2D_IRQHandler+0x152>
    {    
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004328:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer watermark flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2204      	movs	r2, #4
 8004330:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f853 	bl	80043de <HAL_DMA2D_LineEventCallback>
    }
  }  
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d024      	beq.n	800438c <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)    
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01f      	beq.n	800438c <HAL_DMA2D_IRQHandler+0x1a6>
    {   
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800435a:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2202      	movs	r2, #2
 8004362:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferCpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
      }         
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01f      	beq.n	80043d6 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01a      	beq.n	80043d6 <HAL_DMA2D_IRQHandler+0x1f0>
    {    
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ae:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2210      	movs	r2, #16
 80043b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f000 f80e 	bl	80043f2 <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }  
  
}
 80043d6:	bf00      	nop
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043de:	b480      	push	{r7}
 80043e0:	b083      	sub	sp, #12
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80043e6:	bf00      	nop
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
} 
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
	...

08004408 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	3318      	adds	r3, #24
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_DMA2D_ConfigLayer+0x34>
 8004438:	2302      	movs	r3, #2
 800443a:	e073      	b.n	8004524 <HAL_DMA2D_ConfigLayer+0x11c>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	041b      	lsls	r3, r3, #16
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800445a:	4b35      	ldr	r3, [pc, #212]	; (8004530 <HAL_DMA2D_ConfigLayer+0x128>)
 800445c:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b0a      	cmp	r3, #10
 8004464:	d003      	beq.n	800446e <HAL_DMA2D_ConfigLayer+0x66>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b09      	cmp	r3, #9
 800446c:	d107      	bne.n	800447e <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	e005      	b.n	800448a <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	061b      	lsls	r3, r3, #24
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	4313      	orrs	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d120      	bne.n	80044d2 <HAL_DMA2D_ConfigLayer+0xca>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	43db      	mvns	r3, r3
 800449a:	ea02 0103 	and.w	r1, r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	6812      	ldr	r2, [r2, #0]
 80044b0:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b0a      	cmp	r3, #10
 80044b8:	d003      	beq.n	80044c2 <HAL_DMA2D_ConfigLayer+0xba>
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b09      	cmp	r3, #9
 80044c0:	d127      	bne.n	8004512 <HAL_DMA2D_ConfigLayer+0x10a>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28
 80044d0:	e01f      	b.n	8004512 <HAL_DMA2D_ConfigLayer+0x10a>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69da      	ldr	r2, [r3, #28]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	ea02 0103 	and.w	r1, r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b0a      	cmp	r3, #10
 80044fa:	d003      	beq.n	8004504 <HAL_DMA2D_ConfigLayer+0xfc>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b09      	cmp	r3, #9
 8004502:	d106      	bne.n	8004512 <HAL_DMA2D_ConfigLayer+0x10a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004510:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	371c      	adds	r7, #28
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	ff03000f 	.word	0xff03000f

08004534 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8004534:	b480      	push	{r7}
 8004536:	b08b      	sub	sp, #44	; 0x2c
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 800454e:	2300      	movs	r3, #0
 8004550:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 8004552:	2300      	movs	r3, #0
 8004554:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	041a      	lsls	r2, r3, #16
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	431a      	orrs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004580:	d174      	bne.n	800466c <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004588:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004590:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004598:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	b2db      	uxtb	r3, r3
 800459e:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	431a      	orrs	r2, r3
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
 80045b8:	e053      	b.n	8004662 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d106      	bne.n	80045d0 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	627b      	str	r3, [r7, #36]	; 0x24
 80045ce:	e048      	b.n	8004662 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d111      	bne.n	80045fc <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	0cdb      	lsrs	r3, r3, #19
 80045dc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	0a9b      	lsrs	r3, r3, #10
 80045e2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	08db      	lsrs	r3, r3, #3
 80045e8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	015a      	lsls	r2, r3, #5
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	02db      	lsls	r3, r3, #11
 80045f2:	4313      	orrs	r3, r2
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e032      	b.n	8004662 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d117      	bne.n	8004634 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	0fdb      	lsrs	r3, r3, #31
 8004608:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	0cdb      	lsrs	r3, r3, #19
 800460e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	0adb      	lsrs	r3, r3, #11
 8004614:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	029b      	lsls	r3, r3, #10
 8004624:	431a      	orrs	r2, r3
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	03db      	lsls	r3, r3, #15
 800462a:	4313      	orrs	r3, r2
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
 8004632:	e016      	b.n	8004662 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8004634:	6a3b      	ldr	r3, [r7, #32]
 8004636:	0f1b      	lsrs	r3, r3, #28
 8004638:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	0d1b      	lsrs	r3, r3, #20
 800463e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	0b1b      	lsrs	r3, r3, #12
 8004644:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	091b      	lsrs	r3, r3, #4
 800464a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	011a      	lsls	r2, r3, #4
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	431a      	orrs	r2, r3
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	031b      	lsls	r3, r3, #12
 800465a:	4313      	orrs	r3, r2
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800466a:	e003      	b.n	8004674 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	60da      	str	r2, [r3, #12]
}
 8004674:	bf00      	nop
 8004676:	372c      	adds	r7, #44	; 0x2c
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004680:	b480      	push	{r7}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800468e:	2300      	movs	r3, #0
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004696:	2300      	movs	r3, #0
 8004698:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	e175      	b.n	800498c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046a0:	2201      	movs	r2, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	f040 8164 	bne.w	8004986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x4e>
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b12      	cmp	r3, #18
 80046cc:	d123      	bne.n	8004716 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	08da      	lsrs	r2, r3, #3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	3208      	adds	r2, #8
 80046d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0307 	and.w	r3, r3, #7
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	08da      	lsrs	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	69b9      	ldr	r1, [r7, #24]
 8004712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 0203 	and.w	r2, r3, #3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d00b      	beq.n	800476a <HAL_GPIO_Init+0xea>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d007      	beq.n	800476a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800475e:	2b11      	cmp	r3, #17
 8004760:	d003      	beq.n	800476a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b12      	cmp	r3, #18
 8004768:	d130      	bne.n	80047cc <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	2203      	movs	r2, #3
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a0:	2201      	movs	r2, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	43db      	mvns	r3, r3
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4013      	ands	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 0201 	and.w	r2, r3, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	2203      	movs	r2, #3
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	43db      	mvns	r3, r3
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	4013      	ands	r3, r2
 80047e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	fa02 f303 	lsl.w	r3, r2, r3
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 80be 	beq.w	8004986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	4b66      	ldr	r3, [pc, #408]	; (80049a4 <HAL_GPIO_Init+0x324>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	4a65      	ldr	r2, [pc, #404]	; (80049a4 <HAL_GPIO_Init+0x324>)
 8004810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004814:	6453      	str	r3, [r2, #68]	; 0x44
 8004816:	4b63      	ldr	r3, [pc, #396]	; (80049a4 <HAL_GPIO_Init+0x324>)
 8004818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800481a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004822:	4a61      	ldr	r2, [pc, #388]	; (80049a8 <HAL_GPIO_Init+0x328>)
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	089b      	lsrs	r3, r3, #2
 8004828:	3302      	adds	r3, #2
 800482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	220f      	movs	r2, #15
 800483a:	fa02 f303 	lsl.w	r3, r2, r3
 800483e:	43db      	mvns	r3, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4013      	ands	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a58      	ldr	r2, [pc, #352]	; (80049ac <HAL_GPIO_Init+0x32c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d037      	beq.n	80048be <HAL_GPIO_Init+0x23e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <HAL_GPIO_Init+0x330>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_GPIO_Init+0x23a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a56      	ldr	r2, [pc, #344]	; (80049b4 <HAL_GPIO_Init+0x334>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d02b      	beq.n	80048b6 <HAL_GPIO_Init+0x236>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a55      	ldr	r2, [pc, #340]	; (80049b8 <HAL_GPIO_Init+0x338>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d025      	beq.n	80048b2 <HAL_GPIO_Init+0x232>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a54      	ldr	r2, [pc, #336]	; (80049bc <HAL_GPIO_Init+0x33c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d01f      	beq.n	80048ae <HAL_GPIO_Init+0x22e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a53      	ldr	r2, [pc, #332]	; (80049c0 <HAL_GPIO_Init+0x340>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d019      	beq.n	80048aa <HAL_GPIO_Init+0x22a>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a52      	ldr	r2, [pc, #328]	; (80049c4 <HAL_GPIO_Init+0x344>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x226>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a51      	ldr	r2, [pc, #324]	; (80049c8 <HAL_GPIO_Init+0x348>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x222>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a50      	ldr	r2, [pc, #320]	; (80049cc <HAL_GPIO_Init+0x34c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x21e>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a4f      	ldr	r2, [pc, #316]	; (80049d0 <HAL_GPIO_Init+0x350>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x21a>
 8004896:	2309      	movs	r3, #9
 8004898:	e012      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 800489a:	230a      	movs	r3, #10
 800489c:	e010      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 800489e:	2308      	movs	r3, #8
 80048a0:	e00e      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048a2:	2307      	movs	r3, #7
 80048a4:	e00c      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048a6:	2306      	movs	r3, #6
 80048a8:	e00a      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048aa:	2305      	movs	r3, #5
 80048ac:	e008      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048ae:	2304      	movs	r3, #4
 80048b0:	e006      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048b2:	2303      	movs	r3, #3
 80048b4:	e004      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_GPIO_Init+0x240>
 80048be:	2300      	movs	r3, #0
 80048c0:	69fa      	ldr	r2, [r7, #28]
 80048c2:	f002 0203 	and.w	r2, r2, #3
 80048c6:	0092      	lsls	r2, r2, #2
 80048c8:	4093      	lsls	r3, r2
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80048d0:	4935      	ldr	r1, [pc, #212]	; (80049a8 <HAL_GPIO_Init+0x328>)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	089b      	lsrs	r3, r3, #2
 80048d6:	3302      	adds	r3, #2
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048de:	4b3d      	ldr	r3, [pc, #244]	; (80049d4 <HAL_GPIO_Init+0x354>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4013      	ands	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004902:	4a34      	ldr	r2, [pc, #208]	; (80049d4 <HAL_GPIO_Init+0x354>)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <HAL_GPIO_Init+0x354>)
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	43db      	mvns	r3, r3
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4013      	ands	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800492c:	4a29      	ldr	r2, [pc, #164]	; (80049d4 <HAL_GPIO_Init+0x354>)
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004932:	4b28      	ldr	r3, [pc, #160]	; (80049d4 <HAL_GPIO_Init+0x354>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	43db      	mvns	r3, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4013      	ands	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004956:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <HAL_GPIO_Init+0x354>)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800495c:	4b1d      	ldr	r3, [pc, #116]	; (80049d4 <HAL_GPIO_Init+0x354>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	43db      	mvns	r3, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4013      	ands	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004980:	4a14      	ldr	r2, [pc, #80]	; (80049d4 <HAL_GPIO_Init+0x354>)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3301      	adds	r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	2b0f      	cmp	r3, #15
 8004990:	f67f ae86 	bls.w	80046a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	; 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40013800 	.word	0x40013800
 80049ac:	40020000 	.word	0x40020000
 80049b0:	40020400 	.word	0x40020400
 80049b4:	40020800 	.word	0x40020800
 80049b8:	40020c00 	.word	0x40020c00
 80049bc:	40021000 	.word	0x40021000
 80049c0:	40021400 	.word	0x40021400
 80049c4:	40021800 	.word	0x40021800
 80049c8:	40021c00 	.word	0x40021c00
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40022400 	.word	0x40022400
 80049d4:	40013c00 	.word	0x40013c00

080049d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80049e6:	2300      	movs	r3, #0
 80049e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e0d9      	b.n	8004ba8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80049f4:	2201      	movs	r2, #1
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80049fe:	683a      	ldr	r2, [r7, #0]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4013      	ands	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	f040 80c9 	bne.w	8004ba2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	2103      	movs	r1, #3
 8004a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	401a      	ands	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	08da      	lsrs	r2, r3, #3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3208      	adds	r2, #8
 8004a2e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	220f      	movs	r2, #15
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	08d2      	lsrs	r2, r2, #3
 8004a46:	4019      	ands	r1, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3208      	adds	r2, #8
 8004a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2103      	movs	r1, #3
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	401a      	ands	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	401a      	ands	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	2103      	movs	r1, #3
 8004a84:	fa01 f303 	lsl.w	r3, r1, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004a90:	4a4b      	ldr	r2, [pc, #300]	; (8004bc0 <HAL_GPIO_DeInit+0x1e8>)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	089b      	lsrs	r3, r3, #2
 8004a96:	3302      	adds	r3, #2
 8004a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a9c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0303 	and.w	r3, r3, #3
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	220f      	movs	r2, #15
 8004aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a43      	ldr	r2, [pc, #268]	; (8004bc4 <HAL_GPIO_DeInit+0x1ec>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d037      	beq.n	8004b2a <HAL_GPIO_DeInit+0x152>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a42      	ldr	r2, [pc, #264]	; (8004bc8 <HAL_GPIO_DeInit+0x1f0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d031      	beq.n	8004b26 <HAL_GPIO_DeInit+0x14e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a41      	ldr	r2, [pc, #260]	; (8004bcc <HAL_GPIO_DeInit+0x1f4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02b      	beq.n	8004b22 <HAL_GPIO_DeInit+0x14a>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a40      	ldr	r2, [pc, #256]	; (8004bd0 <HAL_GPIO_DeInit+0x1f8>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d025      	beq.n	8004b1e <HAL_GPIO_DeInit+0x146>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a3f      	ldr	r2, [pc, #252]	; (8004bd4 <HAL_GPIO_DeInit+0x1fc>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01f      	beq.n	8004b1a <HAL_GPIO_DeInit+0x142>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a3e      	ldr	r2, [pc, #248]	; (8004bd8 <HAL_GPIO_DeInit+0x200>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d019      	beq.n	8004b16 <HAL_GPIO_DeInit+0x13e>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a3d      	ldr	r2, [pc, #244]	; (8004bdc <HAL_GPIO_DeInit+0x204>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d013      	beq.n	8004b12 <HAL_GPIO_DeInit+0x13a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a3c      	ldr	r2, [pc, #240]	; (8004be0 <HAL_GPIO_DeInit+0x208>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00d      	beq.n	8004b0e <HAL_GPIO_DeInit+0x136>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a3b      	ldr	r2, [pc, #236]	; (8004be4 <HAL_GPIO_DeInit+0x20c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d007      	beq.n	8004b0a <HAL_GPIO_DeInit+0x132>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a3a      	ldr	r2, [pc, #232]	; (8004be8 <HAL_GPIO_DeInit+0x210>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d101      	bne.n	8004b06 <HAL_GPIO_DeInit+0x12e>
 8004b02:	2309      	movs	r3, #9
 8004b04:	e012      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b06:	230a      	movs	r3, #10
 8004b08:	e010      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b0a:	2308      	movs	r3, #8
 8004b0c:	e00e      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b0e:	2307      	movs	r3, #7
 8004b10:	e00c      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b12:	2306      	movs	r3, #6
 8004b14:	e00a      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b16:	2305      	movs	r3, #5
 8004b18:	e008      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b1a:	2304      	movs	r3, #4
 8004b1c:	e006      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e004      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b22:	2302      	movs	r3, #2
 8004b24:	e002      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <HAL_GPIO_DeInit+0x154>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	f002 0203 	and.w	r2, r2, #3
 8004b32:	0092      	lsls	r2, r2, #2
 8004b34:	4093      	lsls	r3, r2
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d132      	bne.n	8004ba2 <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	220f      	movs	r2, #15
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004b4c:	4a1c      	ldr	r2, [pc, #112]	; (8004bc0 <HAL_GPIO_DeInit+0x1e8>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	3302      	adds	r3, #2
 8004b54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	4818      	ldr	r0, [pc, #96]	; (8004bc0 <HAL_GPIO_DeInit+0x1e8>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	400a      	ands	r2, r1
 8004b64:	3302      	adds	r3, #2
 8004b66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004b6a:	4b20      	ldr	r3, [pc, #128]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	43db      	mvns	r3, r3
 8004b72:	491e      	ldr	r1, [pc, #120]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004b78:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	491a      	ldr	r1, [pc, #104]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b82:	4013      	ands	r3, r2
 8004b84:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004b86:	4b19      	ldr	r3, [pc, #100]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b88:	689a      	ldr	r2, [r3, #8]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	4917      	ldr	r1, [pc, #92]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004b94:	4b15      	ldr	r3, [pc, #84]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	4913      	ldr	r1, [pc, #76]	; (8004bec <HAL_GPIO_DeInit+0x214>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	f67f af22 	bls.w	80049f4 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8004bb0:	bf00      	nop
 8004bb2:	bf00      	nop
 8004bb4:	371c      	adds	r7, #28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40013800 	.word	0x40013800
 8004bc4:	40020000 	.word	0x40020000
 8004bc8:	40020400 	.word	0x40020400
 8004bcc:	40020800 	.word	0x40020800
 8004bd0:	40020c00 	.word	0x40020c00
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	40021400 	.word	0x40021400
 8004bdc:	40021800 	.word	0x40021800
 8004be0:	40021c00 	.word	0x40021c00
 8004be4:	40022000 	.word	0x40022000
 8004be8:	40022400 	.word	0x40022400
 8004bec:	40013c00 	.word	0x40013c00

08004bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c00:	787b      	ldrb	r3, [r7, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004c0c:	e003      	b.n	8004c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004c0e:	887b      	ldrh	r3, [r7, #2]
 8004c10:	041a      	lsls	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
	...

08004c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	e07f      	b.n	8004d36 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f005 fef0 	bl	800aa30 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2224      	movs	r2, #36	; 0x24
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0201 	bic.w	r2, r2, #1
 8004c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d107      	bne.n	8004c9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	e006      	b.n	8004cac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	689a      	ldr	r2, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004caa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d104      	bne.n	8004cbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b1d      	ldr	r3, [pc, #116]	; (8004d40 <HAL_I2C_Init+0x11c>)
 8004cca:	430b      	orrs	r3, r1
 8004ccc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004cdc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	021a      	lsls	r2, r3, #8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69d9      	ldr	r1, [r3, #28]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1a      	ldr	r2, [r3, #32]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0201 	orr.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	02008000 	.word	0x02008000

08004d44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e021      	b.n	8004d9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2224      	movs	r2, #36	; 0x24
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0201 	bic.w	r2, r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f005 fea2 	bl	800aab8 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b088      	sub	sp, #32
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	4608      	mov	r0, r1
 8004dae:	4611      	mov	r1, r2
 8004db0:	461a      	mov	r2, r3
 8004db2:	4603      	mov	r3, r0
 8004db4:	817b      	strh	r3, [r7, #10]
 8004db6:	460b      	mov	r3, r1
 8004db8:	813b      	strh	r3, [r7, #8]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	f040 8109 	bne.w	8004fe2 <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd0:	6a3b      	ldr	r3, [r7, #32]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x38>
 8004dd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e101      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_I2C_Mem_Write+0x4a>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e0fa      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004df6:	f7fe fd9d 	bl	8003934 <HAL_GetTick>
 8004dfa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2319      	movs	r3, #25
 8004e02:	2201      	movs	r2, #1
 8004e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004e08:	68f8      	ldr	r0, [r7, #12]
 8004e0a:	f000 fb09 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0e5      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2221      	movs	r2, #33	; 0x21
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2240      	movs	r2, #64	; 0x40
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e40:	88f8      	ldrh	r0, [r7, #6]
 8004e42:	893a      	ldrh	r2, [r7, #8]
 8004e44:	8979      	ldrh	r1, [r7, #10]
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	9301      	str	r3, [sp, #4]
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	9300      	str	r3, [sp, #0]
 8004e4e:	4603      	mov	r3, r0
 8004e50:	68f8      	ldr	r0, [r7, #12]
 8004e52:	f000 fa01 	bl	8005258 <I2C_RequestMemoryWrite>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00f      	beq.n	8004e7c <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d105      	bne.n	8004e70 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e0b9      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e0b3      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2bff      	cmp	r3, #255	; 0xff
 8004e84:	d90e      	bls.n	8004ea4 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	22ff      	movs	r2, #255	; 0xff
 8004e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e90:	b2da      	uxtb	r2, r3
 8004e92:	8979      	ldrh	r1, [r7, #10]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 fbd3 	bl	8005648 <I2C_TransferConfig>
 8004ea2:	e00f      	b.n	8004ec4 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb2:	b2da      	uxtb	r2, r3
 8004eb4:	8979      	ldrh	r1, [r7, #10]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fbc2 	bl	8005648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fae3 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d007      	beq.n	8004ee4 <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e081      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e07f      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c59      	adds	r1, r3, #1
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	6251      	str	r1, [r2, #36]	; 0x24
 8004eee:	781a      	ldrb	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d135      	bne.n	8004f84 <HAL_I2C_Mem_Write+0x1e0>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d030      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2180      	movs	r1, #128	; 0x80
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 fa77 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e053      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2bff      	cmp	r3, #255	; 0xff
 8004f44:	d90e      	bls.n	8004f64 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	22ff      	movs	r2, #255	; 0xff
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	8979      	ldrh	r1, [r7, #10]
 8004f54:	2300      	movs	r3, #0
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 fb73 	bl	8005648 <I2C_TransferConfig>
 8004f62:	e00f      	b.n	8004f84 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	8979      	ldrh	r1, [r7, #10]
 8004f76:	2300      	movs	r3, #0
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 fb62 	bl	8005648 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d19a      	bne.n	8004ec4 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fabe 	bl	8005514 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	2b04      	cmp	r3, #4
 8004fa4:	d101      	bne.n	8004faa <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e01c      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e01a      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	6859      	ldr	r1, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <HAL_I2C_Mem_Write+0x248>)
 8004fc2:	400b      	ands	r3, r1
 8004fc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	fe00e800 	.word	0xfe00e800

08004ff0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	4603      	mov	r3, r0
 8005000:	817b      	strh	r3, [r7, #10]
 8005002:	460b      	mov	r3, r1
 8005004:	813b      	strh	r3, [r7, #8]
 8005006:	4613      	mov	r3, r2
 8005008:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b20      	cmp	r3, #32
 8005018:	f040 8107 	bne.w	800522a <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_I2C_Mem_Read+0x38>
 8005022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0ff      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_I2C_Mem_Read+0x4a>
 8005036:	2302      	movs	r3, #2
 8005038:	e0f8      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005042:	f7fe fc77 	bl	8003934 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	9300      	str	r3, [sp, #0]
 800504c:	2319      	movs	r3, #25
 800504e:	2201      	movs	r2, #1
 8005050:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f9e3 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e0e3      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2222      	movs	r2, #34	; 0x22
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2240      	movs	r2, #64	; 0x40
 8005070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005084:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800508c:	88f8      	ldrh	r0, [r7, #6]
 800508e:	893a      	ldrh	r2, [r7, #8]
 8005090:	8979      	ldrh	r1, [r7, #10]
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	9301      	str	r3, [sp, #4]
 8005096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4603      	mov	r3, r0
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f93b 	bl	8005318 <I2C_RequestMemoryRead>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00f      	beq.n	80050c8 <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d105      	bne.n	80050bc <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0b7      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e0b1      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2bff      	cmp	r3, #255	; 0xff
 80050d0:	d90e      	bls.n	80050f0 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	22ff      	movs	r2, #255	; 0xff
 80050d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	8979      	ldrh	r1, [r7, #10]
 80050e0:	4b54      	ldr	r3, [pc, #336]	; (8005234 <HAL_I2C_Mem_Read+0x244>)
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 faad 	bl	8005648 <I2C_TransferConfig>
 80050ee:	e00f      	b.n	8005110 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	8979      	ldrh	r1, [r7, #10]
 8005102:	4b4c      	ldr	r3, [pc, #304]	; (8005234 <HAL_I2C_Mem_Read+0x244>)
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fa9c 	bl	8005648 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	2200      	movs	r2, #0
 8005118:	2104      	movs	r1, #4
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 f980 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e080      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	1c59      	adds	r1, r3, #1
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	6251      	str	r1, [r2, #36]	; 0x24
 800513a:	b2c2      	uxtb	r2, r0
 800513c:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	b29a      	uxth	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b29a      	uxth	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	d135      	bne.n	80051cc <HAL_I2C_Mem_Read+0x1dc>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d030      	beq.n	80051cc <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	2200      	movs	r2, #0
 8005172:	2180      	movs	r1, #128	; 0x80
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f953 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e053      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005188:	b29b      	uxth	r3, r3
 800518a:	2bff      	cmp	r3, #255	; 0xff
 800518c:	d90e      	bls.n	80051ac <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	22ff      	movs	r2, #255	; 0xff
 8005192:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	b2da      	uxtb	r2, r3
 800519a:	8979      	ldrh	r1, [r7, #10]
 800519c:	2300      	movs	r3, #0
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051a4:	68f8      	ldr	r0, [r7, #12]
 80051a6:	f000 fa4f 	bl	8005648 <I2C_TransferConfig>
 80051aa:	e00f      	b.n	80051cc <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	8979      	ldrh	r1, [r7, #10]
 80051be:	2300      	movs	r3, #0
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fa3e 	bl	8005648 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d19c      	bne.n	8005110 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f99a 	bl	8005514 <I2C_WaitOnSTOPFlagUntilTimeout>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e01c      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e01a      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2220      	movs	r2, #32
 80051fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6859      	ldr	r1, [r3, #4]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b0b      	ldr	r3, [pc, #44]	; (8005238 <HAL_I2C_Mem_Read+0x248>)
 800520a:	400b      	ands	r3, r1
 800520c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2220      	movs	r2, #32
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	e000      	b.n	800522c <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 800522a:	2302      	movs	r3, #2
  }
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	80002400 	.word	0x80002400
 8005238:	fe00e800 	.word	0xfe00e800

0800523c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800524a:	b2db      	uxtb	r3, r3
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	4608      	mov	r0, r1
 8005262:	4611      	mov	r1, r2
 8005264:	461a      	mov	r2, r3
 8005266:	4603      	mov	r3, r0
 8005268:	817b      	strh	r3, [r7, #10]
 800526a:	460b      	mov	r3, r1
 800526c:	813b      	strh	r3, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005272:	88fb      	ldrh	r3, [r7, #6]
 8005274:	b2da      	uxtb	r2, r3
 8005276:	8979      	ldrh	r1, [r7, #10]
 8005278:	4b26      	ldr	r3, [pc, #152]	; (8005314 <I2C_RequestMemoryWrite+0xbc>)
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	f000 f9e1 	bl	8005648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f902 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d007      	beq.n	80052a6 <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	2b04      	cmp	r3, #4
 800529c:	d101      	bne.n	80052a2 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e034      	b.n	800530c <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e032      	b.n	800530c <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052a6:	88fb      	ldrh	r3, [r7, #6]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d105      	bne.n	80052b8 <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052ac:	893b      	ldrh	r3, [r7, #8]
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	629a      	str	r2, [r3, #40]	; 0x28
 80052b6:	e01b      	b.n	80052f0 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052b8:	893b      	ldrh	r3, [r7, #8]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	b29b      	uxth	r3, r3
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	69fa      	ldr	r2, [r7, #28]
 80052c8:	69b9      	ldr	r1, [r7, #24]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f8e2 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d101      	bne.n	80052e2 <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e014      	b.n	800530c <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e012      	b.n	800530c <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052e6:	893b      	ldrh	r3, [r7, #8]
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2200      	movs	r2, #0
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f890 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e000      	b.n	800530c <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	80002000 	.word	0x80002000

08005318 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af02      	add	r7, sp, #8
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	4608      	mov	r0, r1
 8005322:	4611      	mov	r1, r2
 8005324:	461a      	mov	r2, r3
 8005326:	4603      	mov	r3, r0
 8005328:	817b      	strh	r3, [r7, #10]
 800532a:	460b      	mov	r3, r1
 800532c:	813b      	strh	r3, [r7, #8]
 800532e:	4613      	mov	r3, r2
 8005330:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005332:	88fb      	ldrh	r3, [r7, #6]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	8979      	ldrh	r1, [r7, #10]
 8005338:	4b26      	ldr	r3, [pc, #152]	; (80053d4 <I2C_RequestMemoryRead+0xbc>)
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	2300      	movs	r3, #0
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f982 	bl	8005648 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	69b9      	ldr	r1, [r7, #24]
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f8a3 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d007      	beq.n	8005364 <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005358:	2b04      	cmp	r3, #4
 800535a:	d101      	bne.n	8005360 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e034      	b.n	80053ca <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e032      	b.n	80053ca <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d105      	bne.n	8005376 <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800536a:	893b      	ldrh	r3, [r7, #8]
 800536c:	b2da      	uxtb	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	629a      	str	r2, [r3, #40]	; 0x28
 8005374:	e01b      	b.n	80053ae <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005376:	893b      	ldrh	r3, [r7, #8]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	b29b      	uxth	r3, r3
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005384:	69fa      	ldr	r2, [r7, #28]
 8005386:	69b9      	ldr	r1, [r7, #24]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f883 	bl	8005494 <I2C_WaitOnTXISFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d007      	beq.n	80053a4 <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	2b04      	cmp	r3, #4
 800539a:	d101      	bne.n	80053a0 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e014      	b.n	80053ca <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e012      	b.n	80053ca <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053a4:	893b      	ldrh	r3, [r7, #8]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2200      	movs	r2, #0
 80053b6:	2140      	movs	r1, #64	; 0x40
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f831 	bl	8005420 <I2C_WaitOnFlagUntilTimeout>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e000      	b.n	80053ca <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	80002000 	.word	0x80002000

080053d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d103      	bne.n	80053f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2200      	movs	r2, #0
 80053f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d007      	beq.n	8005414 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	619a      	str	r2, [r3, #24]
  }
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005430:	e01c      	b.n	800546c <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005438:	d018      	beq.n	800546c <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d007      	beq.n	8005450 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005440:	f7fe fa78 	bl	8003934 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d20d      	bcs.n	800546c <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e00f      	b.n	800548c <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699a      	ldr	r2, [r3, #24]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	429a      	cmp	r2, r3
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	429a      	cmp	r2, r3
 8005488:	d0d3      	beq.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054a0:	e02c      	b.n	80054fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f870 	bl	800558c <I2C_IsAcknowledgeFailed>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e02a      	b.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054bc:	d01e      	beq.n	80054fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054c4:	f7fe fa36 	bl	8003934 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d213      	bcs.n	80054fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e007      	b.n	800550c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b02      	cmp	r3, #2
 8005508:	d1cb      	bne.n	80054a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005520:	e028      	b.n	8005574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68b9      	ldr	r1, [r7, #8]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f830 	bl	800558c <I2C_IsAcknowledgeFailed>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e026      	b.n	8005584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800553c:	f7fe f9fa 	bl	8003934 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	429a      	cmp	r2, r3
 800554a:	d213      	bcs.n	8005574 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e007      	b.n	8005584 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b20      	cmp	r3, #32
 8005580:	d1cf      	bne.n	8005522 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d148      	bne.n	8005638 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055a6:	e01c      	b.n	80055e2 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	d018      	beq.n	80055e2 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d007      	beq.n	80055c6 <I2C_IsAcknowledgeFailed+0x3a>
 80055b6:	f7fe f9bd 	bl	8003934 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d20d      	bcs.n	80055e2 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e02b      	b.n	800563a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b20      	cmp	r3, #32
 80055ee:	d1db      	bne.n	80055a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2210      	movs	r2, #16
 80055f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2220      	movs	r2, #32
 80055fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fee9 	bl	80053d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6859      	ldr	r1, [r3, #4]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <I2C_IsAcknowledgeFailed+0xb8>)
 8005612:	400b      	ands	r3, r1
 8005614:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2204      	movs	r2, #4
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	fe00e800 	.word	0xfe00e800

08005648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	817b      	strh	r3, [r7, #10]
 8005656:	4613      	mov	r3, r2
 8005658:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	0d5b      	lsrs	r3, r3, #21
 8005664:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005668:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <I2C_TransferConfig+0x58>)
 800566a:	430b      	orrs	r3, r1
 800566c:	43db      	mvns	r3, r3
 800566e:	ea02 0103 	and.w	r1, r2, r3
 8005672:	897b      	ldrh	r3, [r7, #10]
 8005674:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005678:	7a7b      	ldrb	r3, [r7, #9]
 800567a:	041b      	lsls	r3, r3, #16
 800567c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	431a      	orrs	r2, r3
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	03ff63ff 	.word	0x03ff63ff

080056a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d138      	bne.n	800572c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e032      	b.n	800572e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2224      	movs	r2, #36	; 0x24
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f022 0201 	bic.w	r2, r2, #1
 80056e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	430a      	orrs	r2, r1
 8005706:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0201 	orr.w	r2, r2, #1
 8005716:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	e000      	b.n	800572e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800572c:	2302      	movs	r3, #2
  }
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b20      	cmp	r3, #32
 8005752:	d139      	bne.n	80057c8 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 800575e:	2302      	movs	r3, #2
 8005760:	e033      	b.n	80057ca <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2224      	movs	r2, #36	; 0x24
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
	...

080057d8 <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	2300      	movs	r3, #0
 80057e6:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e0c7      	b.n	8005982 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f005 f974 	bl	800aaf4 <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005822:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6999      	ldr	r1, [r3, #24]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005838:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6899      	ldr	r1, [r3, #8]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b4e      	ldr	r3, [pc, #312]	; (800598c <HAL_LTDC_Init+0x1b4>)
 8005854:	400b      	ands	r3, r1
 8005856:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6899      	ldr	r1, [r3, #8]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68d9      	ldr	r1, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	4b42      	ldr	r3, [pc, #264]	; (800598c <HAL_LTDC_Init+0x1b4>)
 8005882:	400b      	ands	r3, r1
 8005884:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	041b      	lsls	r3, r3, #16
 800588c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68d9      	ldr	r1, [r3, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6919      	ldr	r1, [r3, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_LTDC_Init+0x1b4>)
 80058b0:	400b      	ands	r3, r1
 80058b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	041b      	lsls	r3, r3, #16
 80058ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6919      	ldr	r1, [r3, #16]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6959      	ldr	r1, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b2b      	ldr	r3, [pc, #172]	; (800598c <HAL_LTDC_Init+0x1b4>)
 80058de:	400b      	ands	r3, r1
 80058e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6959      	ldr	r1, [r3, #20]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005906:	021b      	lsls	r3, r3, #8
 8005908:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005910:	041b      	lsls	r3, r3, #16
 8005912:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0204 	orr.w	r2, r2, #4
 800594e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0202 	orr.w	r2, r2, #2
 800595e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699a      	ldr	r2, [r3, #24]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	f000f800 	.word	0xf000f800

08005990 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d025      	beq.n	80059f2 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01e      	beq.n	80059f2 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0204 	bic.w	r2, r2, #4
 80059c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2204      	movs	r2, #4
 80059ca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80059d2:	f043 0201 	orr.w	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2204      	movs	r2, #4
 80059e0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f87b 	bl	8005ae8 <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d025      	beq.n	8005a4c <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01e      	beq.n	8005a4c <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0202 	bic.w	r2, r2, #2
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2202      	movs	r2, #2
 8005a24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a2c:	f043 0202 	orr.w	r2, r3, #2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2204      	movs	r2, #4
 8005a3a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f84e 	bl	8005ae8 <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01d      	beq.n	8005a96 <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d016      	beq.n	8005a96 <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f833 	bl	8005afc <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	f003 0308 	and.w	r3, r3, #8
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d016      	beq.n	8005ae0 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0208 	bic.w	r2, r2, #8
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f818 	bl	8005b10 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8005b24:	b5b0      	push	{r4, r5, r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d101      	bne.n	8005b3e <HAL_LTDC_ConfigLayer+0x1a>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e02c      	b.n	8005b98 <HAL_LTDC_ConfigLayer+0x74>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2202      	movs	r2, #2
 8005b4a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2134      	movs	r1, #52	; 0x34
 8005b54:	fb01 f303 	mul.w	r3, r1, r3
 8005b58:	4413      	add	r3, r2
 8005b5a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4614      	mov	r4, r2
 8005b62:	461d      	mov	r5, r3
 8005b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f81f 	bl	8005bbc <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bdb0      	pop	{r4, r5, r7, pc}

08005ba0 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005bae:	b2db      	uxtb	r3, r3
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b089      	sub	sp, #36	; 0x24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be4:	4413      	add	r3, r2
 8005be6:	041b      	lsls	r3, r3, #16
 8005be8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	01db      	lsls	r3, r3, #7
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3384      	adds	r3, #132	; 0x84
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	6812      	ldr	r2, [r2, #0]
 8005bfe:	4611      	mov	r1, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	01d2      	lsls	r2, r2, #7
 8005c04:	440a      	add	r2, r1
 8005c06:	3284      	adds	r2, #132	; 0x84
 8005c08:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c0c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	0c1b      	lsrs	r3, r3, #16
 8005c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1e:	4413      	add	r3, r2
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4619      	mov	r1, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	01db      	lsls	r3, r3, #7
 8005c2c:	440b      	add	r3, r1
 8005c2e:	3384      	adds	r3, #132	; 0x84
 8005c30:	4619      	mov	r1, r3
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c46:	4413      	add	r3, r2
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	461a      	mov	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	01db      	lsls	r3, r3, #7
 8005c56:	4413      	add	r3, r2
 8005c58:	3384      	adds	r3, #132	; 0x84
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	4611      	mov	r1, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	01d2      	lsls	r2, r2, #7
 8005c66:	440a      	add	r2, r1
 8005c68:	3284      	adds	r2, #132	; 0x84
 8005c6a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c6e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005c7e:	4413      	add	r3, r2
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4619      	mov	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	01db      	lsls	r3, r3, #7
 8005c8c:	440b      	add	r3, r1
 8005c8e:	3384      	adds	r3, #132	; 0x84
 8005c90:	4619      	mov	r1, r3
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	01db      	lsls	r3, r3, #7
 8005ca2:	4413      	add	r3, r2
 8005ca4:	3384      	adds	r3, #132	; 0x84
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	4611      	mov	r1, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	01d2      	lsls	r2, r2, #7
 8005cb2:	440a      	add	r2, r1
 8005cb4:	3284      	adds	r2, #132	; 0x84
 8005cb6:	f023 0307 	bic.w	r3, r3, #7
 8005cba:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	01db      	lsls	r3, r3, #7
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3384      	adds	r3, #132	; 0x84
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005ce2:	041b      	lsls	r3, r3, #16
 8005ce4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	061b      	lsls	r3, r3, #24
 8005cec:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	01db      	lsls	r3, r3, #7
 8005cf8:	4413      	add	r3, r2
 8005cfa:	3384      	adds	r3, #132	; 0x84
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	01db      	lsls	r3, r3, #7
 8005d08:	4413      	add	r3, r2
 8005d0a:	3384      	adds	r3, #132	; 0x84
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d18:	461a      	mov	r2, r3
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	431a      	orrs	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4619      	mov	r1, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	01db      	lsls	r3, r3, #7
 8005d2c:	440b      	add	r3, r1
 8005d2e:	3384      	adds	r3, #132	; 0x84
 8005d30:	4619      	mov	r1, r3
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	01db      	lsls	r3, r3, #7
 8005d42:	4413      	add	r3, r2
 8005d44:	3384      	adds	r3, #132	; 0x84
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	6812      	ldr	r2, [r2, #0]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	01d2      	lsls	r2, r2, #7
 8005d52:	440a      	add	r2, r1
 8005d54:	3284      	adds	r2, #132	; 0x84
 8005d56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d5a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	01db      	lsls	r3, r3, #7
 8005d66:	4413      	add	r3, r2
 8005d68:	3384      	adds	r3, #132	; 0x84
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	461a      	mov	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	01db      	lsls	r3, r3, #7
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3384      	adds	r3, #132	; 0x84
 8005d80:	69da      	ldr	r2, [r3, #28]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4619      	mov	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	01db      	lsls	r3, r3, #7
 8005d8c:	440b      	add	r3, r1
 8005d8e:	3384      	adds	r3, #132	; 0x84
 8005d90:	4619      	mov	r1, r3
 8005d92:	4b58      	ldr	r3, [pc, #352]	; (8005ef4 <LTDC_SetConfig+0x338>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	68f9      	ldr	r1, [r7, #12]
 8005da2:	6809      	ldr	r1, [r1, #0]
 8005da4:	4608      	mov	r0, r1
 8005da6:	6879      	ldr	r1, [r7, #4]
 8005da8:	01c9      	lsls	r1, r1, #7
 8005daa:	4401      	add	r1, r0
 8005dac:	3184      	adds	r1, #132	; 0x84
 8005dae:	4313      	orrs	r3, r2
 8005db0:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	01db      	lsls	r3, r3, #7
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3384      	adds	r3, #132	; 0x84
 8005dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	01db      	lsls	r3, r3, #7
 8005dcc:	4413      	add	r3, r2
 8005dce:	3384      	adds	r3, #132	; 0x84
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	01db      	lsls	r3, r3, #7
 8005de0:	4413      	add	r3, r2
 8005de2:	3384      	adds	r3, #132	; 0x84
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8005df4:	2304      	movs	r3, #4
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e01b      	b.n	8005e32 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d102      	bne.n	8005e08 <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8005e02:	2303      	movs	r3, #3
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	e014      	b.n	8005e32 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b04      	cmp	r3, #4
 8005e0e:	d00b      	beq.n	8005e28 <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d007      	beq.n	8005e28 <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d003      	beq.n	8005e28 <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e24:	2b07      	cmp	r3, #7
 8005e26:	d102      	bne.n	8005e2e <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	e001      	b.n	8005e32 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	01db      	lsls	r3, r3, #7
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3384      	adds	r3, #132	; 0x84
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	4611      	mov	r1, r2
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	01d2      	lsls	r2, r2, #7
 8005e4c:	440a      	add	r2, r1
 8005e4e:	3284      	adds	r2, #132	; 0x84
 8005e50:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005e54:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	fb02 f303 	mul.w	r3, r2, r3
 8005e60:	041a      	lsls	r2, r3, #16
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	6859      	ldr	r1, [r3, #4]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	1acb      	subs	r3, r1, r3
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	3303      	adds	r3, #3
 8005e74:	68f9      	ldr	r1, [r7, #12]
 8005e76:	6809      	ldr	r1, [r1, #0]
 8005e78:	4608      	mov	r0, r1
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	01c9      	lsls	r1, r1, #7
 8005e7e:	4401      	add	r1, r0
 8005e80:	3184      	adds	r1, #132	; 0x84
 8005e82:	4313      	orrs	r3, r2
 8005e84:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	4413      	add	r3, r2
 8005e92:	3384      	adds	r3, #132	; 0x84
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	01db      	lsls	r3, r3, #7
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3384      	adds	r3, #132	; 0x84
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4b14      	ldr	r3, [pc, #80]	; (8005ef8 <LTDC_SetConfig+0x33c>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	01db      	lsls	r3, r3, #7
 8005eb6:	4413      	add	r3, r2
 8005eb8:	3384      	adds	r3, #132	; 0x84
 8005eba:	461a      	mov	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	01db      	lsls	r3, r3, #7
 8005ecc:	4413      	add	r3, r2
 8005ece:	3384      	adds	r3, #132	; 0x84
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	01d2      	lsls	r2, r2, #7
 8005edc:	440a      	add	r2, r1
 8005ede:	3284      	adds	r2, #132	; 0x84
 8005ee0:	f043 0301 	orr.w	r3, r3, #1
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	3724      	adds	r7, #36	; 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	fffff8f8 	.word	0xfffff8f8
 8005ef8:	fffff800 	.word	0xfffff800

08005efc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f00:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f0a:	6013      	str	r3, [r2, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40007000 	.word	0x40007000

08005f1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f26:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f30:	6413      	str	r3, [r2, #64]	; 0x40
 8005f32:	4b20      	ldr	r3, [pc, #128]	; (8005fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f3a:	603b      	str	r3, [r7, #0]
 8005f3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f3e:	4b1e      	ldr	r3, [pc, #120]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f4a:	f7fd fcf3 	bl	8003934 <HAL_GetTick>
 8005f4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f50:	e009      	b.n	8005f66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f52:	f7fd fcef 	bl	8003934 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f60:	d901      	bls.n	8005f66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e022      	b.n	8005fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f66:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f72:	d1ee      	bne.n	8005f52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005f74:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0f      	ldr	r2, [pc, #60]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f80:	f7fd fcd8 	bl	8003934 <HAL_GetTick>
 8005f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f86:	e009      	b.n	8005f9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f88:	f7fd fcd4 	bl	8003934 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f96:	d901      	bls.n	8005f9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e007      	b.n	8005fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fa8:	d1ee      	bne.n	8005f88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3708      	adds	r7, #8
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	40007000 	.word	0x40007000

08005fbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e25c      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8087 	beq.w	80060ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fe0:	4b96      	ldr	r3, [pc, #600]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f003 030c 	and.w	r3, r3, #12
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d00c      	beq.n	8006006 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fec:	4b93      	ldr	r3, [pc, #588]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 030c 	and.w	r3, r3, #12
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d112      	bne.n	800601e <HAL_RCC_OscConfig+0x62>
 8005ff8:	4b90      	ldr	r3, [pc, #576]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006004:	d10b      	bne.n	800601e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006006:	4b8d      	ldr	r3, [pc, #564]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d06c      	beq.n	80060ec <HAL_RCC_OscConfig+0x130>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d168      	bne.n	80060ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e236      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006026:	d106      	bne.n	8006036 <HAL_RCC_OscConfig+0x7a>
 8006028:	4b84      	ldr	r3, [pc, #528]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a83      	ldr	r2, [pc, #524]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800602e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006032:	6013      	str	r3, [r2, #0]
 8006034:	e02e      	b.n	8006094 <HAL_RCC_OscConfig+0xd8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10c      	bne.n	8006058 <HAL_RCC_OscConfig+0x9c>
 800603e:	4b7f      	ldr	r3, [pc, #508]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a7e      	ldr	r2, [pc, #504]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	4b7c      	ldr	r3, [pc, #496]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a7b      	ldr	r2, [pc, #492]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	e01d      	b.n	8006094 <HAL_RCC_OscConfig+0xd8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006060:	d10c      	bne.n	800607c <HAL_RCC_OscConfig+0xc0>
 8006062:	4b76      	ldr	r3, [pc, #472]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a75      	ldr	r2, [pc, #468]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	4b73      	ldr	r3, [pc, #460]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a72      	ldr	r2, [pc, #456]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006078:	6013      	str	r3, [r2, #0]
 800607a:	e00b      	b.n	8006094 <HAL_RCC_OscConfig+0xd8>
 800607c:	4b6f      	ldr	r3, [pc, #444]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a6e      	ldr	r2, [pc, #440]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	4b6c      	ldr	r3, [pc, #432]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a6b      	ldr	r2, [pc, #428]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800608e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d013      	beq.n	80060c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609c:	f7fd fc4a 	bl	8003934 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060a4:	f7fd fc46 	bl	8003934 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b64      	cmp	r3, #100	; 0x64
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e1ea      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b6:	4b61      	ldr	r3, [pc, #388]	; (800623c <HAL_RCC_OscConfig+0x280>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0xe8>
 80060c2:	e014      	b.n	80060ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c4:	f7fd fc36 	bl	8003934 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060cc:	f7fd fc32 	bl	8003934 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b64      	cmp	r3, #100	; 0x64
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e1d6      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060de:	4b57      	ldr	r3, [pc, #348]	; (800623c <HAL_RCC_OscConfig+0x280>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0x110>
 80060ea:	e000      	b.n	80060ee <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d069      	beq.n	80061ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060fa:	4b50      	ldr	r3, [pc, #320]	; (800623c <HAL_RCC_OscConfig+0x280>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 030c 	and.w	r3, r3, #12
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006106:	4b4d      	ldr	r3, [pc, #308]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
 800610e:	2b08      	cmp	r3, #8
 8006110:	d11c      	bne.n	800614c <HAL_RCC_OscConfig+0x190>
 8006112:	4b4a      	ldr	r3, [pc, #296]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611a:	2b00      	cmp	r3, #0
 800611c:	d116      	bne.n	800614c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800611e:	4b47      	ldr	r3, [pc, #284]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d005      	beq.n	8006136 <HAL_RCC_OscConfig+0x17a>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	2b01      	cmp	r3, #1
 8006130:	d001      	beq.n	8006136 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e1aa      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	00db      	lsls	r3, r3, #3
 8006144:	493d      	ldr	r1, [pc, #244]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006146:	4313      	orrs	r3, r2
 8006148:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800614a:	e040      	b.n	80061ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d023      	beq.n	800619c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006154:	4b39      	ldr	r3, [pc, #228]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a38      	ldr	r2, [pc, #224]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800615a:	f043 0301 	orr.w	r3, r3, #1
 800615e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006160:	f7fd fbe8 	bl	8003934 <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006168:	f7fd fbe4 	bl	8003934 <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e188      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617a:	4b30      	ldr	r3, [pc, #192]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0f0      	beq.n	8006168 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006186:	4b2d      	ldr	r3, [pc, #180]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	00db      	lsls	r3, r3, #3
 8006194:	4929      	ldr	r1, [pc, #164]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006196:	4313      	orrs	r3, r2
 8006198:	600b      	str	r3, [r1, #0]
 800619a:	e018      	b.n	80061ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800619c:	4b27      	ldr	r3, [pc, #156]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a26      	ldr	r2, [pc, #152]	; (800623c <HAL_RCC_OscConfig+0x280>)
 80061a2:	f023 0301 	bic.w	r3, r3, #1
 80061a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061a8:	f7fd fbc4 	bl	8003934 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b0:	f7fd fbc0 	bl	8003934 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e164      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <HAL_RCC_OscConfig+0x280>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0308 	and.w	r3, r3, #8
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d038      	beq.n	800624c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d019      	beq.n	8006216 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e2:	4b16      	ldr	r3, [pc, #88]	; (800623c <HAL_RCC_OscConfig+0x280>)
 80061e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061e6:	4a15      	ldr	r2, [pc, #84]	; (800623c <HAL_RCC_OscConfig+0x280>)
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ee:	f7fd fba1 	bl	8003934 <HAL_GetTick>
 80061f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f4:	e008      	b.n	8006208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f6:	f7fd fb9d 	bl	8003934 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	2b02      	cmp	r3, #2
 8006202:	d901      	bls.n	8006208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e141      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006208:	4b0c      	ldr	r3, [pc, #48]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800620a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d0f0      	beq.n	80061f6 <HAL_RCC_OscConfig+0x23a>
 8006214:	e01a      	b.n	800624c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006216:	4b09      	ldr	r3, [pc, #36]	; (800623c <HAL_RCC_OscConfig+0x280>)
 8006218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621a:	4a08      	ldr	r2, [pc, #32]	; (800623c <HAL_RCC_OscConfig+0x280>)
 800621c:	f023 0301 	bic.w	r3, r3, #1
 8006220:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006222:	f7fd fb87 	bl	8003934 <HAL_GetTick>
 8006226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006228:	e00a      	b.n	8006240 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800622a:	f7fd fb83 	bl	8003934 <HAL_GetTick>
 800622e:	4602      	mov	r2, r0
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	2b02      	cmp	r3, #2
 8006236:	d903      	bls.n	8006240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e127      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
 800623c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006240:	4b94      	ldr	r3, [pc, #592]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ee      	bne.n	800622a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 80a4 	beq.w	80063a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800625a:	4b8e      	ldr	r3, [pc, #568]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d10d      	bne.n	8006282 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006266:	4b8b      	ldr	r3, [pc, #556]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	4a8a      	ldr	r2, [pc, #552]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800626c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006270:	6413      	str	r3, [r2, #64]	; 0x40
 8006272:	4b88      	ldr	r3, [pc, #544]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800627e:	2301      	movs	r3, #1
 8006280:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006282:	4b85      	ldr	r3, [pc, #532]	; (8006498 <HAL_RCC_OscConfig+0x4dc>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628a:	2b00      	cmp	r3, #0
 800628c:	d118      	bne.n	80062c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800628e:	4b82      	ldr	r3, [pc, #520]	; (8006498 <HAL_RCC_OscConfig+0x4dc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a81      	ldr	r2, [pc, #516]	; (8006498 <HAL_RCC_OscConfig+0x4dc>)
 8006294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800629a:	f7fd fb4b 	bl	8003934 <HAL_GetTick>
 800629e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062a0:	e008      	b.n	80062b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80062a2:	f7fd fb47 	bl	8003934 <HAL_GetTick>
 80062a6:	4602      	mov	r2, r0
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	2b64      	cmp	r3, #100	; 0x64
 80062ae:	d901      	bls.n	80062b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e0eb      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062b4:	4b78      	ldr	r3, [pc, #480]	; (8006498 <HAL_RCC_OscConfig+0x4dc>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d0f0      	beq.n	80062a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d106      	bne.n	80062d6 <HAL_RCC_OscConfig+0x31a>
 80062c8:	4b72      	ldr	r3, [pc, #456]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062cc:	4a71      	ldr	r2, [pc, #452]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	6713      	str	r3, [r2, #112]	; 0x70
 80062d4:	e02d      	b.n	8006332 <HAL_RCC_OscConfig+0x376>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10c      	bne.n	80062f8 <HAL_RCC_OscConfig+0x33c>
 80062de:	4b6d      	ldr	r3, [pc, #436]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062e2:	4a6c      	ldr	r2, [pc, #432]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	6713      	str	r3, [r2, #112]	; 0x70
 80062ea:	4b6a      	ldr	r3, [pc, #424]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	4a69      	ldr	r2, [pc, #420]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80062f0:	f023 0304 	bic.w	r3, r3, #4
 80062f4:	6713      	str	r3, [r2, #112]	; 0x70
 80062f6:	e01c      	b.n	8006332 <HAL_RCC_OscConfig+0x376>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b05      	cmp	r3, #5
 80062fe:	d10c      	bne.n	800631a <HAL_RCC_OscConfig+0x35e>
 8006300:	4b64      	ldr	r3, [pc, #400]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	4a63      	ldr	r2, [pc, #396]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006306:	f043 0304 	orr.w	r3, r3, #4
 800630a:	6713      	str	r3, [r2, #112]	; 0x70
 800630c:	4b61      	ldr	r3, [pc, #388]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	4a60      	ldr	r2, [pc, #384]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	6713      	str	r3, [r2, #112]	; 0x70
 8006318:	e00b      	b.n	8006332 <HAL_RCC_OscConfig+0x376>
 800631a:	4b5e      	ldr	r3, [pc, #376]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800631c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631e:	4a5d      	ldr	r2, [pc, #372]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006320:	f023 0301 	bic.w	r3, r3, #1
 8006324:	6713      	str	r3, [r2, #112]	; 0x70
 8006326:	4b5b      	ldr	r3, [pc, #364]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632a:	4a5a      	ldr	r2, [pc, #360]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800632c:	f023 0304 	bic.w	r3, r3, #4
 8006330:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d015      	beq.n	8006366 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800633a:	f7fd fafb 	bl	8003934 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006340:	e00a      	b.n	8006358 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006342:	f7fd faf7 	bl	8003934 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006350:	4293      	cmp	r3, r2
 8006352:	d901      	bls.n	8006358 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e099      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006358:	4b4e      	ldr	r3, [pc, #312]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0ee      	beq.n	8006342 <HAL_RCC_OscConfig+0x386>
 8006364:	e014      	b.n	8006390 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006366:	f7fd fae5 	bl	8003934 <HAL_GetTick>
 800636a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636c:	e00a      	b.n	8006384 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800636e:	f7fd fae1 	bl	8003934 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	f241 3288 	movw	r2, #5000	; 0x1388
 800637c:	4293      	cmp	r3, r2
 800637e:	d901      	bls.n	8006384 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e083      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006384:	4b43      	ldr	r3, [pc, #268]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1ee      	bne.n	800636e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006390:	7dfb      	ldrb	r3, [r7, #23]
 8006392:	2b01      	cmp	r3, #1
 8006394:	d105      	bne.n	80063a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006396:	4b3f      	ldr	r3, [pc, #252]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	4a3e      	ldr	r2, [pc, #248]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800639c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d06f      	beq.n	800648a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80063aa:	4b3a      	ldr	r3, [pc, #232]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 030c 	and.w	r3, r3, #12
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d067      	beq.n	8006486 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d149      	bne.n	8006452 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063be:	4b35      	ldr	r3, [pc, #212]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a34      	ldr	r2, [pc, #208]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80063c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ca:	f7fd fab3 	bl	8003934 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063d2:	f7fd faaf 	bl	8003934 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e053      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f0      	bne.n	80063d2 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	019b      	lsls	r3, r3, #6
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	3b01      	subs	r3, #1
 800640a:	041b      	lsls	r3, r3, #16
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	061b      	lsls	r3, r3, #24
 8006414:	4313      	orrs	r3, r2
 8006416:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006418:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800641c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800641e:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a1c      	ldr	r2, [pc, #112]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642a:	f7fd fa83 	bl	8003934 <HAL_GetTick>
 800642e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006430:	e008      	b.n	8006444 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006432:	f7fd fa7f 	bl	8003934 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d901      	bls.n	8006444 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e023      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006444:	4b13      	ldr	r3, [pc, #76]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d0f0      	beq.n	8006432 <HAL_RCC_OscConfig+0x476>
 8006450:	e01b      	b.n	800648a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006452:	4b10      	ldr	r3, [pc, #64]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a0f      	ldr	r2, [pc, #60]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 8006458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800645c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fd fa69 	bl	8003934 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006466:	f7fd fa65 	bl	8003934 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e009      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_RCC_OscConfig+0x4d8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <HAL_RCC_OscConfig+0x4aa>
 8006484:	e001      	b.n	800648a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3718      	adds	r7, #24
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40023800 	.word	0x40023800
 8006498:	40007000 	.word	0x40007000

0800649c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e0ce      	b.n	8006652 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064b4:	4b69      	ldr	r3, [pc, #420]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 030f 	and.w	r3, r3, #15
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d910      	bls.n	80064e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064c2:	4b66      	ldr	r3, [pc, #408]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f023 020f 	bic.w	r2, r3, #15
 80064ca:	4964      	ldr	r1, [pc, #400]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064d2:	4b62      	ldr	r3, [pc, #392]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 030f 	and.w	r3, r3, #15
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d001      	beq.n	80064e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e0b6      	b.n	8006652 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d020      	beq.n	8006532 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064fc:	4b58      	ldr	r3, [pc, #352]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a57      	ldr	r2, [pc, #348]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006514:	4b52      	ldr	r3, [pc, #328]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a51      	ldr	r2, [pc, #324]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800651a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800651e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006520:	4b4f      	ldr	r3, [pc, #316]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	494c      	ldr	r1, [pc, #304]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800652e:	4313      	orrs	r3, r2
 8006530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d040      	beq.n	80065c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d107      	bne.n	8006556 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006546:	4b46      	ldr	r3, [pc, #280]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d115      	bne.n	800657e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e07d      	b.n	8006652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d107      	bne.n	800656e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800655e:	4b40      	ldr	r3, [pc, #256]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e071      	b.n	8006652 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800656e:	4b3c      	ldr	r3, [pc, #240]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e069      	b.n	8006652 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800657e:	4b38      	ldr	r3, [pc, #224]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f023 0203 	bic.w	r2, r3, #3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	4935      	ldr	r1, [pc, #212]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800658c:	4313      	orrs	r3, r2
 800658e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006590:	f7fd f9d0 	bl	8003934 <HAL_GetTick>
 8006594:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006596:	e00a      	b.n	80065ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006598:	f7fd f9cc 	bl	8003934 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e051      	b.n	8006652 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ae:	4b2c      	ldr	r3, [pc, #176]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 020c 	and.w	r2, r3, #12
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	429a      	cmp	r2, r3
 80065be:	d1eb      	bne.n	8006598 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065c0:	4b26      	ldr	r3, [pc, #152]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d210      	bcs.n	80065f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ce:	4b23      	ldr	r3, [pc, #140]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f023 020f 	bic.w	r2, r3, #15
 80065d6:	4921      	ldr	r1, [pc, #132]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	4313      	orrs	r3, r2
 80065dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065de:	4b1f      	ldr	r3, [pc, #124]	; (800665c <HAL_RCC_ClockConfig+0x1c0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d001      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e030      	b.n	8006652 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065fc:	4b18      	ldr	r3, [pc, #96]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	4915      	ldr	r1, [pc, #84]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800660a:	4313      	orrs	r3, r2
 800660c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d009      	beq.n	800662e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	00db      	lsls	r3, r3, #3
 8006628:	490d      	ldr	r1, [pc, #52]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 800662a:	4313      	orrs	r3, r2
 800662c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800662e:	f000 f81d 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8006632:	4602      	mov	r2, r0
 8006634:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <HAL_RCC_ClockConfig+0x1c4>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	f003 030f 	and.w	r3, r3, #15
 800663e:	4909      	ldr	r1, [pc, #36]	; (8006664 <HAL_RCC_ClockConfig+0x1c8>)
 8006640:	5ccb      	ldrb	r3, [r1, r3]
 8006642:	fa22 f303 	lsr.w	r3, r2, r3
 8006646:	4a08      	ldr	r2, [pc, #32]	; (8006668 <HAL_RCC_ClockConfig+0x1cc>)
 8006648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800664a:	200f      	movs	r0, #15
 800664c:	f7fd f92e 	bl	80038ac <HAL_InitTick>

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40023c00 	.word	0x40023c00
 8006660:	40023800 	.word	0x40023800
 8006664:	0801138c 	.word	0x0801138c
 8006668:	20000058 	.word	0x20000058

0800666c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800666c:	b5b0      	push	{r4, r5, r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006672:	2100      	movs	r1, #0
 8006674:	6079      	str	r1, [r7, #4]
 8006676:	2100      	movs	r1, #0
 8006678:	60f9      	str	r1, [r7, #12]
 800667a:	2100      	movs	r1, #0
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800667e:	2100      	movs	r1, #0
 8006680:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006682:	4952      	ldr	r1, [pc, #328]	; (80067cc <HAL_RCC_GetSysClockFreq+0x160>)
 8006684:	6889      	ldr	r1, [r1, #8]
 8006686:	f001 010c 	and.w	r1, r1, #12
 800668a:	2908      	cmp	r1, #8
 800668c:	d00d      	beq.n	80066aa <HAL_RCC_GetSysClockFreq+0x3e>
 800668e:	2908      	cmp	r1, #8
 8006690:	f200 8094 	bhi.w	80067bc <HAL_RCC_GetSysClockFreq+0x150>
 8006694:	2900      	cmp	r1, #0
 8006696:	d002      	beq.n	800669e <HAL_RCC_GetSysClockFreq+0x32>
 8006698:	2904      	cmp	r1, #4
 800669a:	d003      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0x38>
 800669c:	e08e      	b.n	80067bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800669e:	4b4c      	ldr	r3, [pc, #304]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80066a0:	60bb      	str	r3, [r7, #8]
       break;
 80066a2:	e08e      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066a4:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80066a6:	60bb      	str	r3, [r7, #8]
      break;
 80066a8:	e08b      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066aa:	4948      	ldr	r1, [pc, #288]	; (80067cc <HAL_RCC_GetSysClockFreq+0x160>)
 80066ac:	6849      	ldr	r1, [r1, #4]
 80066ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80066b2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80066b4:	4945      	ldr	r1, [pc, #276]	; (80067cc <HAL_RCC_GetSysClockFreq+0x160>)
 80066b6:	6849      	ldr	r1, [r1, #4]
 80066b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80066bc:	2900      	cmp	r1, #0
 80066be:	d024      	beq.n	800670a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c0:	4942      	ldr	r1, [pc, #264]	; (80067cc <HAL_RCC_GetSysClockFreq+0x160>)
 80066c2:	6849      	ldr	r1, [r1, #4]
 80066c4:	0989      	lsrs	r1, r1, #6
 80066c6:	4608      	mov	r0, r1
 80066c8:	f04f 0100 	mov.w	r1, #0
 80066cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80066d0:	f04f 0500 	mov.w	r5, #0
 80066d4:	ea00 0204 	and.w	r2, r0, r4
 80066d8:	ea01 0305 	and.w	r3, r1, r5
 80066dc:	493d      	ldr	r1, [pc, #244]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80066de:	fb01 f003 	mul.w	r0, r1, r3
 80066e2:	2100      	movs	r1, #0
 80066e4:	fb01 f102 	mul.w	r1, r1, r2
 80066e8:	1844      	adds	r4, r0, r1
 80066ea:	493a      	ldr	r1, [pc, #232]	; (80067d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80066ec:	fba2 0101 	umull	r0, r1, r2, r1
 80066f0:	1863      	adds	r3, r4, r1
 80066f2:	4619      	mov	r1, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	461a      	mov	r2, r3
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	f7fa fa52 	bl	8000ba4 <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	4613      	mov	r3, r2
 8006706:	60fb      	str	r3, [r7, #12]
 8006708:	e04a      	b.n	80067a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800670a:	4b30      	ldr	r3, [pc, #192]	; (80067cc <HAL_RCC_GetSysClockFreq+0x160>)
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	099b      	lsrs	r3, r3, #6
 8006710:	461a      	mov	r2, r3
 8006712:	f04f 0300 	mov.w	r3, #0
 8006716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800671a:	f04f 0100 	mov.w	r1, #0
 800671e:	ea02 0400 	and.w	r4, r2, r0
 8006722:	ea03 0501 	and.w	r5, r3, r1
 8006726:	4620      	mov	r0, r4
 8006728:	4629      	mov	r1, r5
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	014b      	lsls	r3, r1, #5
 8006734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006738:	0142      	lsls	r2, r0, #5
 800673a:	4610      	mov	r0, r2
 800673c:	4619      	mov	r1, r3
 800673e:	1b00      	subs	r0, r0, r4
 8006740:	eb61 0105 	sbc.w	r1, r1, r5
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	018b      	lsls	r3, r1, #6
 800674e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006752:	0182      	lsls	r2, r0, #6
 8006754:	1a12      	subs	r2, r2, r0
 8006756:	eb63 0301 	sbc.w	r3, r3, r1
 800675a:	f04f 0000 	mov.w	r0, #0
 800675e:	f04f 0100 	mov.w	r1, #0
 8006762:	00d9      	lsls	r1, r3, #3
 8006764:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006768:	00d0      	lsls	r0, r2, #3
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	1912      	adds	r2, r2, r4
 8006770:	eb45 0303 	adc.w	r3, r5, r3
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	0299      	lsls	r1, r3, #10
 800677e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006782:	0290      	lsls	r0, r2, #10
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	461a      	mov	r2, r3
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	f7fa fa06 	bl	8000ba4 <__aeabi_uldivmod>
 8006798:	4602      	mov	r2, r0
 800679a:	460b      	mov	r3, r1
 800679c:	4613      	mov	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80067a0:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <HAL_RCC_GetSysClockFreq+0x160>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	3301      	adds	r3, #1
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	60bb      	str	r3, [r7, #8]
      break;
 80067ba:	e002      	b.n	80067c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067bc:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80067be:	60bb      	str	r3, [r7, #8]
      break;
 80067c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067c2:	68bb      	ldr	r3, [r7, #8]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bdb0      	pop	{r4, r5, r7, pc}
 80067cc:	40023800 	.word	0x40023800
 80067d0:	00f42400 	.word	0x00f42400
 80067d4:	017d7840 	.word	0x017d7840

080067d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067d8:	b480      	push	{r7}
 80067da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067dc:	4b03      	ldr	r3, [pc, #12]	; (80067ec <HAL_RCC_GetHCLKFreq+0x14>)
 80067de:	681b      	ldr	r3, [r3, #0]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	20000058 	.word	0x20000058

080067f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80067f4:	f7ff fff0 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 80067f8:	4602      	mov	r2, r0
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	0a9b      	lsrs	r3, r3, #10
 8006800:	f003 0307 	and.w	r3, r3, #7
 8006804:	4903      	ldr	r1, [pc, #12]	; (8006814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006806:	5ccb      	ldrb	r3, [r1, r3]
 8006808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40023800 	.word	0x40023800
 8006814:	0801139c 	.word	0x0801139c

08006818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800681c:	f7ff ffdc 	bl	80067d8 <HAL_RCC_GetHCLKFreq>
 8006820:	4602      	mov	r2, r0
 8006822:	4b05      	ldr	r3, [pc, #20]	; (8006838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	0b5b      	lsrs	r3, r3, #13
 8006828:	f003 0307 	and.w	r3, r3, #7
 800682c:	4903      	ldr	r1, [pc, #12]	; (800683c <HAL_RCC_GetPCLK2Freq+0x24>)
 800682e:	5ccb      	ldrb	r3, [r1, r3]
 8006830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006834:	4618      	mov	r0, r3
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40023800 	.word	0x40023800
 800683c:	0801139c 	.word	0x0801139c

08006840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b088      	sub	sp, #32
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006854:	2300      	movs	r3, #0
 8006856:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006858:	2300      	movs	r3, #0
 800685a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d012      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006868:	4b69      	ldr	r3, [pc, #420]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	4a68      	ldr	r2, [pc, #416]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800686e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006872:	6093      	str	r3, [r2, #8]
 8006874:	4b66      	ldr	r3, [pc, #408]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006876:	689a      	ldr	r2, [r3, #8]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800687c:	4964      	ldr	r1, [pc, #400]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800687e:	4313      	orrs	r3, r2
 8006880:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800688a:	2301      	movs	r3, #1
 800688c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d017      	beq.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800689a:	4b5d      	ldr	r3, [pc, #372]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800689c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a8:	4959      	ldr	r1, [pc, #356]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b8:	d101      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80068ba:	2301      	movs	r3, #1
 80068bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d017      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80068d6:	4b4e      	ldr	r3, [pc, #312]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e4:	494a      	ldr	r1, [pc, #296]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80068e6:	4313      	orrs	r3, r2
 80068e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068f4:	d101      	bne.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80068f6:	2301      	movs	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006902:	2301      	movs	r3, #1
 8006904:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006912:	2301      	movs	r3, #1
 8006914:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	f000 808b 	beq.w	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006924:	4b3a      	ldr	r3, [pc, #232]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	4a39      	ldr	r2, [pc, #228]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800692a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692e:	6413      	str	r3, [r2, #64]	; 0x40
 8006930:	4b37      	ldr	r3, [pc, #220]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006938:	60bb      	str	r3, [r7, #8]
 800693a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800693c:	4b35      	ldr	r3, [pc, #212]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a34      	ldr	r2, [pc, #208]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006948:	f7fc fff4 	bl	8003934 <HAL_GetTick>
 800694c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006950:	f7fc fff0 	bl	8003934 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e355      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006962:	4b2c      	ldr	r3, [pc, #176]	; (8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0f0      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800696e:	4b28      	ldr	r3, [pc, #160]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006976:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d035      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	429a      	cmp	r2, r3
 800698a:	d02e      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800698c:	4b20      	ldr	r3, [pc, #128]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006994:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006996:	4b1e      	ldr	r3, [pc, #120]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a1d      	ldr	r2, [pc, #116]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800699c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80069a2:	4b1b      	ldr	r3, [pc, #108]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	4a1a      	ldr	r2, [pc, #104]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80069ae:	4a18      	ldr	r2, [pc, #96]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80069b4:	4b16      	ldr	r3, [pc, #88]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d014      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c0:	f7fc ffb8 	bl	8003934 <HAL_GetTick>
 80069c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069c6:	e00a      	b.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069c8:	f7fc ffb4 	bl	8003934 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d901      	bls.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e317      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069de:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e2:	f003 0302 	and.w	r3, r3, #2
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d0ee      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f6:	d111      	bne.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006a06:	400b      	ands	r3, r1
 8006a08:	4901      	ldr	r1, [pc, #4]	; (8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	608b      	str	r3, [r1, #8]
 8006a0e:	e00b      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006a10:	40023800 	.word	0x40023800
 8006a14:	40007000 	.word	0x40007000
 8006a18:	0ffffcff 	.word	0x0ffffcff
 8006a1c:	4bb0      	ldr	r3, [pc, #704]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4aaf      	ldr	r2, [pc, #700]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006a26:	6093      	str	r3, [r2, #8]
 8006a28:	4bad      	ldr	r3, [pc, #692]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a34:	49aa      	ldr	r1, [pc, #680]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d010      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006a46:	4ba6      	ldr	r3, [pc, #664]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4c:	4aa4      	ldr	r2, [pc, #656]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006a56:	4ba2      	ldr	r3, [pc, #648]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	499f      	ldr	r1, [pc, #636]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d00a      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a74:	4b9a      	ldr	r3, [pc, #616]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a82:	4997      	ldr	r1, [pc, #604]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a84:	4313      	orrs	r3, r2
 8006a86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00a      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a96:	4b92      	ldr	r3, [pc, #584]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa4:	498e      	ldr	r1, [pc, #568]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ab8:	4b89      	ldr	r3, [pc, #548]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac6:	4986      	ldr	r1, [pc, #536]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00a      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006ada:	4b81      	ldr	r3, [pc, #516]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	497d      	ldr	r1, [pc, #500]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006afc:	4b78      	ldr	r3, [pc, #480]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b02:	f023 0203 	bic.w	r2, r3, #3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0a:	4975      	ldr	r1, [pc, #468]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b1e:	4b70      	ldr	r3, [pc, #448]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b24:	f023 020c 	bic.w	r2, r3, #12
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2c:	496c      	ldr	r1, [pc, #432]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b40:	4b67      	ldr	r3, [pc, #412]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	4964      	ldr	r1, [pc, #400]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b62:	4b5f      	ldr	r3, [pc, #380]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b70:	495b      	ldr	r1, [pc, #364]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b84:	4b56      	ldr	r3, [pc, #344]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	4953      	ldr	r1, [pc, #332]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006ba6:	4b4e      	ldr	r3, [pc, #312]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bb4:	494a      	ldr	r1, [pc, #296]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006bc8:	4b45      	ldr	r3, [pc, #276]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd6:	4942      	ldr	r1, [pc, #264]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006bea:	4b3d      	ldr	r3, [pc, #244]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf8:	4939      	ldr	r1, [pc, #228]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c0c:	4b34      	ldr	r3, [pc, #208]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c1a:	4931      	ldr	r1, [pc, #196]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d011      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c3c:	4928      	ldr	r1, [pc, #160]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c4c:	d101      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00a      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7c:	4918      	ldr	r1, [pc, #96]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00b      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c90:	4b13      	ldr	r3, [pc, #76]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ca0:	490f      	ldr	r1, [pc, #60]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d005      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006cb6:	f040 80d8 	bne.w	8006e6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006cc0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cc6:	f7fc fe35 	bl	8003934 <HAL_GetTick>
 8006cca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ccc:	e00a      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006cce:	f7fc fe31 	bl	8003934 <HAL_GetTick>
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	2b64      	cmp	r3, #100	; 0x64
 8006cda:	d903      	bls.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e196      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006ce0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ce4:	4b6c      	ldr	r3, [pc, #432]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1ee      	bne.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d021      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d11d      	bne.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d04:	4b64      	ldr	r3, [pc, #400]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d0a:	0c1b      	lsrs	r3, r3, #16
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d12:	4b61      	ldr	r3, [pc, #388]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d18:	0e1b      	lsrs	r3, r3, #24
 8006d1a:	f003 030f 	and.w	r3, r3, #15
 8006d1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	019a      	lsls	r2, r3, #6
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	061b      	lsls	r3, r3, #24
 8006d30:	431a      	orrs	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	071b      	lsls	r3, r3, #28
 8006d38:	4957      	ldr	r1, [pc, #348]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d004      	beq.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x516>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d54:	d00a      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d02e      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d6a:	d129      	bne.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006d6c:	4b4a      	ldr	r3, [pc, #296]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d72:	0c1b      	lsrs	r3, r3, #16
 8006d74:	f003 0303 	and.w	r3, r3, #3
 8006d78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006d7a:	4b47      	ldr	r3, [pc, #284]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d80:	0f1b      	lsrs	r3, r3, #28
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	019a      	lsls	r2, r3, #6
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	041b      	lsls	r3, r3, #16
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	061b      	lsls	r3, r3, #24
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	071b      	lsls	r3, r3, #28
 8006da0:	493d      	ldr	r1, [pc, #244]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006da8:	4b3b      	ldr	r3, [pc, #236]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dae:	f023 021f 	bic.w	r2, r3, #31
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	3b01      	subs	r3, #1
 8006db8:	4937      	ldr	r1, [pc, #220]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01d      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006dcc:	4b32      	ldr	r3, [pc, #200]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd2:	0e1b      	lsrs	r3, r3, #24
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006dda:	4b2f      	ldr	r3, [pc, #188]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de0:	0f1b      	lsrs	r3, r3, #28
 8006de2:	f003 0307 	and.w	r3, r3, #7
 8006de6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	019a      	lsls	r2, r3, #6
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	041b      	lsls	r3, r3, #16
 8006df4:	431a      	orrs	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	061b      	lsls	r3, r3, #24
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	071b      	lsls	r3, r3, #28
 8006e00:	4925      	ldr	r1, [pc, #148]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d011      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	019a      	lsls	r2, r3, #6
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	041b      	lsls	r3, r3, #16
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	061b      	lsls	r3, r3, #24
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	071b      	lsls	r3, r3, #28
 8006e30:	4919      	ldr	r1, [pc, #100]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006e38:	4b17      	ldr	r3, [pc, #92]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a16      	ldr	r2, [pc, #88]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e44:	f7fc fd76 	bl	8003934 <HAL_GetTick>
 8006e48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e4a:	e008      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006e4c:	f7fc fd72 	bl	8003934 <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b64      	cmp	r3, #100	; 0x64
 8006e58:	d901      	bls.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e0d7      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0f0      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	f040 80cd 	bne.w	800700c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a08      	ldr	r2, [pc, #32]	; (8006e98 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e7e:	f7fc fd59 	bl	8003934 <HAL_GetTick>
 8006e82:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e84:	e00a      	b.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006e86:	f7fc fd55 	bl	8003934 <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	2b64      	cmp	r3, #100	; 0x64
 8006e92:	d903      	bls.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e0ba      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006e98:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006e9c:	4b5e      	ldr	r3, [pc, #376]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea8:	d0ed      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d009      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d02e      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d12a      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006ed2:	4b51      	ldr	r3, [pc, #324]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006ee0:	4b4d      	ldr	r3, [pc, #308]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ee6:	0f1b      	lsrs	r3, r3, #28
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	019a      	lsls	r2, r3, #6
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	041b      	lsls	r3, r3, #16
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	061b      	lsls	r3, r3, #24
 8006f00:	431a      	orrs	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	071b      	lsls	r3, r3, #28
 8006f06:	4944      	ldr	r1, [pc, #272]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f0e:	4b42      	ldr	r3, [pc, #264]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f14:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	493d      	ldr	r1, [pc, #244]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d022      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f3c:	d11d      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f3e:	4b36      	ldr	r3, [pc, #216]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f44:	0e1b      	lsrs	r3, r3, #24
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f52:	0f1b      	lsrs	r3, r3, #28
 8006f54:	f003 0307 	and.w	r3, r3, #7
 8006f58:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	019a      	lsls	r2, r3, #6
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	431a      	orrs	r2, r3
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	061b      	lsls	r3, r3, #24
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	071b      	lsls	r3, r3, #28
 8006f72:	4929      	ldr	r1, [pc, #164]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d028      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006f86:	4b24      	ldr	r3, [pc, #144]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f8c:	0e1b      	lsrs	r3, r3, #24
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006f94:	4b20      	ldr	r3, [pc, #128]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9a:	0c1b      	lsrs	r3, r3, #16
 8006f9c:	f003 0303 	and.w	r3, r3, #3
 8006fa0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	019a      	lsls	r2, r3, #6
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	041b      	lsls	r3, r3, #16
 8006fac:	431a      	orrs	r2, r3
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	061b      	lsls	r3, r3, #24
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	69db      	ldr	r3, [r3, #28]
 8006fb8:	071b      	lsls	r3, r3, #28
 8006fba:	4917      	ldr	r1, [pc, #92]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006fc2:	4b15      	ldr	r3, [pc, #84]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd0:	4911      	ldr	r1, [pc, #68]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006fd8:	4b0f      	ldr	r3, [pc, #60]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a0e      	ldr	r2, [pc, #56]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe4:	f7fc fca6 	bl	8003934 <HAL_GetTick>
 8006fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006fea:	e008      	b.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006fec:	f7fc fca2 	bl	8003934 <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	2b64      	cmp	r3, #100	; 0x64
 8006ff8:	d901      	bls.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e007      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800700a:	d1ef      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3720      	adds	r7, #32
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40023800 	.word	0x40023800

0800701c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800701c:	b480      	push	{r7}
 800701e:	b087      	sub	sp, #28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007030:	2300      	movs	r3, #0
 8007032:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800703a:	f040 808c 	bne.w	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800703e:	4b95      	ldr	r3, [pc, #596]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007044:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800704c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007054:	d07c      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800705c:	d87d      	bhi.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d004      	beq.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706a:	d039      	beq.n	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800706c:	e075      	b.n	800715a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800706e:	4b89      	ldr	r3, [pc, #548]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d108      	bne.n	800708c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800707a:	4b86      	ldr	r3, [pc, #536]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007082:	4a85      	ldr	r2, [pc, #532]	; (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8007084:	fbb2 f3f3 	udiv	r3, r2, r3
 8007088:	613b      	str	r3, [r7, #16]
 800708a:	e007      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800708c:	4b81      	ldr	r3, [pc, #516]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007094:	4a81      	ldr	r2, [pc, #516]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 800709c:	4b7d      	ldr	r3, [pc, #500]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a2:	0e1b      	lsrs	r3, r3, #24
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80070aa:	4b7a      	ldr	r3, [pc, #488]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b0:	099b      	lsrs	r3, r3, #6
 80070b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	fb02 f203 	mul.w	r2, r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80070c4:	4b73      	ldr	r3, [pc, #460]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	0a1b      	lsrs	r3, r3, #8
 80070cc:	f003 031f 	and.w	r3, r3, #31
 80070d0:	3301      	adds	r3, #1
 80070d2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	617b      	str	r3, [r7, #20]
        break;
 80070de:	e03d      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80070e0:	4b6c      	ldr	r3, [pc, #432]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80070ec:	4b69      	ldr	r3, [pc, #420]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	4a68      	ldr	r2, [pc, #416]	; (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80070f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	e007      	b.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80070fe:	4b65      	ldr	r3, [pc, #404]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007106:	4a65      	ldr	r2, [pc, #404]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800710e:	4b61      	ldr	r3, [pc, #388]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007114:	0e1b      	lsrs	r3, r3, #24
 8007116:	f003 030f 	and.w	r3, r3, #15
 800711a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800711c:	4b5d      	ldr	r3, [pc, #372]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800711e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007122:	099b      	lsrs	r3, r3, #6
 8007124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	fb02 f203 	mul.w	r2, r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	fbb2 f3f3 	udiv	r3, r2, r3
 8007134:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007136:	4b57      	ldr	r3, [pc, #348]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800713c:	f003 031f 	and.w	r3, r3, #31
 8007140:	3301      	adds	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007144:	697a      	ldr	r2, [r7, #20]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]
        break;
 800714e:	e005      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007150:	4b53      	ldr	r3, [pc, #332]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8007152:	617b      	str	r3, [r7, #20]
        break;
 8007154:	e002      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8007156:	bf00      	nop
 8007158:	e000      	b.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800715a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007162:	f040 808c 	bne.w	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007166:	4b4b      	ldr	r3, [pc, #300]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800716c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007174:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800717c:	d07c      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007184:	d87d      	bhi.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d004      	beq.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007192:	d039      	beq.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007194:	e075      	b.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007196:	4b3f      	ldr	r3, [pc, #252]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d108      	bne.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80071a2:	4b3c      	ldr	r3, [pc, #240]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071aa:	4a3b      	ldr	r2, [pc, #236]	; (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80071ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e007      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80071b4:	4b37      	ldr	r3, [pc, #220]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071bc:	4a37      	ldr	r2, [pc, #220]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80071c4:	4b33      	ldr	r3, [pc, #204]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ca:	0e1b      	lsrs	r3, r3, #24
 80071cc:	f003 030f 	and.w	r3, r3, #15
 80071d0:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80071d2:	4b30      	ldr	r3, [pc, #192]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d8:	099b      	lsrs	r3, r3, #6
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	fb02 f203 	mul.w	r2, r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80071ec:	4b29      	ldr	r3, [pc, #164]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80071ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f2:	0a1b      	lsrs	r3, r3, #8
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80071fc:	697a      	ldr	r2, [r7, #20]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	fbb2 f3f3 	udiv	r3, r2, r3
 8007204:	617b      	str	r3, [r7, #20]
        break;
 8007206:	e03d      	b.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007208:	4b22      	ldr	r3, [pc, #136]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d108      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007214:	4b1f      	ldr	r3, [pc, #124]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800721c:	4a1e      	ldr	r2, [pc, #120]	; (8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800721e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	e007      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007226:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800722e:	4a1b      	ldr	r2, [pc, #108]	; (800729c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8007230:	fbb2 f3f3 	udiv	r3, r2, r3
 8007234:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007236:	4b17      	ldr	r3, [pc, #92]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800723c:	0e1b      	lsrs	r3, r3, #24
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007244:	4b13      	ldr	r3, [pc, #76]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800724a:	099b      	lsrs	r3, r3, #6
 800724c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	fb02 f203 	mul.w	r2, r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800725e:	4b0d      	ldr	r3, [pc, #52]	; (8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	3301      	adds	r3, #1
 800726a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	fbb2 f3f3 	udiv	r3, r2, r3
 8007274:	617b      	str	r3, [r7, #20]
        break;
 8007276:	e005      	b.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007278:	4b09      	ldr	r3, [pc, #36]	; (80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800727a:	617b      	str	r3, [r7, #20]
        break;
 800727c:	e002      	b.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800727e:	bf00      	nop
 8007280:	e000      	b.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8007282:	bf00      	nop

  return frequency;
 8007284:	697b      	ldr	r3, [r7, #20]
}
 8007286:	4618      	mov	r0, r3
 8007288:	371c      	adds	r7, #28
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop
 8007294:	40023800 	.word	0x40023800
 8007298:	00f42400 	.word	0x00f42400
 800729c:	017d7840 	.word	0x017d7840
 80072a0:	00bb8000 	.word	0x00bb8000

080072a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b088      	sub	sp, #32
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e14d      	b.n	800755e <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d106      	bne.n	80072dc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f003 ff48 	bl	800b16c <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2202      	movs	r2, #2
 80072e0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fa6f 	bl	80077c8 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d00c      	beq.n	800730c <HAL_SAI_Init+0x68>
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d80d      	bhi.n	8007312 <HAL_SAI_Init+0x6e>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d002      	beq.n	8007300 <HAL_SAI_Init+0x5c>
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d003      	beq.n	8007306 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80072fe:	e008      	b.n	8007312 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
      break;
 8007304:	e006      	b.n	8007314 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007306:	2310      	movs	r3, #16
 8007308:	61fb      	str	r3, [r7, #28]
      break;
 800730a:	e003      	b.n	8007314 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800730c:	2320      	movs	r3, #32
 800730e:	61fb      	str	r3, [r7, #28]
      break;
 8007310:	e000      	b.n	8007314 <HAL_SAI_Init+0x70>
    break;
 8007312:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2b03      	cmp	r3, #3
 800731a:	d81e      	bhi.n	800735a <HAL_SAI_Init+0xb6>
 800731c:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <HAL_SAI_Init+0x80>)
 800731e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007322:	bf00      	nop
 8007324:	08007335 	.word	0x08007335
 8007328:	0800733b 	.word	0x0800733b
 800732c:	08007343 	.word	0x08007343
 8007330:	0800734b 	.word	0x0800734b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
      }
      break;
 8007338:	e010      	b.n	800735c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800733a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007340:	e00c      	b.n	800735c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007346:	617b      	str	r3, [r7, #20]
      }
      break;
 8007348:	e008      	b.n	800735c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800734a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800734e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	f043 0301 	orr.w	r3, r3, #1
 8007356:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007358:	e000      	b.n	800735c <HAL_SAI_Init+0xb8>
  default:
    break;      
 800735a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a81      	ldr	r2, [pc, #516]	; (8007568 <HAL_SAI_Init+0x2c4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_SAI_Init+0xcc>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a80      	ldr	r2, [pc, #512]	; (800756c <HAL_SAI_Init+0x2c8>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d103      	bne.n	8007378 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8007370:	4a7f      	ldr	r2, [pc, #508]	; (8007570 <HAL_SAI_Init+0x2cc>)
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e002      	b.n	800737e <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 8007378:	4a7e      	ldr	r2, [pc, #504]	; (8007574 <HAL_SAI_Init+0x2d0>)
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	69db      	ldr	r3, [r3, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d043      	beq.n	800740e <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a76      	ldr	r2, [pc, #472]	; (8007568 <HAL_SAI_Init+0x2c4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d004      	beq.n	800739e <HAL_SAI_Init+0xfa>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a74      	ldr	r2, [pc, #464]	; (800756c <HAL_SAI_Init+0x2c8>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d104      	bne.n	80073a8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800739e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80073a2:	f7ff fe3b 	bl	800701c <HAL_RCCEx_GetPeriphCLKFreq>
 80073a6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a72      	ldr	r2, [pc, #456]	; (8007578 <HAL_SAI_Init+0x2d4>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d004      	beq.n	80073bc <HAL_SAI_Init+0x118>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a71      	ldr	r2, [pc, #452]	; (800757c <HAL_SAI_Init+0x2d8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d104      	bne.n	80073c6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80073bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80073c0:	f7ff fe2c 	bl	800701c <HAL_RCCEx_GetPeriphCLKFreq>
 80073c4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80073c6:	693a      	ldr	r2, [r7, #16]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	025b      	lsls	r3, r3, #9
 80073d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073dc:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	4a67      	ldr	r2, [pc, #412]	; (8007580 <HAL_SAI_Init+0x2dc>)
 80073e2:	fba2 2303 	umull	r2, r3, r2, r3
 80073e6:	08da      	lsrs	r2, r3, #3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80073ec:	68f9      	ldr	r1, [r7, #12]
 80073ee:	4b64      	ldr	r3, [pc, #400]	; (8007580 <HAL_SAI_Init+0x2dc>)
 80073f0:	fba3 2301 	umull	r2, r3, r3, r1
 80073f4:	08da      	lsrs	r2, r3, #3
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	1aca      	subs	r2, r1, r3
 8007400:	2a08      	cmp	r2, #8
 8007402:	d904      	bls.n	800740e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_SAI_Init+0x17a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d109      	bne.n	8007432 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_SAI_Init+0x186>
 8007426:	2300      	movs	r3, #0
 8007428:	e001      	b.n	800742e <HAL_SAI_Init+0x18a>
 800742a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e008      	b.n	8007444 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007436:	2b01      	cmp	r3, #1
 8007438:	d102      	bne.n	8007440 <HAL_SAI_Init+0x19c>
 800743a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800743e:	e000      	b.n	8007442 <HAL_SAI_Init+0x19e>
 8007440:	2300      	movs	r3, #0
 8007442:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6819      	ldr	r1, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	4b4d      	ldr	r3, [pc, #308]	; (8007584 <HAL_SAI_Init+0x2e0>)
 8007450:	400b      	ands	r3, r1
 8007452:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6819      	ldr	r1, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007468:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	431a      	orrs	r2, r3
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800747c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007488:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	051b      	lsls	r3, r3, #20
 8007490:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6859      	ldr	r1, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4b38      	ldr	r3, [pc, #224]	; (8007588 <HAL_SAI_Init+0x2e4>)
 80074a6:	400b      	ands	r3, r1
 80074a8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	6859      	ldr	r1, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	699a      	ldr	r2, [r3, #24]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6899      	ldr	r1, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b2e      	ldr	r3, [pc, #184]	; (800758c <HAL_SAI_Init+0x2e8>)
 80074d4:	400b      	ands	r3, r1
 80074d6:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6899      	ldr	r1, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e2:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80074e8:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80074ee:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80074f4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074fa:	3b01      	subs	r3, #1
 80074fc:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80074fe:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68d9      	ldr	r1, [r3, #12]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007516:	400b      	ands	r3, r1
 8007518:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	68d9      	ldr	r1, [r3, #12]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007528:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800752e:	041b      	lsls	r3, r3, #16
 8007530:	431a      	orrs	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007536:	3b01      	subs	r3, #1
 8007538:	021b      	lsls	r3, r3, #8
 800753a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  return HAL_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40015804 	.word	0x40015804
 800756c:	40015824 	.word	0x40015824
 8007570:	40015800 	.word	0x40015800
 8007574:	40015c00 	.word	0x40015c00
 8007578:	40015c04 	.word	0x40015c04
 800757c:	40015c24 	.word	0x40015c24
 8007580:	cccccccd 	.word	0xcccccccd
 8007584:	ff05c010 	.word	0xff05c010
 8007588:	ffff1ff0 	.word	0xffff1ff0
 800758c:	fff88000 	.word	0xfff88000

08007590 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t* pData, uint16_t Size, uint32_t Timeout)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	603b      	str	r3, [r7, #0]
 800759c:	4613      	mov	r3, r2
 800759e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 80075a0:	f7fc f9c8 	bl	8003934 <HAL_GetTick>
 80075a4:	6178      	str	r0, [r7, #20]

  if((pData == NULL ) || (Size == 0))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_SAI_Transmit+0x22>
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e0b6      	b.n	8007724 <HAL_SAI_Transmit+0x194>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	f040 80af 	bne.w	8007722 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_SAI_Transmit+0x42>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e0a8      	b.n	8007724 <HAL_SAI_Transmit+0x194>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	88fa      	ldrh	r2, [r7, #6]
 80075de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2212      	movs	r2, #18
 80075f4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d17a      	bne.n	8007704 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f000 f88c 	bl	800772c <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007622:	601a      	str	r2, [r3, #0]
    }

    while(hsai->XferCount > 0)
 8007624:	e06e      	b.n	8007704 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007634:	d035      	beq.n	80076a2 <HAL_SAI_Transmit+0x112>
      {
        if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763a:	2b40      	cmp	r3, #64	; 0x40
 800763c:	d10d      	bne.n	800765a <HAL_SAI_Transmit+0xca>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800764a:	1c59      	adds	r1, r3, #1
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	6651      	str	r1, [r2, #100]	; 0x64
 8007650:	781a      	ldrb	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	61da      	str	r2, [r3, #28]
 8007658:	e01a      	b.n	8007690 <HAL_SAI_Transmit+0x100>
        }
        else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800765e:	2b80      	cmp	r3, #128	; 0x80
 8007660:	d80b      	bhi.n	800767a <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007666:	881a      	ldrh	r2, [r3, #0]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 2;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007672:	1c9a      	adds	r2, r3, #2
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	665a      	str	r2, [r3, #100]	; 0x64
 8007678:	e00a      	b.n	8007690 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6812      	ldr	r2, [r2, #0]
 8007684:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 4;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800768a:	1d1a      	adds	r2, r3, #4
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007696:	3b01      	subs	r3, #1
 8007698:	b29a      	uxth	r2, r3
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80076a0:	e030      	b.n	8007704 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d02c      	beq.n	8007704 <HAL_SAI_Transmit+0x174>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <HAL_SAI_Transmit+0x130>
 80076b0:	f7fc f940 	bl	8003934 <HAL_GetTick>
 80076b4:	4602      	mov	r2, r0
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	683a      	ldr	r2, [r7, #0]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d221      	bcs.n	8007704 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f04f 32ff 	mov.w	r2, #4294967295
 80076d8:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f874 	bl	80077c8 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685a      	ldr	r2, [r3, #4]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f042 0208 	orr.w	r2, r2, #8
 80076ee:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e00f      	b.n	8007724 <HAL_SAI_Transmit+0x194>
    while(hsai->XferCount > 0)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800770a:	2b00      	cmp	r3, #0
 800770c:	d18b      	bne.n	8007626 <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	e000      	b.n	8007724 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8007722:	2302      	movs	r3, #2
  }
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8007734:	e034      	b.n	80077a0 <SAI_FillFifo+0x74>
  {
    if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800773a:	2b40      	cmp	r3, #64	; 0x40
 800773c:	d10d      	bne.n	800775a <SAI_FillFifo+0x2e>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007742:	2b00      	cmp	r3, #0
 8007744:	d109      	bne.n	800775a <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774a:	1c59      	adds	r1, r3, #1
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	6651      	str	r1, [r2, #100]	; 0x64
 8007750:	781a      	ldrb	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	61da      	str	r2, [r3, #28]
 8007758:	e01a      	b.n	8007790 <SAI_FillFifo+0x64>
    }
    else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775e:	2b80      	cmp	r3, #128	; 0x80
 8007760:	d80b      	bhi.n	800777a <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6812      	ldr	r2, [r2, #0]
 800776c:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 2;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007772:	1c9a      	adds	r2, r3, #2
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	665a      	str	r2, [r3, #100]	; 0x64
 8007778:	e00a      	b.n	8007790 <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6812      	ldr	r2, [r2, #0]
 8007784:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 4;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800778a:	1d1a      	adds	r2, r3, #4
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80077aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077ae:	d004      	beq.n	80077ba <SAI_FillFifo+0x8e>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1bd      	bne.n	8007736 <SAI_FillFifo+0xa>
  }
}
 80077ba:	bf00      	nop
 80077bc:	370c      	adds	r7, #12
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80077c8:	b490      	push	{r4, r7}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80077d0:	4b16      	ldr	r3, [pc, #88]	; (800782c <SAI_Disable+0x64>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a16      	ldr	r2, [pc, #88]	; (8007830 <SAI_Disable+0x68>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	0b1b      	lsrs	r3, r3, #12
 80077dc:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80077f0:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80077f2:	4623      	mov	r3, r4
 80077f4:	1e5c      	subs	r4, r3, #1
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007800:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	73fb      	strb	r3, [r7, #15]
      break;
 800780e:	e006      	b.n	800781e <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e9      	bne.n	80077f2 <SAI_Disable+0x2a>

  return status;
 800781e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bc90      	pop	{r4, r7}
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	20000058 	.word	0x20000058
 8007830:	95cbec1b 	.word	0x95cbec1b

08007834 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e025      	b.n	8007894 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f003 fc7b 	bl	800b158 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3304      	adds	r3, #4
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f001 faf3 	bl	8008e60 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	461a      	mov	r2, r3
 8007884:	6839      	ldr	r1, [r7, #0]
 8007886:	f001 fb5d 	bl	8008f44 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3708      	adds	r7, #8
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d101      	bne.n	80078b8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80078b4:	2302      	movs	r3, #2
 80078b6:	e018      	b.n	80078ea <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	68b9      	ldr	r1, [r7, #8]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f001 fbbb 	bl	8009044 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d104      	bne.n	80078e0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2205      	movs	r2, #5
 80078da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80078de:	e003      	b.n	80078e8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2201      	movs	r2, #1
 80078e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b082      	sub	sp, #8
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b02      	cmp	r3, #2
 8007906:	d101      	bne.n	800790c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007908:	2302      	movs	r3, #2
 800790a:	e00e      	b.n	800792a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	4618      	mov	r0, r3
 800791c:	f001 fbb3 	bl	8009086 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007940:	2301      	movs	r3, #1
 8007942:	e01d      	b.n	8007980 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f003 f993 	bl	800ac84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f000 f93f 	bl	8007bf4 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f042 0201 	orr.w	r2, r2, #1
 80079a6:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	370c      	adds	r7, #12
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d101      	bne.n	80079d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	e01d      	b.n	8007a0c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d106      	bne.n	80079ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f003 fa1b 	bl	800ae20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2202      	movs	r2, #2
 80079ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	3304      	adds	r3, #4
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f000 f8f9 	bl	8007bf4 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2201      	movs	r2, #1
 8007a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}  
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}

08007a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_TIM_ConfigClockSource+0x1c>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e0d8      	b.n	8007be2 <HAL_TIM_ConfigClockSource+0x1ce>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4b68      	ldr	r3, [pc, #416]	; (8007bec <HAL_TIM_ConfigClockSource+0x1d8>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a68:	d052      	beq.n	8007b10 <HAL_TIM_ConfigClockSource+0xfc>
 8007a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a6e:	f200 80ae 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a76:	d027      	beq.n	8007ac8 <HAL_TIM_ConfigClockSource+0xb4>
 8007a78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a7c:	f200 80a7 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007a80:	2b70      	cmp	r3, #112	; 0x70
 8007a82:	d02a      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0xc6>
 8007a84:	2b70      	cmp	r3, #112	; 0x70
 8007a86:	f200 80a2 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007a8a:	2b60      	cmp	r3, #96	; 0x60
 8007a8c:	d063      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0x142>
 8007a8e:	2b60      	cmp	r3, #96	; 0x60
 8007a90:	f200 809d 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007a94:	2b50      	cmp	r3, #80	; 0x50
 8007a96:	d04e      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0x122>
 8007a98:	2b50      	cmp	r3, #80	; 0x50
 8007a9a:	f200 8098 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d069      	beq.n	8007b76 <HAL_TIM_ConfigClockSource+0x162>
 8007aa2:	2b40      	cmp	r3, #64	; 0x40
 8007aa4:	f200 8093 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007aa8:	2b30      	cmp	r3, #48	; 0x30
 8007aaa:	f000 8089 	beq.w	8007bc0 <HAL_TIM_ConfigClockSource+0x1ac>
 8007aae:	2b30      	cmp	r3, #48	; 0x30
 8007ab0:	f200 808d 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	d07c      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0x19e>
 8007ab8:	2b20      	cmp	r3, #32
 8007aba:	f200 8088 	bhi.w	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d069      	beq.n	8007b96 <HAL_TIM_ConfigClockSource+0x182>
 8007ac2:	2b10      	cmp	r3, #16
 8007ac4:	d06e      	beq.n	8007ba4 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 8007ac6:	e082      	b.n	8007bce <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6899      	ldr	r1, [r3, #8]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b47      	ldr	r3, [pc, #284]	; (8007bf0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007ad4:	400b      	ands	r3, r1
 8007ad6:	6093      	str	r3, [r2, #8]
    break;
 8007ad8:	e07a      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	6899      	ldr	r1, [r3, #8]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	68db      	ldr	r3, [r3, #12]
 8007aea:	f000 fb86 	bl	80081fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	4b3c      	ldr	r3, [pc, #240]	; (8007bec <HAL_TIM_ConfigClockSource+0x1d8>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b04:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	609a      	str	r2, [r3, #8]
    break;
 8007b0e:	e05f      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	6899      	ldr	r1, [r3, #8]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f000 fb6b 	bl	80081fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b32:	609a      	str	r2, [r3, #8]
    break;
 8007b34:	e04c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6859      	ldr	r1, [r3, #4]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f000 fad2 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2150      	movs	r1, #80	; 0x50
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f000 fb33 	bl	80081ba <TIM_ITRx_SetConfig>
    break;
 8007b54:	e03c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6859      	ldr	r1, [r3, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f000 faf5 	bl	8008152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2160      	movs	r1, #96	; 0x60
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fb23 	bl	80081ba <TIM_ITRx_SetConfig>
    break;
 8007b74:	e02c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6818      	ldr	r0, [r3, #0]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	6859      	ldr	r1, [r3, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f000 fab2 	bl	80080ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2140      	movs	r1, #64	; 0x40
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f000 fb13 	bl	80081ba <TIM_ITRx_SetConfig>
    break;
 8007b94:	e01c      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f000 fb0c 	bl	80081ba <TIM_ITRx_SetConfig>
    break;
 8007ba2:	e015      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2110      	movs	r1, #16
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fb05 	bl	80081ba <TIM_ITRx_SetConfig>
    break;
 8007bb0:	e00e      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2120      	movs	r1, #32
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f000 fafe 	bl	80081ba <TIM_ITRx_SetConfig>
    break;
 8007bbe:	e007      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2130      	movs	r1, #48	; 0x30
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 faf7 	bl	80081ba <TIM_ITRx_SetConfig>
    break;
 8007bcc:	e000      	b.n	8007bd0 <HAL_TIM_ConfigClockSource+0x1bc>
    break;    
 8007bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	fffeff88 	.word	0xfffeff88
 8007bf0:	fffefff8 	.word	0xfffefff8

08007bf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b085      	sub	sp, #20
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a47      	ldr	r2, [pc, #284]	; (8007d28 <TIM_Base_SetConfig+0x134>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d013      	beq.n	8007c38 <TIM_Base_SetConfig+0x44>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c16:	d00f      	beq.n	8007c38 <TIM_Base_SetConfig+0x44>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a44      	ldr	r2, [pc, #272]	; (8007d2c <TIM_Base_SetConfig+0x138>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d00b      	beq.n	8007c38 <TIM_Base_SetConfig+0x44>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a43      	ldr	r2, [pc, #268]	; (8007d30 <TIM_Base_SetConfig+0x13c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d007      	beq.n	8007c38 <TIM_Base_SetConfig+0x44>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a42      	ldr	r2, [pc, #264]	; (8007d34 <TIM_Base_SetConfig+0x140>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d003      	beq.n	8007c38 <TIM_Base_SetConfig+0x44>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a41      	ldr	r2, [pc, #260]	; (8007d38 <TIM_Base_SetConfig+0x144>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d101      	bne.n	8007c3c <TIM_Base_SetConfig+0x48>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <TIM_Base_SetConfig+0x4a>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d008      	beq.n	8007c54 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a34      	ldr	r2, [pc, #208]	; (8007d28 <TIM_Base_SetConfig+0x134>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d02b      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c62:	d027      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a31      	ldr	r2, [pc, #196]	; (8007d2c <TIM_Base_SetConfig+0x138>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d023      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a30      	ldr	r2, [pc, #192]	; (8007d30 <TIM_Base_SetConfig+0x13c>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d01f      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a2f      	ldr	r2, [pc, #188]	; (8007d34 <TIM_Base_SetConfig+0x140>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d01b      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a2e      	ldr	r2, [pc, #184]	; (8007d38 <TIM_Base_SetConfig+0x144>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d017      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a2d      	ldr	r2, [pc, #180]	; (8007d3c <TIM_Base_SetConfig+0x148>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d013      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a2c      	ldr	r2, [pc, #176]	; (8007d40 <TIM_Base_SetConfig+0x14c>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00f      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a2b      	ldr	r2, [pc, #172]	; (8007d44 <TIM_Base_SetConfig+0x150>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00b      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a2a      	ldr	r2, [pc, #168]	; (8007d48 <TIM_Base_SetConfig+0x154>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d007      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a29      	ldr	r2, [pc, #164]	; (8007d4c <TIM_Base_SetConfig+0x158>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_Base_SetConfig+0xc0>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a28      	ldr	r2, [pc, #160]	; (8007d50 <TIM_Base_SetConfig+0x15c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d101      	bne.n	8007cb8 <TIM_Base_SetConfig+0xc4>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e000      	b.n	8007cba <TIM_Base_SetConfig+0xc6>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a0c      	ldr	r2, [pc, #48]	; (8007d28 <TIM_Base_SetConfig+0x134>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_Base_SetConfig+0x110>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a0e      	ldr	r2, [pc, #56]	; (8007d38 <TIM_Base_SetConfig+0x144>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d101      	bne.n	8007d08 <TIM_Base_SetConfig+0x114>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e000      	b.n	8007d0a <TIM_Base_SetConfig+0x116>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	691a      	ldr	r2, [r3, #16]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	615a      	str	r2, [r3, #20]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800
 8007d48:	40001800 	.word	0x40001800
 8007d4c:	40001c00 	.word	0x40001c00
 8007d50:	40002000 	.word	0x40002000

08007d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b087      	sub	sp, #28
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;  
 8007d66:	2300      	movs	r3, #0
 8007d68:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	f023 0201 	bic.w	r2, r3, #1
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4b2a      	ldr	r3, [pc, #168]	; (8007e34 <TIM_OC1_SetConfig+0xe0>)
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f023 0303 	bic.w	r3, r3, #3
 8007d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	f023 0302 	bic.w	r3, r3, #2
 8007da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a20      	ldr	r2, [pc, #128]	; (8007e38 <TIM_OC1_SetConfig+0xe4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC1_SetConfig+0x70>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a1f      	ldr	r2, [pc, #124]	; (8007e3c <TIM_OC1_SetConfig+0xe8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d101      	bne.n	8007dc8 <TIM_OC1_SetConfig+0x74>
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e000      	b.n	8007dca <TIM_OC1_SetConfig+0x76>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01e      	beq.n	8007e0c <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f023 0308 	bic.w	r3, r3, #8
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f023 0304 	bic.w	r3, r3, #4
 8007de6:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	699b      	ldr	r3, [r3, #24]
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685a      	ldr	r2, [r3, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	621a      	str	r2, [r3, #32]
} 
 8007e26:	bf00      	nop
 8007e28:	371c      	adds	r7, #28
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	fffeff8f 	.word	0xfffeff8f
 8007e38:	40010000 	.word	0x40010000
 8007e3c:	40010400 	.word	0x40010400

08007e40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 8007e52:	2300      	movs	r3, #0
 8007e54:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	f023 0210 	bic.w	r2, r3, #16
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	4b2c      	ldr	r3, [pc, #176]	; (8007f28 <TIM_OC2_SetConfig+0xe8>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e82:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	f023 0320 	bic.w	r3, r3, #32
 8007e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	011b      	lsls	r3, r3, #4
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a21      	ldr	r2, [pc, #132]	; (8007f2c <TIM_OC2_SetConfig+0xec>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d003      	beq.n	8007eb4 <TIM_OC2_SetConfig+0x74>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a20      	ldr	r2, [pc, #128]	; (8007f30 <TIM_OC2_SetConfig+0xf0>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d101      	bne.n	8007eb8 <TIM_OC2_SetConfig+0x78>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e000      	b.n	8007eba <TIM_OC2_SetConfig+0x7a>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d021      	beq.n	8007f02 <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ec4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	011b      	lsls	r3, r3, #4
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ed8:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	695b      	ldr	r3, [r3, #20]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	693a      	ldr	r2, [r7, #16]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	693a      	ldr	r2, [r7, #16]
 8007f06:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	621a      	str	r2, [r3, #32]
}
 8007f1c:	bf00      	nop
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	feff8fff 	.word	0xfeff8fff
 8007f2c:	40010000 	.word	0x40010000
 8007f30:	40010400 	.word	0x40010400

08007f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;   
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	4b2c      	ldr	r3, [pc, #176]	; (800801c <TIM_OC3_SetConfig+0xe8>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	021b      	lsls	r3, r3, #8
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a21      	ldr	r2, [pc, #132]	; (8008020 <TIM_OC3_SetConfig+0xec>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d003      	beq.n	8007fa6 <TIM_OC3_SetConfig+0x72>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a20      	ldr	r2, [pc, #128]	; (8008024 <TIM_OC3_SetConfig+0xf0>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d101      	bne.n	8007faa <TIM_OC3_SetConfig+0x76>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <TIM_OC3_SetConfig+0x78>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d021      	beq.n	8007ff4 <TIM_OC3_SetConfig+0xc0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007fca:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	695b      	ldr	r3, [r3, #20]
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	011b      	lsls	r3, r3, #4
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	621a      	str	r2, [r3, #32]
}
 800800e:	bf00      	nop
 8008010:	371c      	adds	r7, #28
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	fffeff8f 	.word	0xfffeff8f
 8008020:	40010000 	.word	0x40010000
 8008024:	40010400 	.word	0x40010400

08008028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8008032:	2300      	movs	r3, #0
 8008034:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8008036:	2300      	movs	r3, #0
 8008038:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a1b      	ldr	r3, [r3, #32]
 8008042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6a1b      	ldr	r3, [r3, #32]
 800804e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	4b20      	ldr	r3, [pc, #128]	; (80080e0 <TIM_OC4_SetConfig+0xb8>)
 8008060:	4013      	ands	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800806a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800807e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	031b      	lsls	r3, r3, #12
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a15      	ldr	r2, [pc, #84]	; (80080e4 <TIM_OC4_SetConfig+0xbc>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d003      	beq.n	800809c <TIM_OC4_SetConfig+0x74>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <TIM_OC4_SetConfig+0xc0>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d101      	bne.n	80080a0 <TIM_OC4_SetConfig+0x78>
 800809c:	2301      	movs	r3, #1
 800809e:	e000      	b.n	80080a2 <TIM_OC4_SetConfig+0x7a>
 80080a0:	2300      	movs	r3, #0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d009      	beq.n	80080ba <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	019b      	lsls	r3, r3, #6
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	685a      	ldr	r2, [r3, #4]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	621a      	str	r2, [r3, #32]
}
 80080d4:	bf00      	nop
 80080d6:	371c      	adds	r7, #28
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	feff8fff 	.word	0xfeff8fff
 80080e4:	40010000 	.word	0x40010000
 80080e8:	40010400 	.word	0x40010400

080080ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800811e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f023 030a 	bic.w	r3, r3, #10
 8008130:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	697a      	ldr	r2, [r7, #20]
 800813e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	621a      	str	r2, [r3, #32]
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008152:	b480      	push	{r7}
 8008154:	b087      	sub	sp, #28
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 800815e:	2300      	movs	r3, #0
 8008160:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	f023 0210 	bic.w	r2, r3, #16
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	031b      	lsls	r3, r3, #12
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	693a      	ldr	r2, [r7, #16]
 80081ac:	621a      	str	r2, [r3, #32]
}
 80081ae:	bf00      	nop
 80081b0:	371c      	adds	r7, #28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b085      	sub	sp, #20
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80081d8:	887b      	ldrh	r3, [r7, #2]
 80081da:	f043 0307 	orr.w	r3, r3, #7
 80081de:	b29b      	uxth	r3, r3
 80081e0:	461a      	mov	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	609a      	str	r2, [r3, #8]
}
 80081ee:	bf00      	nop
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b087      	sub	sp, #28
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
 8008206:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8008208:	2300      	movs	r3, #0
 800820a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	021a      	lsls	r2, r3, #8
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	431a      	orrs	r2, r3
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	4313      	orrs	r3, r2
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	4313      	orrs	r3, r2
 800822a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	697a      	ldr	r2, [r7, #20]
 8008230:	609a      	str	r2, [r3, #8]
} 
 8008232:	bf00      	nop
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008254:	2302      	movs	r3, #2
 8008256:	e03d      	b.n	80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	689b      	ldr	r3, [r3, #8]
 800826e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1a      	ldr	r2, [pc, #104]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d004      	beq.n	8008284 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a19      	ldr	r2, [pc, #100]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d108      	bne.n	8008296 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800828a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	68fa      	ldr	r2, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800829c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082ae:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68fa      	ldr	r2, [r7, #12]
 80082c0:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
} 
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr
 80082e0:	40010000 	.word	0x40010000
 80082e4:	40010400 	.word	0x40010400

080082e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80082fe:	2302      	movs	r3, #2
 8008300:	e105      	b.n	800850e <HAL_TIM_PWM_ConfigChannel+0x226>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2202      	movs	r2, #2
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b14      	cmp	r3, #20
 8008316:	f200 80f0 	bhi.w	80084fa <HAL_TIM_PWM_ConfigChannel+0x212>
 800831a:	a201      	add	r2, pc, #4	; (adr r2, 8008320 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800831c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008320:	08008375 	.word	0x08008375
 8008324:	080084fb 	.word	0x080084fb
 8008328:	080084fb 	.word	0x080084fb
 800832c:	080084fb 	.word	0x080084fb
 8008330:	080083b5 	.word	0x080083b5
 8008334:	080084fb 	.word	0x080084fb
 8008338:	080084fb 	.word	0x080084fb
 800833c:	080084fb 	.word	0x080084fb
 8008340:	080083f7 	.word	0x080083f7
 8008344:	080084fb 	.word	0x080084fb
 8008348:	080084fb 	.word	0x080084fb
 800834c:	080084fb 	.word	0x080084fb
 8008350:	08008437 	.word	0x08008437
 8008354:	080084fb 	.word	0x080084fb
 8008358:	080084fb 	.word	0x080084fb
 800835c:	080084fb 	.word	0x080084fb
 8008360:	08008479 	.word	0x08008479
 8008364:	080084fb 	.word	0x080084fb
 8008368:	080084fb 	.word	0x080084fb
 800836c:	080084fb 	.word	0x080084fb
 8008370:	080084b9 	.word	0x080084b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68b9      	ldr	r1, [r7, #8]
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff fcea 	bl	8007d54 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	699a      	ldr	r2, [r3, #24]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0208 	orr.w	r2, r2, #8
 800838e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699a      	ldr	r2, [r3, #24]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0204 	bic.w	r2, r2, #4
 800839e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6999      	ldr	r1, [r3, #24]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	691a      	ldr	r2, [r3, #16]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	619a      	str	r2, [r3, #24]
    }
    break;
 80083b2:	e0a3      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68b9      	ldr	r1, [r7, #8]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff fd40 	bl	8007e40 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083ce:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6999      	ldr	r1, [r3, #24]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	021a      	lsls	r2, r3, #8
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	430a      	orrs	r2, r1
 80083f2:	619a      	str	r2, [r3, #24]
    }
    break;
 80083f4:	e082      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68b9      	ldr	r1, [r7, #8]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff fd99 	bl	8007f34 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69da      	ldr	r2, [r3, #28]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f042 0208 	orr.w	r2, r2, #8
 8008410:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f022 0204 	bic.w	r2, r2, #4
 8008420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69d9      	ldr	r1, [r3, #28]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	691a      	ldr	r2, [r3, #16]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	61da      	str	r2, [r3, #28]
    }
    break;
 8008434:	e062      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	4618      	mov	r0, r3
 800843e:	f7ff fdf3 	bl	8008028 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008450:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69d9      	ldr	r1, [r3, #28]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	021a      	lsls	r2, r3, #8
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	430a      	orrs	r2, r1
 8008474:	61da      	str	r2, [r3, #28]
    }
    break;
 8008476:	e041      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68b9      	ldr	r1, [r7, #8]
 800847e:	4618      	mov	r0, r3
 8008480:	f000 f84a 	bl	8008518 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0208 	orr.w	r2, r2, #8
 8008492:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0204 	bic.w	r2, r2, #4
 80084a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80084b6:	e021      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	4618      	mov	r0, r3
 80084c0:	f000 f882 	bl	80085c8 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084d2:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	021a      	lsls	r2, r3, #8
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 80084f8:	e000      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 80084fa:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
 8008516:	bf00      	nop

08008518 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 800852a:	2300      	movs	r3, #0
 800852c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854a:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	4b1b      	ldr	r3, [pc, #108]	; (80085bc <TIM_OC5_SetConfig+0xa4>)
 8008550:	4013      	ands	r3, r2
 8008552:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	693a      	ldr	r2, [r7, #16]
 800855a:	4313      	orrs	r3, r2
 800855c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008564:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	041b      	lsls	r3, r3, #16
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	4313      	orrs	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	4a12      	ldr	r2, [pc, #72]	; (80085c0 <TIM_OC5_SetConfig+0xa8>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d003      	beq.n	8008582 <TIM_OC5_SetConfig+0x6a>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	4a11      	ldr	r2, [pc, #68]	; (80085c4 <TIM_OC5_SetConfig+0xac>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d109      	bne.n	8008596 <TIM_OC5_SetConfig+0x7e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	021b      	lsls	r3, r3, #8
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	4313      	orrs	r3, r2
 8008594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	693a      	ldr	r2, [r7, #16]
 80085a0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	621a      	str	r2, [r3, #32]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	fffeff8f 	.word	0xfffeff8f
 80085c0:	40010000 	.word	0x40010000
 80085c4:	40010400 	.word	0x40010400

080085c8 <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b087      	sub	sp, #28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 80085d2:	2300      	movs	r3, #0
 80085d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 80085d6:	2300      	movs	r3, #0
 80085d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6a1b      	ldr	r3, [r3, #32]
 80085ee:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085fa:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	4b1c      	ldr	r3, [pc, #112]	; (8008670 <TIM_OC6_SetConfig+0xa8>)
 8008600:	4013      	ands	r3, r2
 8008602:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	021b      	lsls	r3, r3, #8
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	4313      	orrs	r3, r2
 800860e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008616:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	051b      	lsls	r3, r3, #20
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	4313      	orrs	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a13      	ldr	r2, [pc, #76]	; (8008674 <TIM_OC6_SetConfig+0xac>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d003      	beq.n	8008634 <TIM_OC6_SetConfig+0x6c>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4a12      	ldr	r2, [pc, #72]	; (8008678 <TIM_OC6_SetConfig+0xb0>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d109      	bne.n	8008648 <TIM_OC6_SetConfig+0x80>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800863a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	029b      	lsls	r3, r3, #10
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	621a      	str	r2, [r3, #32]
}
 8008662:	bf00      	nop
 8008664:	371c      	adds	r7, #28
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	feff8fff 	.word	0xfeff8fff
 8008674:	40010000 	.word	0x40010000
 8008678:	40010400 	.word	0x40010400

0800867c <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e043      	b.n	8008716 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d106      	bne.n	80086a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f002 fc3a 	bl	800af1c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2224      	movs	r2, #36	; 0x24
 80086ac:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0201 	bic.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f877 	bl	80087b4 <UART_SetConfig>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	d101      	bne.n	80086d0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e022      	b.n	8008716 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 faeb 	bl	8008cb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685a      	ldr	r2, [r3, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80086ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689a      	ldr	r2, [r3, #8]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086fc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0201 	orr.w	r2, r2, #1
 800870c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fb72 	bl	8008df8 <UART_CheckIdleState>
 8008714:	4603      	mov	r3, r0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	603b      	str	r3, [r7, #0]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800872e:	e02c      	b.n	800878a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008730:	69bb      	ldr	r3, [r7, #24]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d028      	beq.n	800878a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d007      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0x30>
 800873e:	f7fb f8f9 	bl	8003934 <HAL_GetTick>
 8008742:	4602      	mov	r2, r0
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	429a      	cmp	r2, r3
 800874c:	d81d      	bhi.n	800878a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800875c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689a      	ldr	r2, [r3, #8]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f022 0201 	bic.w	r2, r2, #1
 800876c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e00f      	b.n	80087aa <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69da      	ldr	r2, [r3, #28]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4013      	ands	r3, r2
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	429a      	cmp	r2, r3
 8008798:	bf0c      	ite	eq
 800879a:	2301      	moveq	r3, #1
 800879c:	2300      	movne	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d0c3      	beq.n	8008730 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b086      	sub	sp, #24
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80087c0:	2310      	movs	r3, #16
 80087c2:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80087c8:	2300      	movs	r3, #0
 80087ca:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	431a      	orrs	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	4313      	orrs	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	4bb5      	ldr	r3, [pc, #724]	; (8008ac4 <UART_SetConfig+0x310>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	68f9      	ldr	r1, [r7, #12]
 80087f8:	430b      	orrs	r3, r1
 80087fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68da      	ldr	r2, [r3, #12]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	699a      	ldr	r2, [r3, #24]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	430a      	orrs	r2, r1
 8008830:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4aa4      	ldr	r2, [pc, #656]	; (8008ac8 <UART_SetConfig+0x314>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d11f      	bne.n	800887c <UART_SetConfig+0xc8>
 800883c:	4ba3      	ldr	r3, [pc, #652]	; (8008acc <UART_SetConfig+0x318>)
 800883e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008842:	f003 0303 	and.w	r3, r3, #3
 8008846:	2b03      	cmp	r3, #3
 8008848:	f200 8139 	bhi.w	8008abe <UART_SetConfig+0x30a>
 800884c:	a201      	add	r2, pc, #4	; (adr r2, 8008854 <UART_SetConfig+0xa0>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008865 	.word	0x08008865
 8008858:	08008871 	.word	0x08008871
 800885c:	0800886b 	.word	0x0800886b
 8008860:	08008877 	.word	0x08008877
 8008864:	2301      	movs	r3, #1
 8008866:	75fb      	strb	r3, [r7, #23]
 8008868:	e129      	b.n	8008abe <UART_SetConfig+0x30a>
 800886a:	2302      	movs	r3, #2
 800886c:	75fb      	strb	r3, [r7, #23]
 800886e:	e126      	b.n	8008abe <UART_SetConfig+0x30a>
 8008870:	2304      	movs	r3, #4
 8008872:	75fb      	strb	r3, [r7, #23]
 8008874:	e123      	b.n	8008abe <UART_SetConfig+0x30a>
 8008876:	2308      	movs	r3, #8
 8008878:	75fb      	strb	r3, [r7, #23]
 800887a:	e120      	b.n	8008abe <UART_SetConfig+0x30a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a93      	ldr	r2, [pc, #588]	; (8008ad0 <UART_SetConfig+0x31c>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d130      	bne.n	80088e8 <UART_SetConfig+0x134>
 8008886:	4b91      	ldr	r3, [pc, #580]	; (8008acc <UART_SetConfig+0x318>)
 8008888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800888c:	f003 030c 	and.w	r3, r3, #12
 8008890:	2b0c      	cmp	r3, #12
 8008892:	f200 8114 	bhi.w	8008abe <UART_SetConfig+0x30a>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <UART_SetConfig+0xe8>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088d1 	.word	0x080088d1
 80088a0:	08008abf 	.word	0x08008abf
 80088a4:	08008abf 	.word	0x08008abf
 80088a8:	08008abf 	.word	0x08008abf
 80088ac:	080088dd 	.word	0x080088dd
 80088b0:	08008abf 	.word	0x08008abf
 80088b4:	08008abf 	.word	0x08008abf
 80088b8:	08008abf 	.word	0x08008abf
 80088bc:	080088d7 	.word	0x080088d7
 80088c0:	08008abf 	.word	0x08008abf
 80088c4:	08008abf 	.word	0x08008abf
 80088c8:	08008abf 	.word	0x08008abf
 80088cc:	080088e3 	.word	0x080088e3
 80088d0:	2300      	movs	r3, #0
 80088d2:	75fb      	strb	r3, [r7, #23]
 80088d4:	e0f3      	b.n	8008abe <UART_SetConfig+0x30a>
 80088d6:	2302      	movs	r3, #2
 80088d8:	75fb      	strb	r3, [r7, #23]
 80088da:	e0f0      	b.n	8008abe <UART_SetConfig+0x30a>
 80088dc:	2304      	movs	r3, #4
 80088de:	75fb      	strb	r3, [r7, #23]
 80088e0:	e0ed      	b.n	8008abe <UART_SetConfig+0x30a>
 80088e2:	2308      	movs	r3, #8
 80088e4:	75fb      	strb	r3, [r7, #23]
 80088e6:	e0ea      	b.n	8008abe <UART_SetConfig+0x30a>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a79      	ldr	r2, [pc, #484]	; (8008ad4 <UART_SetConfig+0x320>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d11f      	bne.n	8008932 <UART_SetConfig+0x17e>
 80088f2:	4b76      	ldr	r3, [pc, #472]	; (8008acc <UART_SetConfig+0x318>)
 80088f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80088fc:	2b30      	cmp	r3, #48	; 0x30
 80088fe:	d015      	beq.n	800892c <UART_SetConfig+0x178>
 8008900:	2b30      	cmp	r3, #48	; 0x30
 8008902:	f200 80dc 	bhi.w	8008abe <UART_SetConfig+0x30a>
 8008906:	2b20      	cmp	r3, #32
 8008908:	d00a      	beq.n	8008920 <UART_SetConfig+0x16c>
 800890a:	2b20      	cmp	r3, #32
 800890c:	f200 80d7 	bhi.w	8008abe <UART_SetConfig+0x30a>
 8008910:	2b00      	cmp	r3, #0
 8008912:	d002      	beq.n	800891a <UART_SetConfig+0x166>
 8008914:	2b10      	cmp	r3, #16
 8008916:	d006      	beq.n	8008926 <UART_SetConfig+0x172>
 8008918:	e0d1      	b.n	8008abe <UART_SetConfig+0x30a>
 800891a:	2300      	movs	r3, #0
 800891c:	75fb      	strb	r3, [r7, #23]
 800891e:	e0ce      	b.n	8008abe <UART_SetConfig+0x30a>
 8008920:	2302      	movs	r3, #2
 8008922:	75fb      	strb	r3, [r7, #23]
 8008924:	e0cb      	b.n	8008abe <UART_SetConfig+0x30a>
 8008926:	2304      	movs	r3, #4
 8008928:	75fb      	strb	r3, [r7, #23]
 800892a:	e0c8      	b.n	8008abe <UART_SetConfig+0x30a>
 800892c:	2308      	movs	r3, #8
 800892e:	75fb      	strb	r3, [r7, #23]
 8008930:	e0c5      	b.n	8008abe <UART_SetConfig+0x30a>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a68      	ldr	r2, [pc, #416]	; (8008ad8 <UART_SetConfig+0x324>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d11f      	bne.n	800897c <UART_SetConfig+0x1c8>
 800893c:	4b63      	ldr	r3, [pc, #396]	; (8008acc <UART_SetConfig+0x318>)
 800893e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008942:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008946:	2bc0      	cmp	r3, #192	; 0xc0
 8008948:	d015      	beq.n	8008976 <UART_SetConfig+0x1c2>
 800894a:	2bc0      	cmp	r3, #192	; 0xc0
 800894c:	f200 80b7 	bhi.w	8008abe <UART_SetConfig+0x30a>
 8008950:	2b80      	cmp	r3, #128	; 0x80
 8008952:	d00a      	beq.n	800896a <UART_SetConfig+0x1b6>
 8008954:	2b80      	cmp	r3, #128	; 0x80
 8008956:	f200 80b2 	bhi.w	8008abe <UART_SetConfig+0x30a>
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <UART_SetConfig+0x1b0>
 800895e:	2b40      	cmp	r3, #64	; 0x40
 8008960:	d006      	beq.n	8008970 <UART_SetConfig+0x1bc>
 8008962:	e0ac      	b.n	8008abe <UART_SetConfig+0x30a>
 8008964:	2300      	movs	r3, #0
 8008966:	75fb      	strb	r3, [r7, #23]
 8008968:	e0a9      	b.n	8008abe <UART_SetConfig+0x30a>
 800896a:	2302      	movs	r3, #2
 800896c:	75fb      	strb	r3, [r7, #23]
 800896e:	e0a6      	b.n	8008abe <UART_SetConfig+0x30a>
 8008970:	2304      	movs	r3, #4
 8008972:	75fb      	strb	r3, [r7, #23]
 8008974:	e0a3      	b.n	8008abe <UART_SetConfig+0x30a>
 8008976:	2308      	movs	r3, #8
 8008978:	75fb      	strb	r3, [r7, #23]
 800897a:	e0a0      	b.n	8008abe <UART_SetConfig+0x30a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a56      	ldr	r2, [pc, #344]	; (8008adc <UART_SetConfig+0x328>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d124      	bne.n	80089d0 <UART_SetConfig+0x21c>
 8008986:	4b51      	ldr	r3, [pc, #324]	; (8008acc <UART_SetConfig+0x318>)
 8008988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008994:	d019      	beq.n	80089ca <UART_SetConfig+0x216>
 8008996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800899a:	f200 8090 	bhi.w	8008abe <UART_SetConfig+0x30a>
 800899e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a2:	d00c      	beq.n	80089be <UART_SetConfig+0x20a>
 80089a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089a8:	f200 8089 	bhi.w	8008abe <UART_SetConfig+0x30a>
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d003      	beq.n	80089b8 <UART_SetConfig+0x204>
 80089b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b4:	d006      	beq.n	80089c4 <UART_SetConfig+0x210>
 80089b6:	e082      	b.n	8008abe <UART_SetConfig+0x30a>
 80089b8:	2300      	movs	r3, #0
 80089ba:	75fb      	strb	r3, [r7, #23]
 80089bc:	e07f      	b.n	8008abe <UART_SetConfig+0x30a>
 80089be:	2302      	movs	r3, #2
 80089c0:	75fb      	strb	r3, [r7, #23]
 80089c2:	e07c      	b.n	8008abe <UART_SetConfig+0x30a>
 80089c4:	2304      	movs	r3, #4
 80089c6:	75fb      	strb	r3, [r7, #23]
 80089c8:	e079      	b.n	8008abe <UART_SetConfig+0x30a>
 80089ca:	2308      	movs	r3, #8
 80089cc:	75fb      	strb	r3, [r7, #23]
 80089ce:	e076      	b.n	8008abe <UART_SetConfig+0x30a>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a42      	ldr	r2, [pc, #264]	; (8008ae0 <UART_SetConfig+0x32c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d122      	bne.n	8008a20 <UART_SetConfig+0x26c>
 80089da:	4b3c      	ldr	r3, [pc, #240]	; (8008acc <UART_SetConfig+0x318>)
 80089dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80089e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089e8:	d017      	beq.n	8008a1a <UART_SetConfig+0x266>
 80089ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80089ee:	d866      	bhi.n	8008abe <UART_SetConfig+0x30a>
 80089f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089f4:	d00b      	beq.n	8008a0e <UART_SetConfig+0x25a>
 80089f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fa:	d860      	bhi.n	8008abe <UART_SetConfig+0x30a>
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d003      	beq.n	8008a08 <UART_SetConfig+0x254>
 8008a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a04:	d006      	beq.n	8008a14 <UART_SetConfig+0x260>
 8008a06:	e05a      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a08:	2301      	movs	r3, #1
 8008a0a:	75fb      	strb	r3, [r7, #23]
 8008a0c:	e057      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a0e:	2302      	movs	r3, #2
 8008a10:	75fb      	strb	r3, [r7, #23]
 8008a12:	e054      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a14:	2304      	movs	r3, #4
 8008a16:	75fb      	strb	r3, [r7, #23]
 8008a18:	e051      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	75fb      	strb	r3, [r7, #23]
 8008a1e:	e04e      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a2f      	ldr	r2, [pc, #188]	; (8008ae4 <UART_SetConfig+0x330>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d122      	bne.n	8008a70 <UART_SetConfig+0x2bc>
 8008a2a:	4b28      	ldr	r3, [pc, #160]	; (8008acc <UART_SetConfig+0x318>)
 8008a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a30:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a38:	d017      	beq.n	8008a6a <UART_SetConfig+0x2b6>
 8008a3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008a3e:	d83e      	bhi.n	8008abe <UART_SetConfig+0x30a>
 8008a40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a44:	d00b      	beq.n	8008a5e <UART_SetConfig+0x2aa>
 8008a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a4a:	d838      	bhi.n	8008abe <UART_SetConfig+0x30a>
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d003      	beq.n	8008a58 <UART_SetConfig+0x2a4>
 8008a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a54:	d006      	beq.n	8008a64 <UART_SetConfig+0x2b0>
 8008a56:	e032      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	75fb      	strb	r3, [r7, #23]
 8008a5c:	e02f      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a5e:	2302      	movs	r3, #2
 8008a60:	75fb      	strb	r3, [r7, #23]
 8008a62:	e02c      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a64:	2304      	movs	r3, #4
 8008a66:	75fb      	strb	r3, [r7, #23]
 8008a68:	e029      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a6a:	2308      	movs	r3, #8
 8008a6c:	75fb      	strb	r3, [r7, #23]
 8008a6e:	e026      	b.n	8008abe <UART_SetConfig+0x30a>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1c      	ldr	r2, [pc, #112]	; (8008ae8 <UART_SetConfig+0x334>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d138      	bne.n	8008aec <UART_SetConfig+0x338>
 8008a7a:	4b14      	ldr	r3, [pc, #80]	; (8008acc <UART_SetConfig+0x318>)
 8008a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a88:	d017      	beq.n	8008aba <UART_SetConfig+0x306>
 8008a8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008a8e:	d816      	bhi.n	8008abe <UART_SetConfig+0x30a>
 8008a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a94:	d00b      	beq.n	8008aae <UART_SetConfig+0x2fa>
 8008a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a9a:	d810      	bhi.n	8008abe <UART_SetConfig+0x30a>
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <UART_SetConfig+0x2f4>
 8008aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aa4:	d006      	beq.n	8008ab4 <UART_SetConfig+0x300>
 8008aa6:	e00a      	b.n	8008abe <UART_SetConfig+0x30a>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75fb      	strb	r3, [r7, #23]
 8008aac:	e007      	b.n	8008abe <UART_SetConfig+0x30a>
 8008aae:	2302      	movs	r3, #2
 8008ab0:	75fb      	strb	r3, [r7, #23]
 8008ab2:	e004      	b.n	8008abe <UART_SetConfig+0x30a>
 8008ab4:	2304      	movs	r3, #4
 8008ab6:	75fb      	strb	r3, [r7, #23]
 8008ab8:	e001      	b.n	8008abe <UART_SetConfig+0x30a>
 8008aba:	2308      	movs	r3, #8
 8008abc:	75fb      	strb	r3, [r7, #23]
 8008abe:	bf00      	nop
 8008ac0:	e015      	b.n	8008aee <UART_SetConfig+0x33a>
 8008ac2:	bf00      	nop
 8008ac4:	efff69f3 	.word	0xefff69f3
 8008ac8:	40011000 	.word	0x40011000
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	40004400 	.word	0x40004400
 8008ad4:	40004800 	.word	0x40004800
 8008ad8:	40004c00 	.word	0x40004c00
 8008adc:	40005000 	.word	0x40005000
 8008ae0:	40011400 	.word	0x40011400
 8008ae4:	40007800 	.word	0x40007800
 8008ae8:	40007c00 	.word	0x40007c00
 8008aec:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008af6:	d16c      	bne.n	8008bd2 <UART_SetConfig+0x41e>
  {
    switch (clocksource)
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	2b08      	cmp	r3, #8
 8008afc:	d854      	bhi.n	8008ba8 <UART_SetConfig+0x3f4>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <UART_SetConfig+0x350>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b45 	.word	0x08008b45
 8008b0c:	08008b61 	.word	0x08008b61
 8008b10:	08008ba9 	.word	0x08008ba9
 8008b14:	08008b77 	.word	0x08008b77
 8008b18:	08008ba9 	.word	0x08008ba9
 8008b1c:	08008ba9 	.word	0x08008ba9
 8008b20:	08008ba9 	.word	0x08008ba9
 8008b24:	08008b93 	.word	0x08008b93
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008b28:	f7fd fe62 	bl	80067f0 <HAL_RCC_GetPCLK1Freq>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	005a      	lsls	r2, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	441a      	add	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b40:	82bb      	strh	r3, [r7, #20]
      break;
 8008b42:	e034      	b.n	8008bae <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008b44:	f7fd fe68 	bl	8006818 <HAL_RCC_GetPCLK2Freq>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	005a      	lsls	r2, r3, #1
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	085b      	lsrs	r3, r3, #1
 8008b52:	441a      	add	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b5c:	82bb      	strh	r3, [r7, #20]
      break;
 8008b5e:	e026      	b.n	8008bae <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	085a      	lsrs	r2, r3, #1
 8008b66:	4b51      	ldr	r3, [pc, #324]	; (8008cac <UART_SetConfig+0x4f8>)
 8008b68:	4413      	add	r3, r2
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	6852      	ldr	r2, [r2, #4]
 8008b6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b72:	82bb      	strh	r3, [r7, #20]
      break;
 8008b74:	e01b      	b.n	8008bae <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008b76:	f7fd fd79 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	005a      	lsls	r2, r3, #1
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	085b      	lsrs	r3, r3, #1
 8008b84:	441a      	add	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b8e:	82bb      	strh	r3, [r7, #20]
      break;
 8008b90:	e00d      	b.n	8008bae <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	085b      	lsrs	r3, r3, #1
 8008b98:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba4:	82bb      	strh	r3, [r7, #20]
      break;
 8008ba6:	e002      	b.n	8008bae <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	74fb      	strb	r3, [r7, #19]
      break;
 8008bac:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8008bae:	8abb      	ldrh	r3, [r7, #20]
 8008bb0:	f023 030f 	bic.w	r3, r3, #15
 8008bb4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008bb6:	8abb      	ldrh	r3, [r7, #20]
 8008bb8:	105b      	asrs	r3, r3, #1
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f003 0307 	and.w	r3, r3, #7
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	897b      	ldrh	r3, [r7, #10]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	897a      	ldrh	r2, [r7, #10]
 8008bce:	60da      	str	r2, [r3, #12]
 8008bd0:	e067      	b.n	8008ca2 <UART_SetConfig+0x4ee>
  }
  else
  {
    switch (clocksource)
 8008bd2:	7dfb      	ldrb	r3, [r7, #23]
 8008bd4:	2b08      	cmp	r3, #8
 8008bd6:	d861      	bhi.n	8008c9c <UART_SetConfig+0x4e8>
 8008bd8:	a201      	add	r2, pc, #4	; (adr r2, 8008be0 <UART_SetConfig+0x42c>)
 8008bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bde:	bf00      	nop
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c25 	.word	0x08008c25
 8008be8:	08008c45 	.word	0x08008c45
 8008bec:	08008c9d 	.word	0x08008c9d
 8008bf0:	08008c61 	.word	0x08008c61
 8008bf4:	08008c9d 	.word	0x08008c9d
 8008bf8:	08008c9d 	.word	0x08008c9d
 8008bfc:	08008c9d 	.word	0x08008c9d
 8008c00:	08008c81 	.word	0x08008c81
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008c04:	f7fd fdf4 	bl	80067f0 <HAL_RCC_GetPCLK1Freq>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	085b      	lsrs	r3, r3, #1
 8008c10:	441a      	add	r2, r3
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	60da      	str	r2, [r3, #12]
      break;
 8008c22:	e03e      	b.n	8008ca2 <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008c24:	f7fd fdf8 	bl	8006818 <HAL_RCC_GetPCLK2Freq>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	085b      	lsrs	r3, r3, #1
 8008c30:	441a      	add	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c3a:	b29a      	uxth	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	60da      	str	r2, [r3, #12]
      break;
 8008c42:	e02e      	b.n	8008ca2 <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	085a      	lsrs	r2, r3, #1
 8008c4a:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <UART_SetConfig+0x4fc>)
 8008c4c:	4413      	add	r3, r2
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	6852      	ldr	r2, [r2, #4]
 8008c52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	60da      	str	r2, [r3, #12]
      break;
 8008c5e:	e020      	b.n	8008ca2 <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008c60:	f7fd fd04 	bl	800666c <HAL_RCC_GetSysClockFreq>
 8008c64:	4602      	mov	r2, r0
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	085b      	lsrs	r3, r3, #1
 8008c6c:	441a      	add	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60da      	str	r2, [r3, #12]
      break;
 8008c7e:	e010      	b.n	8008ca2 <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	085b      	lsrs	r3, r3, #1
 8008c86:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c92:	b29a      	uxth	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60da      	str	r2, [r3, #12]
      break;
 8008c9a:	e002      	b.n	8008ca2 <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	74fb      	strb	r3, [r7, #19]
      break;
 8008ca0:	bf00      	nop
    }
  }

  return ret;
 8008ca2:	7cfb      	ldrb	r3, [r7, #19]

}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	01e84800 	.word	0x01e84800
 8008cb0:	00f42400 	.word	0x00f42400

08008cb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00a      	beq.n	8008cde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	f003 0304 	and.w	r3, r3, #4
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00a      	beq.n	8008d22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	f003 0308 	and.w	r3, r3, #8
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00a      	beq.n	8008d66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	430a      	orrs	r2, r1
 8008d86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01a      	beq.n	8008dca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db2:	d10a      	bne.n	8008dca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	605a      	str	r2, [r3, #4]
  }
}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af02      	add	r7, sp, #8
 8008dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008e0a:	f7fa fd93 	bl	8003934 <HAL_GetTick>
 8008e0e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d10e      	bne.n	8008e3c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e1e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2200      	movs	r2, #0
 8008e28:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f7ff fc76 	bl	800871e <UART_WaitOnFlagUntilTimeout>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d001      	beq.n	8008e3c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e00c      	b.n	8008e56 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2220      	movs	r2, #32
 8008e40:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2220      	movs	r2, #32
 8008e48:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d027      	beq.n	8008eca <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	4b2f      	ldr	r3, [pc, #188]	; (8008f40 <FMC_SDRAM_Init+0xe0>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008e90:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008e96:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008e9c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8008ea2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8008ea8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8008eae:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8008eb4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008eba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	e032      	b.n	8008f30 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ed6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ee0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008ee6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008ef4:	68ba      	ldr	r2, [r7, #8]
 8008ef6:	4b12      	ldr	r3, [pc, #72]	; (8008f40 <FMC_SDRAM_Init+0xe0>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f04:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008f0a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 8008f10:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008f16:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008f1c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3714      	adds	r7, #20
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	ffff8000 	.word	0xffff8000

08008f44 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008f54:	2300      	movs	r3, #0
 8008f56:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d02e      	beq.n	8008fbc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008f6a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	3b01      	subs	r3, #1
 8008f78:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008f7a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	3b01      	subs	r3, #1
 8008f82:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008f84:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008f8e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008f98:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	695b      	ldr	r3, [r3, #20]
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8008fa2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	3b01      	subs	r3, #1
 8008faa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008fac:	4313      	orrs	r3, r2
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	609a      	str	r2, [r3, #8]
 8008fba:	e039      	b.n	8009030 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	4b1e      	ldr	r3, [pc, #120]	; (8009040 <FMC_SDRAM_Timing_Init+0xfc>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	68db      	ldr	r3, [r3, #12]
 8008fe6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008fee:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008ffe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	3b01      	subs	r3, #1
 8009006:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8009008:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	3b01      	subs	r3, #1
 8009010:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 8009012:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	3b01      	subs	r3, #1
 800901a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800901c:	4313      	orrs	r3, r2
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	4313      	orrs	r3, r2
 8009022:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	371c      	adds	r7, #28
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	ff0f0fff 	.word	0xff0f0fff

08009044 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800905c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	3b01      	subs	r3, #1
 8009064:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009066:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	68db      	ldr	r3, [r3, #12]
 800906c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800906e:	4313      	orrs	r3, r2
 8009070:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	695a      	ldr	r2, [r3, #20]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	005b      	lsls	r3, r3, #1
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <lcd_start_page>:
#include "stm32746g_discovery_audio.h"
#include "stlogo.h"

void lcd_start_page(void);

void lcd_start_page(void){
 80090ac:	b598      	push	{r3, r4, r7, lr}
 80090ae:	af00      	add	r7, sp, #0
 	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 80090b0:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80090b4:	2001      	movs	r0, #1
 80090b6:	f7f9 fc85 	bl	80029c4 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 80090ba:	2001      	movs	r0, #1
 80090bc:	f7f9 fce2 	bl	8002a84 <BSP_LCD_SelectLayer>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80090c0:	4828      	ldr	r0, [pc, #160]	; (8009164 <lcd_start_page+0xb8>)
 80090c2:	f7f9 fd21 	bl	8002b08 <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80090c6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ca:	f7f9 fd03 	bl	8002ad4 <BSP_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80090ce:	f04f 30ff 	mov.w	r0, #4294967295
 80090d2:	f7f9 fd33 	bl	8002b3c <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80090d6:	4824      	ldr	r0, [pc, #144]	; (8009168 <lcd_start_page+0xbc>)
 80090d8:	f7f9 fce4 	bl	8002aa4 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G DSP", CENTER_MODE);
 80090dc:	2301      	movs	r3, #1
 80090de:	4a23      	ldr	r2, [pc, #140]	; (800916c <lcd_start_page+0xc0>)
 80090e0:	210a      	movs	r1, #10
 80090e2:	2000      	movs	r0, #0
 80090e4:	f7f9 fd96 	bl	8002c14 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Master ESET", CENTER_MODE);
 80090e8:	2301      	movs	r3, #1
 80090ea:	4a21      	ldr	r2, [pc, #132]	; (8009170 <lcd_start_page+0xc4>)
 80090ec:	2123      	movs	r1, #35	; 0x23
 80090ee:	2000      	movs	r0, #0
 80090f0:	f7f9 fd90 	bl	8002c14 <BSP_LCD_DisplayStringAt>

    /* Draw Bitmap */
     //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)logo_usmb);
     BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 80090f4:	f7f9 fc3e 	bl	8002974 <BSP_LCD_GetXSize>
 80090f8:	4603      	mov	r3, r0
 80090fa:	3b50      	subs	r3, #80	; 0x50
 80090fc:	085b      	lsrs	r3, r3, #1
 80090fe:	4a1d      	ldr	r2, [pc, #116]	; (8009174 <lcd_start_page+0xc8>)
 8009100:	2141      	movs	r1, #65	; 0x41
 8009102:	4618      	mov	r0, r3
 8009104:	f7f9 fe96 	bl	8002e34 <BSP_LCD_DrawBitmap>
     BSP_LCD_SetFont(&Font12);
 8009108:	481b      	ldr	r0, [pc, #108]	; (8009178 <lcd_start_page+0xcc>)
 800910a:	f7f9 fcfd 	bl	8002b08 <BSP_LCD_SetFont>
     BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) Master ESET", CENTER_MODE);
 800910e:	f7f9 fc45 	bl	800299c <BSP_LCD_GetYSize>
 8009112:	4603      	mov	r3, r0
 8009114:	b29b      	uxth	r3, r3
 8009116:	3b14      	subs	r3, #20
 8009118:	b299      	uxth	r1, r3
 800911a:	2301      	movs	r3, #1
 800911c:	4a17      	ldr	r2, [pc, #92]	; (800917c <lcd_start_page+0xd0>)
 800911e:	2000      	movs	r0, #0
 8009120:	f7f9 fd78 	bl	8002c14 <BSP_LCD_DisplayStringAt>

     BSP_LCD_SetFont(&Font16);
 8009124:	4816      	ldr	r0, [pc, #88]	; (8009180 <lcd_start_page+0xd4>)
 8009126:	f7f9 fcef 	bl	8002b08 <BSP_LCD_SetFont>
     BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800912a:	4816      	ldr	r0, [pc, #88]	; (8009184 <lcd_start_page+0xd8>)
 800912c:	f7f9 fcba 	bl	8002aa4 <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 8009130:	f7f9 fc34 	bl	800299c <BSP_LCD_GetYSize>
 8009134:	4603      	mov	r3, r0
 8009136:	085b      	lsrs	r3, r3, #1
 8009138:	b29b      	uxth	r3, r3
 800913a:	330f      	adds	r3, #15
 800913c:	b29c      	uxth	r4, r3
 800913e:	f7f9 fc19 	bl	8002974 <BSP_LCD_GetXSize>
 8009142:	4603      	mov	r3, r0
 8009144:	b29a      	uxth	r2, r3
 8009146:	233c      	movs	r3, #60	; 0x3c
 8009148:	4621      	mov	r1, r4
 800914a:	2000      	movs	r0, #0
 800914c:	f7f9 ff24 	bl	8002f98 <BSP_LCD_FillRect>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	f7f9 fca6 	bl	8002aa4 <BSP_LCD_SetTextColor>
     BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8009158:	480a      	ldr	r0, [pc, #40]	; (8009184 <lcd_start_page+0xd8>)
 800915a:	f7f9 fcbb 	bl	8002ad4 <BSP_LCD_SetBackColor>
     //BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
}
 800915e:	bf00      	nop
 8009160:	bd98      	pop	{r3, r4, r7, pc}
 8009162:	bf00      	nop
 8009164:	20000034 	.word	0x20000034
 8009168:	ff000080 	.word	0xff000080
 800916c:	0800c468 	.word	0x0800c468
 8009170:	0800c478 	.word	0x0800c478
 8009174:	0800efb4 	.word	0x0800efb4
 8009178:	20000044 	.word	0x20000044
 800917c:	0800c484 	.word	0x0800c484
 8009180:	2000003c 	.word	0x2000003c
 8009184:	ff0000ff 	.word	0xff0000ff

08009188 <SCB_EnableICache>:
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800918c:	f3bf 8f4f 	dsb	sy
}
 8009190:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009192:	f3bf 8f6f 	isb	sy
}
 8009196:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <SCB_EnableICache+0x3c>)
 800919a:	2200      	movs	r2, #0
 800919c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80091a0:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <SCB_EnableICache+0x3c>)
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	4a07      	ldr	r2, [pc, #28]	; (80091c4 <SCB_EnableICache+0x3c>)
 80091a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80091ac:	f3bf 8f4f 	dsb	sy
}
 80091b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091b2:	f3bf 8f6f 	isb	sy
}
 80091b6:	bf00      	nop
}
 80091b8:	bf00      	nop
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	e000ed00 	.word	0xe000ed00

080091c8 <SCB_EnableDCache>:
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 80091ce:	4b1f      	ldr	r3, [pc, #124]	; (800924c <SCB_EnableDCache+0x84>)
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80091d6:	f3bf 8f4f 	dsb	sy
}
 80091da:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80091dc:	4b1b      	ldr	r3, [pc, #108]	; (800924c <SCB_EnableDCache+0x84>)
 80091de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091e2:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	0b5b      	lsrs	r3, r3, #13
 80091e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80091ec:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	08db      	lsrs	r3, r3, #3
 80091f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091f6:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	015a      	lsls	r2, r3, #5
 80091fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8009200:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009206:	4911      	ldr	r1, [pc, #68]	; (800924c <SCB_EnableDCache+0x84>)
 8009208:	4313      	orrs	r3, r2
 800920a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	1e5a      	subs	r2, r3, #1
 8009212:	60ba      	str	r2, [r7, #8]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1ef      	bne.n	80091f8 <SCB_EnableDCache+0x30>
    } while(sets--);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	1e5a      	subs	r2, r3, #1
 800921c:	60fa      	str	r2, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1e5      	bne.n	80091ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8009222:	f3bf 8f4f 	dsb	sy
}
 8009226:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009228:	4b08      	ldr	r3, [pc, #32]	; (800924c <SCB_EnableDCache+0x84>)
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	4a07      	ldr	r2, [pc, #28]	; (800924c <SCB_EnableDCache+0x84>)
 800922e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009232:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009234:	f3bf 8f4f 	dsb	sy
}
 8009238:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800923a:	f3bf 8f6f 	isb	sy
}
 800923e:	bf00      	nop
}
 8009240:	bf00      	nop
 8009242:	3714      	adds	r7, #20
 8009244:	46bd      	mov	sp, r7
 8009246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924a:	4770      	bx	lr
 800924c:	e000ed00 	.word	0xe000ed00

08009250 <initGpio>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void initGpio(void){
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009256:	1d3b      	adds	r3, r7, #4
 8009258:	2200      	movs	r2, #0
 800925a:	601a      	str	r2, [r3, #0]
 800925c:	605a      	str	r2, [r3, #4]
 800925e:	609a      	str	r2, [r3, #8]
 8009260:	60da      	str	r2, [r3, #12]
 8009262:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8009264:	2200      	movs	r2, #0
 8009266:	2101      	movs	r1, #1
 8009268:	4809      	ldr	r0, [pc, #36]	; (8009290 <initGpio+0x40>)
 800926a:	f7fb fcc1 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 800926e:	2301      	movs	r3, #1
 8009270:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009272:	2301      	movs	r3, #1
 8009274:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800927a:	2303      	movs	r3, #3
 800927c:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800927e:	1d3b      	adds	r3, r7, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4803      	ldr	r0, [pc, #12]	; (8009290 <initGpio+0x40>)
 8009284:	f7fb f9fc 	bl	8004680 <HAL_GPIO_Init>
}
 8009288:	bf00      	nop
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	40020000 	.word	0x40020000

08009294 <compute_nb_ech_periode>:
	HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputRight,1,SAI_WAIT);
}


uint32_t compute_nb_ech_periode(uint32_t i_note_frequency)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
	return AUDIOFREQ_16K / i_note_frequency;
 800929c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <compute_nb_ech_note>:

uint32_t compute_nb_ech_note(float i_note_duree)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	ed87 0a01 	vstr	s0, [r7, #4]
	return AUDIOFREQ_16K * i_note_duree;
 80092be:	edd7 7a01 	vldr	s15, [r7, #4]
 80092c2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80092e0 <compute_nb_ech_note+0x2c>
 80092c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80092ce:	ee17 3a90 	vmov	r3, s15
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	467a0000 	.word	0x467a0000
 80092e4:	00000000 	.word	0x00000000

080092e8 <init_sinus_table>:


void init_sinus_table(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
    for  (uint32_t i = 0; i < BUFFER_SIZE_SINUS; i++)
 80092ee:	2300      	movs	r3, #0
 80092f0:	607b      	str	r3, [r7, #4]
 80092f2:	e030      	b.n	8009356 <init_sinus_table+0x6e>
    {
        sinusTable[i] = AMPLITUDE * sin((2 * PI * i) / AUDIOFREQ_16K);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7f7 f8c9 	bl	800048c <__aeabi_ui2d>
 80092fa:	a31f      	add	r3, pc, #124	; (adr r3, 8009378 <init_sinus_table+0x90>)
 80092fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009300:	f7f7 f93e 	bl	8000580 <__aeabi_dmul>
 8009304:	4602      	mov	r2, r0
 8009306:	460b      	mov	r3, r1
 8009308:	4610      	mov	r0, r2
 800930a:	4619      	mov	r1, r3
 800930c:	f04f 0200 	mov.w	r2, #0
 8009310:	4b17      	ldr	r3, [pc, #92]	; (8009370 <init_sinus_table+0x88>)
 8009312:	f7f7 fa5f 	bl	80007d4 <__aeabi_ddiv>
 8009316:	4602      	mov	r2, r0
 8009318:	460b      	mov	r3, r1
 800931a:	ec43 2b17 	vmov	d7, r2, r3
 800931e:	eeb0 0a47 	vmov.f32	s0, s14
 8009322:	eef0 0a67 	vmov.f32	s1, s15
 8009326:	f002 f85b 	bl	800b3e0 <sin>
 800932a:	ec51 0b10 	vmov	r0, r1, d0
 800932e:	a30e      	add	r3, pc, #56	; (adr r3, 8009368 <init_sinus_table+0x80>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f7 f924 	bl	8000580 <__aeabi_dmul>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4610      	mov	r0, r2
 800933e:	4619      	mov	r1, r3
 8009340:	f7f7 fbb8 	bl	8000ab4 <__aeabi_d2iz>
 8009344:	4603      	mov	r3, r0
 8009346:	b219      	sxth	r1, r3
 8009348:	4a0a      	ldr	r2, [pc, #40]	; (8009374 <init_sinus_table+0x8c>)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for  (uint32_t i = 0; i < BUFFER_SIZE_SINUS; i++)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3301      	adds	r3, #1
 8009354:	607b      	str	r3, [r7, #4]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800935c:	d3ca      	bcc.n	80092f4 <init_sinus_table+0xc>
    }
}
 800935e:	bf00      	nop
 8009360:	bf00      	nop
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	00000000 	.word	0x00000000
 800936c:	4072c000 	.word	0x4072c000
 8009370:	40cf4000 	.word	0x40cf4000
 8009374:	20000238 	.word	0x20000238
 8009378:	fc8b007a 	.word	0xfc8b007a
 800937c:	401921fa 	.word	0x401921fa

08009380 <round_value>:
        buffer[i] = 0;
    }
}

int16_t round_value(float i_value)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	ed87 0a01 	vstr	s0, [r7, #4]
    if (i_value > 0)
 800938a:	edd7 7a01 	vldr	s15, [r7, #4]
 800938e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009396:	dd10      	ble.n	80093ba <round_value+0x3a>
    {
        return (int16_t)(i_value + 0.5);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7f7 f899 	bl	80004d0 <__aeabi_f2d>
 800939e:	f04f 0200 	mov.w	r2, #0
 80093a2:	4b10      	ldr	r3, [pc, #64]	; (80093e4 <round_value+0x64>)
 80093a4:	f7f6 ff36 	bl	8000214 <__adddf3>
 80093a8:	4602      	mov	r2, r0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	f7f7 fb80 	bl	8000ab4 <__aeabi_d2iz>
 80093b4:	4603      	mov	r3, r0
 80093b6:	b21b      	sxth	r3, r3
 80093b8:	e00f      	b.n	80093da <round_value+0x5a>
    }
    else
    {
        return (int16_t)(i_value - 0.5);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7f7 f888 	bl	80004d0 <__aeabi_f2d>
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <round_value+0x64>)
 80093c6:	f7f6 ff23 	bl	8000210 <__aeabi_dsub>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4610      	mov	r0, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	f7f7 fb6f 	bl	8000ab4 <__aeabi_d2iz>
 80093d6:	4603      	mov	r3, r0
 80093d8:	b21b      	sxth	r3, r3
    }
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	3fe00000 	.word	0x3fe00000

080093e8 <note_create_DDS>:
}



void note_create_DDS(uint32_t i_note_frequency, float i_note_duree, int16_t *output_buffer)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b088      	sub	sp, #32
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80093f4:	6079      	str	r1, [r7, #4]
    // Variable declaration
    uint32_t index_max = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	617b      	str	r3, [r7, #20]
    uint32_t j         = 0U;
 80093fa:	2300      	movs	r3, #0
 80093fc:	61fb      	str	r3, [r7, #28]

    // Index max computation
    index_max = compute_nb_ech_note(i_note_duree);
 80093fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8009402:	f7ff ff57 	bl	80092b4 <compute_nb_ech_note>
 8009406:	6178      	str	r0, [r7, #20]

    for (uint32_t i = 0; i < index_max; i++)
 8009408:	2300      	movs	r3, #0
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	e018      	b.n	8009440 <note_create_DDS+0x58>
    {
        // Get sinus amplitude
        output_buffer[i]  = sinusTable[j];
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	4413      	add	r3, r2
 8009416:	490f      	ldr	r1, [pc, #60]	; (8009454 <note_create_DDS+0x6c>)
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800941e:	801a      	strh	r2, [r3, #0]

        // Incremete sinus index.
        j = (j + i_note_frequency) % BUFFER_SIZE_SINUS;
 8009420:	69fa      	ldr	r2, [r7, #28]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	4413      	add	r3, r2
 8009426:	4a0c      	ldr	r2, [pc, #48]	; (8009458 <note_create_DDS+0x70>)
 8009428:	fba2 1203 	umull	r1, r2, r2, r3
 800942c:	0a92      	lsrs	r2, r2, #10
 800942e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8009432:	fb01 f202 	mul.w	r2, r1, r2
 8009436:	1a9b      	subs	r3, r3, r2
 8009438:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < index_max; i++)
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	3301      	adds	r3, #1
 800943e:	61bb      	str	r3, [r7, #24]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	429a      	cmp	r2, r3
 8009446:	d3e2      	bcc.n	800940e <note_create_DDS+0x26>
    }
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	3720      	adds	r7, #32
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20000238 	.word	0x20000238
 8009458:	10624dd3 	.word	0x10624dd3
 800945c:	00000000 	.word	0x00000000

08009460 <note_create_classic>:

void note_create_classic(uint32_t i_note_frequency, float i_note_duree, int16_t *output_buffer)
{
 8009460:	b5b0      	push	{r4, r5, r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	ed87 0a02 	vstr	s0, [r7, #8]
 800946c:	6079      	str	r1, [r7, #4]
    // Variable declaration
    uint32_t index_max = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	613b      	str	r3, [r7, #16]

    // Index max computation
    index_max = compute_nb_ech_note(i_note_duree);
 8009472:	ed97 0a02 	vldr	s0, [r7, #8]
 8009476:	f7ff ff1d 	bl	80092b4 <compute_nb_ech_note>
 800947a:	6138      	str	r0, [r7, #16]

    for (uint32_t i = 0; i < index_max; i++)
 800947c:	2300      	movs	r3, #0
 800947e:	617b      	str	r3, [r7, #20]
 8009480:	e039      	b.n	80094f6 <note_create_classic+0x96>
    {
        // Sinus computation
        output_buffer[i]  = AMPLITUDE * sin((2 * PI * i) / compute_nb_ech_periode(i_note_frequency));
 8009482:	6978      	ldr	r0, [r7, #20]
 8009484:	f7f7 f802 	bl	800048c <__aeabi_ui2d>
 8009488:	a31f      	add	r3, pc, #124	; (adr r3, 8009508 <note_create_classic+0xa8>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f7 f877 	bl	8000580 <__aeabi_dmul>
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	4614      	mov	r4, r2
 8009498:	461d      	mov	r5, r3
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fefa 	bl	8009294 <compute_nb_ech_periode>
 80094a0:	4603      	mov	r3, r0
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f6 fff2 	bl	800048c <__aeabi_ui2d>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	4620      	mov	r0, r4
 80094ae:	4629      	mov	r1, r5
 80094b0:	f7f7 f990 	bl	80007d4 <__aeabi_ddiv>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	ec43 2b17 	vmov	d7, r2, r3
 80094bc:	eeb0 0a47 	vmov.f32	s0, s14
 80094c0:	eef0 0a67 	vmov.f32	s1, s15
 80094c4:	f001 ff8c 	bl	800b3e0 <sin>
 80094c8:	ec51 0b10 	vmov	r0, r1, d0
 80094cc:	a310      	add	r3, pc, #64	; (adr r3, 8009510 <note_create_classic+0xb0>)
 80094ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d2:	f7f7 f855 	bl	8000580 <__aeabi_dmul>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4610      	mov	r0, r2
 80094dc:	4619      	mov	r1, r3
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	005b      	lsls	r3, r3, #1
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	18d4      	adds	r4, r2, r3
 80094e6:	f7f7 fae5 	bl	8000ab4 <__aeabi_d2iz>
 80094ea:	4603      	mov	r3, r0
 80094ec:	b21b      	sxth	r3, r3
 80094ee:	8023      	strh	r3, [r4, #0]
    for (uint32_t i = 0; i < index_max; i++)
 80094f0:	697b      	ldr	r3, [r7, #20]
 80094f2:	3301      	adds	r3, #1
 80094f4:	617b      	str	r3, [r7, #20]
 80094f6:	697a      	ldr	r2, [r7, #20]
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3c1      	bcc.n	8009482 <note_create_classic+0x22>
    }
}
 80094fe:	bf00      	nop
 8009500:	bf00      	nop
 8009502:	3718      	adds	r7, #24
 8009504:	46bd      	mov	sp, r7
 8009506:	bdb0      	pop	{r4, r5, r7, pc}
 8009508:	fc8b007a 	.word	0xfc8b007a
 800950c:	401921fa 	.word	0x401921fa
 8009510:	00000000 	.word	0x00000000
 8009514:	4072c000 	.word	0x4072c000

08009518 <note_create_IIR>:

void note_create_IIR(uint32_t i_note_frequency, float i_note_duree, int16_t *output_buffer)
{
 8009518:	b5b0      	push	{r4, r5, r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af00      	add	r7, sp, #0
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	ed87 0a02 	vstr	s0, [r7, #8]
 8009524:	6079      	str	r1, [r7, #4]
    // Variable declaration
    uint32_t index_max;
    uint32_t nb_ech_periode;
    float    coef_table[2] = {0};
 8009526:	f107 0314 	add.w	r3, r7, #20
 800952a:	2200      	movs	r2, #0
 800952c:	601a      	str	r2, [r3, #0]
 800952e:	605a      	str	r2, [r3, #4]

    // Index max computation
    index_max      = compute_nb_ech_note(i_note_duree);
 8009530:	ed97 0a02 	vldr	s0, [r7, #8]
 8009534:	f7ff febe 	bl	80092b4 <compute_nb_ech_note>
 8009538:	6238      	str	r0, [r7, #32]
    nb_ech_periode = compute_nb_ech_periode(i_note_frequency);
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f7ff feaa 	bl	8009294 <compute_nb_ech_periode>
 8009540:	61f8      	str	r0, [r7, #28]

    // Output initialization
    output_buffer[0] = 0;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	801a      	strh	r2, [r3, #0]
    output_buffer[1] = round_value((float)AMPLITUDE * sin((2 * PI) / nb_ech_periode));
 8009548:	69f8      	ldr	r0, [r7, #28]
 800954a:	f7f6 ff9f 	bl	800048c <__aeabi_ui2d>
 800954e:	4602      	mov	r2, r0
 8009550:	460b      	mov	r3, r1
 8009552:	a150      	add	r1, pc, #320	; (adr r1, 8009694 <note_create_IIR+0x17c>)
 8009554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009558:	f7f7 f93c 	bl	80007d4 <__aeabi_ddiv>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	ec43 2b17 	vmov	d7, r2, r3
 8009564:	eeb0 0a47 	vmov.f32	s0, s14
 8009568:	eef0 0a67 	vmov.f32	s1, s15
 800956c:	f001 ff38 	bl	800b3e0 <sin>
 8009570:	ec51 0b10 	vmov	r0, r1, d0
 8009574:	a349      	add	r3, pc, #292	; (adr r3, 800969c <note_create_IIR+0x184>)
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f7f7 f801 	bl	8000580 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4610      	mov	r0, r2
 8009584:	4619      	mov	r1, r3
 8009586:	f7f7 fabd 	bl	8000b04 <__aeabi_d2f>
 800958a:	4602      	mov	r2, r0
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	1c9c      	adds	r4, r3, #2
 8009590:	ee00 2a10 	vmov	s0, r2
 8009594:	f7ff fef4 	bl	8009380 <round_value>
 8009598:	4603      	mov	r3, r0
 800959a:	8023      	strh	r3, [r4, #0]

    // Coefficient computation
    coef_table[0]  = sin((2 * PI * 2) / nb_ech_periode) /
 800959c:	69f8      	ldr	r0, [r7, #28]
 800959e:	f7f6 ff75 	bl	800048c <__aeabi_ui2d>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	a13f      	add	r1, pc, #252	; (adr r1, 80096a4 <note_create_IIR+0x18c>)
 80095a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095ac:	f7f7 f912 	bl	80007d4 <__aeabi_ddiv>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	ec43 2b17 	vmov	d7, r2, r3
 80095b8:	eeb0 0a47 	vmov.f32	s0, s14
 80095bc:	eef0 0a67 	vmov.f32	s1, s15
 80095c0:	f001 ff0e 	bl	800b3e0 <sin>
 80095c4:	ec55 4b10 	vmov	r4, r5, d0
                     sin((2 * PI) / nb_ech_periode);
 80095c8:	69f8      	ldr	r0, [r7, #28]
 80095ca:	f7f6 ff5f 	bl	800048c <__aeabi_ui2d>
 80095ce:	4602      	mov	r2, r0
 80095d0:	460b      	mov	r3, r1
 80095d2:	a130      	add	r1, pc, #192	; (adr r1, 8009694 <note_create_IIR+0x17c>)
 80095d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d8:	f7f7 f8fc 	bl	80007d4 <__aeabi_ddiv>
 80095dc:	4602      	mov	r2, r0
 80095de:	460b      	mov	r3, r1
 80095e0:	ec43 2b17 	vmov	d7, r2, r3
 80095e4:	eeb0 0a47 	vmov.f32	s0, s14
 80095e8:	eef0 0a67 	vmov.f32	s1, s15
 80095ec:	f001 fef8 	bl	800b3e0 <sin>
 80095f0:	ec53 2b10 	vmov	r2, r3, d0
    coef_table[0]  = sin((2 * PI * 2) / nb_ech_periode) /
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f7 f8ec 	bl	80007d4 <__aeabi_ddiv>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4610      	mov	r0, r2
 8009602:	4619      	mov	r1, r3
 8009604:	f7f7 fa7e 	bl	8000b04 <__aeabi_d2f>
 8009608:	4603      	mov	r3, r0
 800960a:	617b      	str	r3, [r7, #20]
    coef_table[1]  = 1;
 800960c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009610:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = 2; i < index_max; i++)
 8009612:	2302      	movs	r3, #2
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
 8009616:	e02f      	b.n	8009678 <note_create_IIR+0x160>
    {
        // Compute filter output
        output_buffer[i] = round_value((float) (output_buffer[i - 1] * coef_table[0]) - (output_buffer[i - 2] * coef_table[1]));
 8009618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800961e:	4413      	add	r3, r2
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800962a:	ee07 3a90 	vmov	s15, r3
 800962e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009632:	edd7 7a05 	vldr	s15, [r7, #20]
 8009636:	ee27 7a27 	vmul.f32	s14, s14, s15
 800963a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800963c:	4b14      	ldr	r3, [pc, #80]	; (8009690 <note_create_IIR+0x178>)
 800963e:	4413      	add	r3, r2
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4413      	add	r3, r2
 8009646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009652:	edd7 7a06 	vldr	s15, [r7, #24]
 8009656:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800965a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800965e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	18d4      	adds	r4, r2, r3
 8009666:	eeb0 0a67 	vmov.f32	s0, s15
 800966a:	f7ff fe89 	bl	8009380 <round_value>
 800966e:	4603      	mov	r3, r0
 8009670:	8023      	strh	r3, [r4, #0]
    for (uint32_t i = 2; i < index_max; i++)
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009674:	3301      	adds	r3, #1
 8009676:	627b      	str	r3, [r7, #36]	; 0x24
 8009678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	429a      	cmp	r2, r3
 800967e:	d3cb      	bcc.n	8009618 <note_create_IIR+0x100>
    }
}
 8009680:	bf00      	nop
 8009682:	bf00      	nop
 8009684:	3728      	adds	r7, #40	; 0x28
 8009686:	46bd      	mov	sp, r7
 8009688:	bdb0      	pop	{r4, r5, r7, pc}
 800968a:	bf00      	nop
 800968c:	f3af 8000 	nop.w
 8009690:	7ffffffe 	.word	0x7ffffffe
 8009694:	fc8b007a 	.word	0xfc8b007a
 8009698:	401921fa 	.word	0x401921fa
 800969c:	00000000 	.word	0x00000000
 80096a0:	4072c000 	.word	0x4072c000
 80096a4:	fc8b007a 	.word	0xfc8b007a
 80096a8:	402921fa 	.word	0x402921fa

080096ac <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	f5ad 3dfa 	sub.w	sp, sp, #128000	; 0x1f400
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
    int16_t bufferOutput[BUFFER_SIZE_AUDIO]    = { 0 };
 80096b6:	4b8d      	ldr	r3, [pc, #564]	; (80098ec <main+0x240>)
 80096b8:	4a8d      	ldr	r2, [pc, #564]	; (80098f0 <main+0x244>)
 80096ba:	443a      	add	r2, r7
 80096bc:	4413      	add	r3, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80096c4:	461a      	mov	r2, r3
 80096c6:	2100      	movs	r1, #0
 80096c8:	f001 fe80 	bl	800b3cc <memset>
    int16_t buffer_BF_Noise[BUFFER_SIZE_AUDIO] = { 0 };
 80096cc:	4b89      	ldr	r3, [pc, #548]	; (80098f4 <main+0x248>)
 80096ce:	4a88      	ldr	r2, [pc, #544]	; (80098f0 <main+0x244>)
 80096d0:	443a      	add	r2, r7
 80096d2:	4413      	add	r3, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80096da:	461a      	mov	r2, r3
 80096dc:	2100      	movs	r1, #0
 80096de:	f001 fe75 	bl	800b3cc <memset>
    int16_t buffer_HF_Noise[BUFFER_SIZE_AUDIO] = { 0 };
 80096e2:	4b85      	ldr	r3, [pc, #532]	; (80098f8 <main+0x24c>)
 80096e4:	4a82      	ldr	r2, [pc, #520]	; (80098f0 <main+0x244>)
 80096e6:	443a      	add	r2, r7
 80096e8:	4413      	add	r3, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80096f0:	461a      	mov	r2, r3
 80096f2:	2100      	movs	r1, #0
 80096f4:	f001 fe6a 	bl	800b3cc <memset>
    int16_t buffer_SIGNAL[BUFFER_SIZE_AUDIO]   = { 0 };
 80096f8:	4b80      	ldr	r3, [pc, #512]	; (80098fc <main+0x250>)
 80096fa:	4a7d      	ldr	r2, [pc, #500]	; (80098f0 <main+0x244>)
 80096fc:	443a      	add	r2, r7
 80096fe:	4413      	add	r3, r2
 8009700:	4618      	mov	r0, r3
 8009702:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009706:	461a      	mov	r2, r3
 8009708:	2100      	movs	r1, #0
 800970a:	f001 fe5f 	bl	800b3cc <memset>

    uint32_t j = 0;
 800970e:	2300      	movs	r3, #0
 8009710:	4a7b      	ldr	r2, [pc, #492]	; (8009900 <main+0x254>)
 8009712:	443a      	add	r2, r7
 8009714:	6013      	str	r3, [r2, #0]
    uint32_t i = 0;
 8009716:	2300      	movs	r3, #0
 8009718:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 800971c:	6013      	str	r3, [r2, #0]


	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 800971e:	f7ff fd33 	bl	8009188 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8009722:	f7ff fd51 	bl	80091c8 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8009726:	f7fa f8a5 	bl	8003874 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800972a:	f000 f8f5 	bl	8009918 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800972e:	f000 fdf7 	bl	800a320 <MX_GPIO_Init>
	MX_I2C3_Init();
 8009732:	f000 f9d7 	bl	8009ae4 <MX_I2C3_Init>
	MX_SAI2_Init();
 8009736:	f000 faa5 	bl	8009c84 <MX_SAI2_Init>
	MX_TIM1_Init();
 800973a:	f000 fb4f 	bl	8009ddc <MX_TIM1_Init>
	MX_TIM2_Init();
 800973e:	f000 fb9f 	bl	8009e80 <MX_TIM2_Init>
	MX_TIM5_Init();
 8009742:	f000 fc39 	bl	8009fb8 <MX_TIM5_Init>
	MX_TIM8_Init();
 8009746:	f000 fcad 	bl	800a0a4 <MX_TIM8_Init>
	MX_TIM12_Init();
 800974a:	f000 fcfd 	bl	800a148 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 800974e:	f000 fd3f 	bl	800a1d0 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8009752:	f000 fd6d 	bl	800a230 <MX_USART6_UART_Init>
	MX_FMC_Init();
 8009756:	f000 fd9b 	bl	800a290 <MX_FMC_Init>
	MX_LTDC_Init();
 800975a:	f000 fa03 	bl	8009b64 <MX_LTDC_Init>
	MX_DMA2D_Init();
 800975e:	f000 f98f 	bl	8009a80 <MX_DMA2D_Init>
	MX_TIM3_Init();
 8009762:	f000 fbdb 	bl	8009f1c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2); // Must be before Initialisation of WM8994
 8009766:	4b67      	ldr	r3, [pc, #412]	; (8009904 <main+0x258>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	681a      	ldr	r2, [r3, #0]
 800976c:	4b65      	ldr	r3, [pc, #404]	; (8009904 <main+0x258>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009774:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2); // Must be before Initialisation of WM8994
 8009776:	4b64      	ldr	r3, [pc, #400]	; (8009908 <main+0x25c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	4b62      	ldr	r3, [pc, #392]	; (8009908 <main+0x25c>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009784:	601a      	str	r2, [r3, #0]
	wm8994Init();
 8009786:	f001 f8dd 	bl	800a944 <wm8994Init>
	BSP_LCD_Init();
 800978a:	f7f9 f883 	bl	8002894 <BSP_LCD_Init>
	lcd_start_page();
 800978e:	f7ff fc8d 	bl	80090ac <lcd_start_page>
	HAL_TIM_Base_Start(&htim3);
 8009792:	485e      	ldr	r0, [pc, #376]	; (800990c <main+0x260>)
 8009794:	f7fe f8f8 	bl	8007988 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	initGpio();			// Toggle PA0 pour la mesure du temps de calcul
 8009798:	f7ff fd5a 	bl	8009250 <initGpio>

	init_sinus_table();
 800979c:	f7ff fda4 	bl	80092e8 <init_sinus_table>

    note_create_classic(LOW_FREQUENCY_NOISE, MAX_NOTE_TIME_DURATION, buffer_BF_Noise);
 80097a0:	4b54      	ldr	r3, [pc, #336]	; (80098f4 <main+0x248>)
 80097a2:	4a53      	ldr	r2, [pc, #332]	; (80098f0 <main+0x244>)
 80097a4:	443a      	add	r2, r7
 80097a6:	4413      	add	r3, r2
 80097a8:	4619      	mov	r1, r3
 80097aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80097ae:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80097b2:	f7ff fe55 	bl	8009460 <note_create_classic>
    note_create_DDS(AUDIO_SIGNAL_FREQUENCY,     MAX_NOTE_TIME_DURATION, buffer_SIGNAL);
 80097b6:	4b51      	ldr	r3, [pc, #324]	; (80098fc <main+0x250>)
 80097b8:	4a4d      	ldr	r2, [pc, #308]	; (80098f0 <main+0x244>)
 80097ba:	443a      	add	r2, r7
 80097bc:	4413      	add	r3, r2
 80097be:	4619      	mov	r1, r3
 80097c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80097c4:	f240 204b 	movw	r0, #587	; 0x24b
 80097c8:	f7ff fe0e 	bl	80093e8 <note_create_DDS>
    note_create_IIR(HIGHT_FREQUENCY_NOISE,     MAX_NOTE_TIME_DURATION, buffer_HF_Noise);
 80097cc:	4b4a      	ldr	r3, [pc, #296]	; (80098f8 <main+0x24c>)
 80097ce:	4a48      	ldr	r2, [pc, #288]	; (80098f0 <main+0x244>)
 80097d0:	443a      	add	r2, r7
 80097d2:	4413      	add	r3, r2
 80097d4:	4619      	mov	r1, r3
 80097d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80097da:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80097de:	f7ff fe9b 	bl	8009518 <note_create_IIR>

    // Compute audio signal
    for (i = 0; i < BUFFER_SIZE_AUDIO; i++)
 80097e2:	2300      	movs	r3, #0
 80097e4:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 80097e8:	6013      	str	r3, [r2, #0]
 80097ea:	e032      	b.n	8009852 <main+0x1a6>
    {
        bufferOutput[i] = buffer_BF_Noise[i] +
 80097ec:	4b41      	ldr	r3, [pc, #260]	; (80098f4 <main+0x248>)
 80097ee:	4a40      	ldr	r2, [pc, #256]	; (80098f0 <main+0x244>)
 80097f0:	443a      	add	r2, r7
 80097f2:	4413      	add	r3, r2
 80097f4:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 80097f8:	6812      	ldr	r2, [r2, #0]
 80097fa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80097fe:	b29a      	uxth	r2, r3
                          buffer_HF_Noise[i] +
 8009800:	4b3d      	ldr	r3, [pc, #244]	; (80098f8 <main+0x24c>)
 8009802:	493b      	ldr	r1, [pc, #236]	; (80098f0 <main+0x244>)
 8009804:	4439      	add	r1, r7
 8009806:	440b      	add	r3, r1
 8009808:	f507 31fa 	add.w	r1, r7, #128000	; 0x1f400
 800980c:	6809      	ldr	r1, [r1, #0]
 800980e:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8009812:	b29b      	uxth	r3, r3
        bufferOutput[i] = buffer_BF_Noise[i] +
 8009814:	4413      	add	r3, r2
 8009816:	b29a      	uxth	r2, r3
                          buffer_SIGNAL[i];
 8009818:	4b38      	ldr	r3, [pc, #224]	; (80098fc <main+0x250>)
 800981a:	4935      	ldr	r1, [pc, #212]	; (80098f0 <main+0x244>)
 800981c:	4439      	add	r1, r7
 800981e:	440b      	add	r3, r1
 8009820:	f507 31fa 	add.w	r1, r7, #128000	; 0x1f400
 8009824:	6809      	ldr	r1, [r1, #0]
 8009826:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 800982a:	b29b      	uxth	r3, r3
                          buffer_HF_Noise[i] +
 800982c:	4413      	add	r3, r2
 800982e:	b29b      	uxth	r3, r3
 8009830:	b219      	sxth	r1, r3
        bufferOutput[i] = buffer_BF_Noise[i] +
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <main+0x240>)
 8009834:	4a2e      	ldr	r2, [pc, #184]	; (80098f0 <main+0x244>)
 8009836:	443a      	add	r2, r7
 8009838:	4413      	add	r3, r2
 800983a:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 800983e:	6812      	ldr	r2, [r2, #0]
 8009840:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < BUFFER_SIZE_AUDIO; i++)
 8009844:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	3301      	adds	r3, #1
 800984c:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 8009850:	6013      	str	r3, [r2, #0]
 8009852:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800985c:	d3c6      	bcc.n	80097ec <main+0x140>
    }

	while(1)
	{
	    for (j = 0; j < SIGNAL_DURATION_IN_MS; j++)
 800985e:	2300      	movs	r3, #0
 8009860:	4a27      	ldr	r2, [pc, #156]	; (8009900 <main+0x254>)
 8009862:	443a      	add	r2, r7
 8009864:	6013      	str	r3, [r2, #0]
 8009866:	e03a      	b.n	80098de <main+0x232>
	    {
	        /* Envoi des échantillons de sortie */
	        for (i = 0; i < BUFFER_SIZE_AUDIO; i++)
 8009868:	2300      	movs	r3, #0
 800986a:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	e028      	b.n	80098c4 <main+0x218>
	        {
	            // Update output
	            echOutputLeft  = bufferOutput[i];
 8009872:	4b1e      	ldr	r3, [pc, #120]	; (80098ec <main+0x240>)
 8009874:	4a1e      	ldr	r2, [pc, #120]	; (80098f0 <main+0x244>)
 8009876:	443a      	add	r2, r7
 8009878:	4413      	add	r3, r2
 800987a:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 800987e:	6812      	ldr	r2, [r2, #0]
 8009880:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8009884:	4b22      	ldr	r3, [pc, #136]	; (8009910 <main+0x264>)
 8009886:	801a      	strh	r2, [r3, #0]
	            echOutputRight = bufferOutput[i];
 8009888:	4b18      	ldr	r3, [pc, #96]	; (80098ec <main+0x240>)
 800988a:	4a19      	ldr	r2, [pc, #100]	; (80098f0 <main+0x244>)
 800988c:	443a      	add	r2, r7
 800988e:	4413      	add	r3, r2
 8009890:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 8009894:	6812      	ldr	r2, [r2, #0]
 8009896:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 800989a:	4b1e      	ldr	r3, [pc, #120]	; (8009914 <main+0x268>)
 800989c:	801a      	strh	r2, [r3, #0]

	            // Apply output
	            HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputLeft, 1,SAI_WAIT);
 800989e:	2364      	movs	r3, #100	; 0x64
 80098a0:	2201      	movs	r2, #1
 80098a2:	491b      	ldr	r1, [pc, #108]	; (8009910 <main+0x264>)
 80098a4:	4817      	ldr	r0, [pc, #92]	; (8009904 <main+0x258>)
 80098a6:	f7fd fe73 	bl	8007590 <HAL_SAI_Transmit>
	            HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputRight,1,SAI_WAIT);
 80098aa:	2364      	movs	r3, #100	; 0x64
 80098ac:	2201      	movs	r2, #1
 80098ae:	4919      	ldr	r1, [pc, #100]	; (8009914 <main+0x268>)
 80098b0:	4814      	ldr	r0, [pc, #80]	; (8009904 <main+0x258>)
 80098b2:	f7fd fe6d 	bl	8007590 <HAL_SAI_Transmit>
	        for (i = 0; i < BUFFER_SIZE_AUDIO; i++)
 80098b6:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	3301      	adds	r3, #1
 80098be:	f507 32fa 	add.w	r2, r7, #128000	; 0x1f400
 80098c2:	6013      	str	r3, [r2, #0]
 80098c4:	f507 33fa 	add.w	r3, r7, #128000	; 0x1f400
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80098ce:	d3d0      	bcc.n	8009872 <main+0x1c6>
	    for (j = 0; j < SIGNAL_DURATION_IN_MS; j++)
 80098d0:	4b0b      	ldr	r3, [pc, #44]	; (8009900 <main+0x254>)
 80098d2:	443b      	add	r3, r7
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3301      	adds	r3, #1
 80098d8:	4a09      	ldr	r2, [pc, #36]	; (8009900 <main+0x254>)
 80098da:	443a      	add	r2, r7
 80098dc:	6013      	str	r3, [r2, #0]
 80098de:	4b08      	ldr	r3, [pc, #32]	; (8009900 <main+0x254>)
 80098e0:	443b      	add	r3, r7
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098e8:	d3be      	bcc.n	8009868 <main+0x1bc>
 80098ea:	e7b8      	b.n	800985e <main+0x1b2>
 80098ec:	ffff82f8 	.word	0xffff82f8
 80098f0:	0001f408 	.word	0x0001f408
 80098f4:	ffff05f8 	.word	0xffff05f8
 80098f8:	fffe88f8 	.word	0xfffe88f8
 80098fc:	fffe0bf8 	.word	0xfffe0bf8
 8009900:	0001f404 	.word	0x0001f404
 8009904:	20008178 	.word	0x20008178
 8009908:	20008068 	.word	0x20008068
 800990c:	2000823c 	.word	0x2000823c
 8009910:	20007f3a 	.word	0x20007f3a
 8009914:	20007f38 	.word	0x20007f38

08009918 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b0b4      	sub	sp, #208	; 0xd0
 800991c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800991e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8009922:	2230      	movs	r2, #48	; 0x30
 8009924:	2100      	movs	r1, #0
 8009926:	4618      	mov	r0, r3
 8009928:	f001 fd50 	bl	800b3cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800992c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009930:	2200      	movs	r2, #0
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	605a      	str	r2, [r3, #4]
 8009936:	609a      	str	r2, [r3, #8]
 8009938:	60da      	str	r2, [r3, #12]
 800993a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800993c:	f107 0308 	add.w	r3, r7, #8
 8009940:	2284      	movs	r2, #132	; 0x84
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fd41 	bl	800b3cc <memset>

	/**Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800994a:	f7fc fad7 	bl	8005efc <HAL_PWR_EnableBkUpAccess>
	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800994e:	4b49      	ldr	r3, [pc, #292]	; (8009a74 <SystemClock_Config+0x15c>)
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	4a48      	ldr	r2, [pc, #288]	; (8009a74 <SystemClock_Config+0x15c>)
 8009954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009958:	6413      	str	r3, [r2, #64]	; 0x40
 800995a:	4b46      	ldr	r3, [pc, #280]	; (8009a74 <SystemClock_Config+0x15c>)
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009962:	607b      	str	r3, [r7, #4]
 8009964:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009966:	4b44      	ldr	r3, [pc, #272]	; (8009a78 <SystemClock_Config+0x160>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a43      	ldr	r2, [pc, #268]	; (8009a78 <SystemClock_Config+0x160>)
 800996c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	4b41      	ldr	r3, [pc, #260]	; (8009a78 <SystemClock_Config+0x160>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	683b      	ldr	r3, [r7, #0]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800997e:	2301      	movs	r3, #1
 8009980:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009984:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009988:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800998c:	2302      	movs	r3, #2
 800998e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009996:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 800999a:	2319      	movs	r3, #25
 800999c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 80099a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80099a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80099a8:	2302      	movs	r3, #2
 80099aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 80099ae:	2309      	movs	r3, #9
 80099b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80099b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f7fc faff 	bl	8005fbc <HAL_RCC_OscConfig>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 80099c4:	f000 ffba 	bl	800a93c <Error_Handler>
	}
	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80099c8:	f7fc faa8 	bl	8005f1c <HAL_PWREx_EnableOverDrive>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d001      	beq.n	80099d6 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 80099d2:	f000 ffb3 	bl	800a93c <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80099d6:	230f      	movs	r3, #15
 80099d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80099dc:	2302      	movs	r3, #2
 80099de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80099e2:	2300      	movs	r3, #0
 80099e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80099e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80099ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80099f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80099f8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80099fc:	2106      	movs	r1, #6
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fc fd4c 	bl	800649c <HAL_RCC_ClockConfig>
 8009a04:	4603      	mov	r3, r0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <SystemClock_Config+0xf6>
	{
		Error_Handler();
 8009a0a:	f000 ff97 	bl	800a93c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8009a0e:	4b1b      	ldr	r3, [pc, #108]	; (8009a7c <SystemClock_Config+0x164>)
 8009a10:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8009a12:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8009a16:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8009a18:	2302      	movs	r3, #2
 8009a1a:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 8009a20:	2307      	movs	r3, #7
 8009a22:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8009a24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009a28:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8009a2a:	2305      	movs	r3, #5
 8009a2c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8009a2e:	2302      	movs	r3, #2
 8009a30:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8009a32:	2303      	movs	r3, #3
 8009a34:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8009a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a42:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8009a44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a48:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8009a52:	2300      	movs	r3, #0
 8009a54:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009a56:	f107 0308 	add.w	r3, r7, #8
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fc fef0 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <SystemClock_Config+0x152>
	{
		Error_Handler();
 8009a66:	f000 ff69 	bl	800a93c <Error_Handler>
	}
}
 8009a6a:	bf00      	nop
 8009a6c:	37d0      	adds	r7, #208	; 0xd0
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
 8009a72:	bf00      	nop
 8009a74:	40023800 	.word	0x40023800
 8009a78:	40007000 	.word	0x40007000
 8009a7c:	00110848 	.word	0x00110848

08009a80 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8009a84:	4b15      	ldr	r3, [pc, #84]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009a86:	4a16      	ldr	r2, [pc, #88]	; (8009ae0 <MX_DMA2D_Init+0x60>)
 8009a88:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8009a8a:	4b14      	ldr	r3, [pc, #80]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8009a90:	4b12      	ldr	r3, [pc, #72]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8009a96:	4b11      	ldr	r3, [pc, #68]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8009a9c:	4b0f      	ldr	r3, [pc, #60]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8009aa2:	4b0e      	ldr	r3, [pc, #56]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8009aa8:	4b0c      	ldr	r3, [pc, #48]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8009aae:	4b0b      	ldr	r3, [pc, #44]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8009ab4:	4809      	ldr	r0, [pc, #36]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009ab6:	f7fa fa39 	bl	8003f2c <HAL_DMA2D_Init>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8009ac0:	f000 ff3c 	bl	800a93c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	4805      	ldr	r0, [pc, #20]	; (8009adc <MX_DMA2D_Init+0x5c>)
 8009ac8:	f7fa fc9e 	bl	8004408 <HAL_DMA2D_ConfigLayer>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8009ad2:	f000 ff33 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */
	//__HAL_RCC_DMA2D_CLK_ENABLE();
	/* USER CODE END DMA2D_Init 2 */

}
 8009ad6:	bf00      	nop
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	20008444 	.word	0x20008444
 8009ae0:	4002b000 	.word	0x4002b000

08009ae4 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8009ae8:	4b1b      	ldr	r3, [pc, #108]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009aea:	4a1c      	ldr	r2, [pc, #112]	; (8009b5c <MX_I2C3_Init+0x78>)
 8009aec:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8009aee:	4b1a      	ldr	r3, [pc, #104]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009af0:	4a1b      	ldr	r2, [pc, #108]	; (8009b60 <MX_I2C3_Init+0x7c>)
 8009af2:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8009af4:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009af6:	2200      	movs	r2, #0
 8009af8:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009afa:	4b17      	ldr	r3, [pc, #92]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009afc:	2201      	movs	r2, #1
 8009afe:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009b00:	4b15      	ldr	r3, [pc, #84]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8009b06:	4b14      	ldr	r3, [pc, #80]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009b0c:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009b12:	4b11      	ldr	r3, [pc, #68]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b14:	2200      	movs	r2, #0
 8009b16:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009b18:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8009b1e:	480e      	ldr	r0, [pc, #56]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b20:	f7fb f880 	bl	8004c24 <HAL_I2C_Init>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8009b2a:	f000 ff07 	bl	800a93c <Error_Handler>
	}
	/**Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009b2e:	2100      	movs	r1, #0
 8009b30:	4809      	ldr	r0, [pc, #36]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b32:	f7fb fdb7 	bl	80056a4 <HAL_I2CEx_ConfigAnalogFilter>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8009b3c:	f000 fefe 	bl	800a93c <Error_Handler>
	}
	/**Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8009b40:	2100      	movs	r1, #0
 8009b42:	4805      	ldr	r0, [pc, #20]	; (8009b58 <MX_I2C3_Init+0x74>)
 8009b44:	f7fb fdf9 	bl	800573a <HAL_I2CEx_ConfigDigitalFilter>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d001      	beq.n	8009b52 <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8009b4e:	f000 fef5 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8009b52:	bf00      	nop
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	200080ec 	.word	0x200080ec
 8009b5c:	40005c00 	.word	0x40005c00
 8009b60:	00c0eaff 	.word	0x00c0eaff

08009b64 <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08e      	sub	sp, #56	; 0x38
 8009b68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8009b6a:	1d3b      	adds	r3, r7, #4
 8009b6c:	2234      	movs	r2, #52	; 0x34
 8009b6e:	2100      	movs	r1, #0
 8009b70:	4618      	mov	r0, r3
 8009b72:	f001 fc2b 	bl	800b3cc <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8009b76:	4b40      	ldr	r3, [pc, #256]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009b78:	4a40      	ldr	r2, [pc, #256]	; (8009c7c <MX_LTDC_Init+0x118>)
 8009b7a:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8009b7c:	4b3e      	ldr	r3, [pc, #248]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8009b82:	4b3d      	ldr	r3, [pc, #244]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009b84:	2200      	movs	r2, #0
 8009b86:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8009b88:	4b3b      	ldr	r3, [pc, #236]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8009b8e:	4b3a      	ldr	r3, [pc, #232]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8009b94:	4b38      	ldr	r3, [pc, #224]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009b96:	2228      	movs	r2, #40	; 0x28
 8009b98:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8009b9a:	4b37      	ldr	r3, [pc, #220]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009b9c:	2209      	movs	r2, #9
 8009b9e:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8009ba0:	4b35      	ldr	r3, [pc, #212]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009ba2:	2235      	movs	r2, #53	; 0x35
 8009ba4:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8009ba6:	4b34      	ldr	r3, [pc, #208]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009ba8:	220b      	movs	r2, #11
 8009baa:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8009bac:	4b32      	ldr	r3, [pc, #200]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009bae:	f240 2215 	movw	r2, #533	; 0x215
 8009bb2:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8009bb4:	4b30      	ldr	r3, [pc, #192]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009bb6:	f240 121b 	movw	r2, #283	; 0x11b
 8009bba:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8009bbc:	4b2e      	ldr	r3, [pc, #184]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009bbe:	f240 2235 	movw	r2, #565	; 0x235
 8009bc2:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8009bc4:	4b2c      	ldr	r3, [pc, #176]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009bc6:	f240 121d 	movw	r2, #285	; 0x11d
 8009bca:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8009bcc:	4b2a      	ldr	r3, [pc, #168]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8009bd4:	4b28      	ldr	r3, [pc, #160]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8009bdc:	4b26      	ldr	r3, [pc, #152]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8009be4:	4824      	ldr	r0, [pc, #144]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009be6:	f7fb fdf7 	bl	80057d8 <HAL_LTDC_Init>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d001      	beq.n	8009bf4 <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8009bf0:	f000 fea4 	bl	800a93c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8009bf8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009bfc:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8009c02:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c06:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8009c08:	2302      	movs	r3, #2
 8009c0a:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8009c0c:	23ff      	movs	r3, #255	; 0xff
 8009c0e:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8009c10:	2300      	movs	r3, #0
 8009c12:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8009c14:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009c18:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8009c1a:	2307      	movs	r3, #7
 8009c1c:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8009c1e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8009c24:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009c28:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8009c2a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009c2e:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8009c42:	1d3b      	adds	r3, r7, #4
 8009c44:	2200      	movs	r2, #0
 8009c46:	4619      	mov	r1, r3
 8009c48:	480b      	ldr	r0, [pc, #44]	; (8009c78 <MX_LTDC_Init+0x114>)
 8009c4a:	f7fb ff6b 	bl	8005b24 <HAL_LTDC_ConfigLayer>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d001      	beq.n	8009c58 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8009c54:	f000 fe72 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */
	__HAL_RCC_LTDC_CLK_ENABLE();
 8009c58:	4b09      	ldr	r3, [pc, #36]	; (8009c80 <MX_LTDC_Init+0x11c>)
 8009c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5c:	4a08      	ldr	r2, [pc, #32]	; (8009c80 <MX_LTDC_Init+0x11c>)
 8009c5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c62:	6453      	str	r3, [r2, #68]	; 0x44
 8009c64:	4b06      	ldr	r3, [pc, #24]	; (8009c80 <MX_LTDC_Init+0x11c>)
 8009c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c6c:	603b      	str	r3, [r7, #0]
 8009c6e:	683b      	ldr	r3, [r7, #0]

	/* USER CODE END LTDC_Init 2 */

}
 8009c70:	bf00      	nop
 8009c72:	3738      	adds	r7, #56	; 0x38
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	2000827c 	.word	0x2000827c
 8009c7c:	40016800 	.word	0x40016800
 8009c80:	40023800 	.word	0x40023800

08009c84 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8009c88:	4b50      	ldr	r3, [pc, #320]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009c8a:	4a51      	ldr	r2, [pc, #324]	; (8009dd0 <MX_SAI2_Init+0x14c>)
 8009c8c:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009c8e:	4b4f      	ldr	r3, [pc, #316]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8009c94:	4b4d      	ldr	r3, [pc, #308]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8009c9a:	4b4c      	ldr	r3, [pc, #304]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009c9c:	2280      	movs	r2, #128	; 0x80
 8009c9e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009ca0:	4b4a      	ldr	r3, [pc, #296]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8009ca6:	4b49      	ldr	r3, [pc, #292]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009ca8:	2201      	movs	r2, #1
 8009caa:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8009cac:	4b47      	ldr	r3, [pc, #284]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cae:	2200      	movs	r2, #0
 8009cb0:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 8009cb2:	4b46      	ldr	r3, [pc, #280]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cb4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009cb8:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009cba:	4b44      	ldr	r3, [pc, #272]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8009cc0:	4b42      	ldr	r3, [pc, #264]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 8009cc6:	4b41      	ldr	r3, [pc, #260]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cc8:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8009ccc:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009cce:	4b3f      	ldr	r3, [pc, #252]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009cd4:	4b3d      	ldr	r3, [pc, #244]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009cda:	4b3c      	ldr	r3, [pc, #240]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009ce0:	4b3a      	ldr	r3, [pc, #232]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 8009ce6:	4b39      	ldr	r3, [pc, #228]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009ce8:	2240      	movs	r2, #64	; 0x40
 8009cea:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8009cec:	4b37      	ldr	r3, [pc, #220]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cee:	2220      	movs	r2, #32
 8009cf0:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8009cf2:	4b36      	ldr	r3, [pc, #216]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009cf8:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009cfa:	4b34      	ldr	r3, [pc, #208]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8009d00:	4b32      	ldr	r3, [pc, #200]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009d02:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009d06:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8009d08:	4b30      	ldr	r3, [pc, #192]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009d0e:	4b2f      	ldr	r3, [pc, #188]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 8009d14:	4b2d      	ldr	r3, [pc, #180]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009d16:	2204      	movs	r2, #4
 8009d18:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 8009d1a:	4b2c      	ldr	r3, [pc, #176]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009d1c:	2205      	movs	r2, #5
 8009d1e:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8009d20:	482a      	ldr	r0, [pc, #168]	; (8009dcc <MX_SAI2_Init+0x148>)
 8009d22:	f7fd fabf 	bl	80072a4 <HAL_SAI_Init>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 8009d2c:	f000 fe06 	bl	800a93c <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8009d30:	4b28      	ldr	r3, [pc, #160]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d32:	4a29      	ldr	r2, [pc, #164]	; (8009dd8 <MX_SAI2_Init+0x154>)
 8009d34:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009d36:	4b27      	ldr	r3, [pc, #156]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8009d3c:	4b25      	ldr	r3, [pc, #148]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d3e:	2203      	movs	r2, #3
 8009d40:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 8009d42:	4b24      	ldr	r3, [pc, #144]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d44:	2280      	movs	r2, #128	; 0x80
 8009d46:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009d48:	4b22      	ldr	r3, [pc, #136]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8009d4e:	4b21      	ldr	r3, [pc, #132]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d50:	2201      	movs	r2, #1
 8009d52:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8009d54:	4b1f      	ldr	r3, [pc, #124]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8009d5a:	4b1e      	ldr	r3, [pc, #120]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8009d60:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009d66:	4b1b      	ldr	r3, [pc, #108]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8009d6c:	4b19      	ldr	r3, [pc, #100]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009d72:	4b18      	ldr	r3, [pc, #96]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009d78:	4b16      	ldr	r3, [pc, #88]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8009d7e:	4b15      	ldr	r3, [pc, #84]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d80:	2240      	movs	r2, #64	; 0x40
 8009d82:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8009d84:	4b13      	ldr	r3, [pc, #76]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d86:	2220      	movs	r2, #32
 8009d88:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8009d8a:	4b12      	ldr	r3, [pc, #72]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009d90:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009d92:	4b10      	ldr	r3, [pc, #64]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8009d98:	4b0e      	ldr	r3, [pc, #56]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009d9a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009d9e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8009da0:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8009dac:	4b09      	ldr	r3, [pc, #36]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009dae:	2204      	movs	r2, #4
 8009db0:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 8009db2:	4b08      	ldr	r3, [pc, #32]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009db4:	220a      	movs	r2, #10
 8009db6:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8009db8:	4806      	ldr	r0, [pc, #24]	; (8009dd4 <MX_SAI2_Init+0x150>)
 8009dba:	f7fd fa73 	bl	80072a4 <HAL_SAI_Init>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 8009dc4:	f000 fdba 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */

}
 8009dc8:	bf00      	nop
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	20008178 	.word	0x20008178
 8009dd0:	40015c04 	.word	0x40015c04
 8009dd4:	20008068 	.word	0x20008068
 8009dd8:	40015c24 	.word	0x40015c24

08009ddc <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b088      	sub	sp, #32
 8009de0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009de2:	f107 0310 	add.w	r3, r7, #16
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	605a      	str	r2, [r3, #4]
 8009dec:	609a      	str	r2, [r3, #8]
 8009dee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009df0:	1d3b      	adds	r3, r7, #4
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	605a      	str	r2, [r3, #4]
 8009df8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8009dfa:	4b1f      	ldr	r3, [pc, #124]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009dfc:	4a1f      	ldr	r2, [pc, #124]	; (8009e7c <MX_TIM1_Init+0xa0>)
 8009dfe:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8009e00:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e06:	4b1c      	ldr	r3, [pc, #112]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e08:	2200      	movs	r2, #0
 8009e0a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8009e0c:	4b1a      	ldr	r3, [pc, #104]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e12:	4b19      	ldr	r3, [pc, #100]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8009e18:	4b17      	ldr	r3, [pc, #92]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e1e:	4b16      	ldr	r3, [pc, #88]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009e24:	4814      	ldr	r0, [pc, #80]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e26:	f7fd fd84 	bl	8007932 <HAL_TIM_Base_Init>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 8009e30:	f000 fd84 	bl	800a93c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e38:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009e3a:	f107 0310 	add.w	r3, r7, #16
 8009e3e:	4619      	mov	r1, r3
 8009e40:	480d      	ldr	r0, [pc, #52]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e42:	f7fd fde7 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 8009e4c:	f000 fd76 	bl	800a93c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e50:	2300      	movs	r3, #0
 8009e52:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009e54:	2300      	movs	r3, #0
 8009e56:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009e5c:	1d3b      	adds	r3, r7, #4
 8009e5e:	4619      	mov	r1, r3
 8009e60:	4805      	ldr	r0, [pc, #20]	; (8009e78 <MX_TIM1_Init+0x9c>)
 8009e62:	f7fe f9ed 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 8009e6c:	f000 fd66 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8009e70:	bf00      	nop
 8009e72:	3720      	adds	r7, #32
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20008394 	.word	0x20008394
 8009e7c:	40010000 	.word	0x40010000

08009e80 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b088      	sub	sp, #32
 8009e84:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e86:	f107 0310 	add.w	r3, r7, #16
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	601a      	str	r2, [r3, #0]
 8009e8e:	605a      	str	r2, [r3, #4]
 8009e90:	609a      	str	r2, [r3, #8]
 8009e92:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e94:	1d3b      	adds	r3, r7, #4
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	605a      	str	r2, [r3, #4]
 8009e9c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8009e9e:	4b1e      	ldr	r3, [pc, #120]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ea4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32000;
 8009ea6:	4b1c      	ldr	r3, [pc, #112]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009ea8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009eac:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009eae:	4b1a      	ldr	r3, [pc, #104]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 8009eb4:	4b18      	ldr	r3, [pc, #96]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009eba:	4b17      	ldr	r3, [pc, #92]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009ec0:	4b15      	ldr	r3, [pc, #84]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009ec2:	2280      	movs	r2, #128	; 0x80
 8009ec4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009ec6:	4814      	ldr	r0, [pc, #80]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009ec8:	f7fd fd33 	bl	8007932 <HAL_TIM_Base_Init>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d001      	beq.n	8009ed6 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 8009ed2:	f000 fd33 	bl	800a93c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009eda:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009edc:	f107 0310 	add.w	r3, r7, #16
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	480d      	ldr	r0, [pc, #52]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009ee4:	f7fd fd96 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8009eee:	f000 fd25 	bl	800a93c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009efa:	1d3b      	adds	r3, r7, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4806      	ldr	r0, [pc, #24]	; (8009f18 <MX_TIM2_Init+0x98>)
 8009f00:	f7fe f99e 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d001      	beq.n	8009f0e <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8009f0a:	f000 fd17 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8009f0e:	bf00      	nop
 8009f10:	3720      	adds	r7, #32
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20008484 	.word	0x20008484

08009f1c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b088      	sub	sp, #32
 8009f20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009f22:	f107 0310 	add.w	r3, r7, #16
 8009f26:	2200      	movs	r2, #0
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	605a      	str	r2, [r3, #4]
 8009f2c:	609a      	str	r2, [r3, #8]
 8009f2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f30:	1d3b      	adds	r3, r7, #4
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8009f3a:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f3c:	4a1d      	ldr	r2, [pc, #116]	; (8009fb4 <MX_TIM3_Init+0x98>)
 8009f3e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 8009f40:	4b1b      	ldr	r3, [pc, #108]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f42:	2263      	movs	r2, #99	; 0x63
 8009f44:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f46:	4b1a      	ldr	r3, [pc, #104]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8009f4c:	4b18      	ldr	r3, [pc, #96]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f52:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f54:	4b16      	ldr	r3, [pc, #88]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f5a:	4b15      	ldr	r3, [pc, #84]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009f60:	4813      	ldr	r0, [pc, #76]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f62:	f7fd fce6 	bl	8007932 <HAL_TIM_Base_Init>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d001      	beq.n	8009f70 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8009f6c:	f000 fce6 	bl	800a93c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f74:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8009f76:	f107 0310 	add.w	r3, r7, #16
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	480c      	ldr	r0, [pc, #48]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f7e:	f7fd fd49 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8009f88:	f000 fcd8 	bl	800a93c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009f94:	1d3b      	adds	r3, r7, #4
 8009f96:	4619      	mov	r1, r3
 8009f98:	4805      	ldr	r0, [pc, #20]	; (8009fb0 <MX_TIM3_Init+0x94>)
 8009f9a:	f7fe f951 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d001      	beq.n	8009fa8 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8009fa4:	f000 fcca 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8009fa8:	bf00      	nop
 8009faa:	3720      	adds	r7, #32
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	2000823c 	.word	0x2000823c
 8009fb4:	40000400 	.word	0x40000400

08009fb8 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b08e      	sub	sp, #56	; 0x38
 8009fbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	601a      	str	r2, [r3, #0]
 8009fc6:	605a      	str	r2, [r3, #4]
 8009fc8:	609a      	str	r2, [r3, #8]
 8009fca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fcc:	f107 031c 	add.w	r3, r7, #28
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	605a      	str	r2, [r3, #4]
 8009fd6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8009fd8:	463b      	mov	r3, r7
 8009fda:	2200      	movs	r2, #0
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	605a      	str	r2, [r3, #4]
 8009fe0:	609a      	str	r2, [r3, #8]
 8009fe2:	60da      	str	r2, [r3, #12]
 8009fe4:	611a      	str	r2, [r3, #16]
 8009fe6:	615a      	str	r2, [r3, #20]
 8009fe8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8009fea:	4b2c      	ldr	r3, [pc, #176]	; (800a09c <MX_TIM5_Init+0xe4>)
 8009fec:	4a2c      	ldr	r2, [pc, #176]	; (800a0a0 <MX_TIM5_Init+0xe8>)
 8009fee:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8009ff0:	4b2a      	ldr	r3, [pc, #168]	; (800a09c <MX_TIM5_Init+0xe4>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ff6:	4b29      	ldr	r3, [pc, #164]	; (800a09c <MX_TIM5_Init+0xe4>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0;
 8009ffc:	4b27      	ldr	r3, [pc, #156]	; (800a09c <MX_TIM5_Init+0xe4>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a002:	4b26      	ldr	r3, [pc, #152]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a004:	2200      	movs	r2, #0
 800a006:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a008:	4b24      	ldr	r3, [pc, #144]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a00e:	4823      	ldr	r0, [pc, #140]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a010:	f7fd fc8f 	bl	8007932 <HAL_TIM_Base_Init>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <MX_TIM5_Init+0x66>
	{
		Error_Handler();
 800a01a:	f000 fc8f 	bl	800a93c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a01e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a022:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a024:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a028:	4619      	mov	r1, r3
 800a02a:	481c      	ldr	r0, [pc, #112]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a02c:	f7fd fcf2 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 800a036:	f000 fc81 	bl	800a93c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800a03a:	4818      	ldr	r0, [pc, #96]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a03c:	f7fd fcbf 	bl	80079be <HAL_TIM_PWM_Init>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <MX_TIM5_Init+0x92>
	{
		Error_Handler();
 800a046:	f000 fc79 	bl	800a93c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a04a:	2300      	movs	r3, #0
 800a04c:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a04e:	2300      	movs	r3, #0
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a052:	f107 031c 	add.w	r3, r7, #28
 800a056:	4619      	mov	r1, r3
 800a058:	4810      	ldr	r0, [pc, #64]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a05a:	f7fe f8f1 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <MX_TIM5_Init+0xb0>
	{
		Error_Handler();
 800a064:	f000 fc6a 	bl	800a93c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a068:	2360      	movs	r3, #96	; 0x60
 800a06a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a070:	2300      	movs	r3, #0
 800a072:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a074:	2300      	movs	r3, #0
 800a076:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a078:	463b      	mov	r3, r7
 800a07a:	220c      	movs	r2, #12
 800a07c:	4619      	mov	r1, r3
 800a07e:	4807      	ldr	r0, [pc, #28]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a080:	f7fe f932 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <MX_TIM5_Init+0xd6>
	{
		Error_Handler();
 800a08a:	f000 fc57 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 800a08e:	4803      	ldr	r0, [pc, #12]	; (800a09c <MX_TIM5_Init+0xe4>)
 800a090:	f000 fee6 	bl	800ae60 <HAL_TIM_MspPostInit>

}
 800a094:	bf00      	nop
 800a096:	3738      	adds	r7, #56	; 0x38
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	200081fc 	.word	0x200081fc
 800a0a0:	40000c00 	.word	0x40000c00

0800a0a4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a0aa:	f107 0310 	add.w	r3, r7, #16
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	605a      	str	r2, [r3, #4]
 800a0b4:	609a      	str	r2, [r3, #8]
 800a0b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0b8:	1d3b      	adds	r3, r7, #4
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	605a      	str	r2, [r3, #4]
 800a0c0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800a0c2:	4b1f      	ldr	r3, [pc, #124]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0c4:	4a1f      	ldr	r2, [pc, #124]	; (800a144 <MX_TIM8_Init+0xa0>)
 800a0c6:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 800a0c8:	4b1d      	ldr	r3, [pc, #116]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ce:	4b1c      	ldr	r3, [pc, #112]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 0;
 800a0d4:	4b1a      	ldr	r3, [pc, #104]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0da:	4b19      	ldr	r3, [pc, #100]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 800a0e0:	4b17      	ldr	r3, [pc, #92]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0e6:	4b16      	ldr	r3, [pc, #88]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a0ec:	4814      	ldr	r0, [pc, #80]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a0ee:	f7fd fc20 	bl	8007932 <HAL_TIM_Base_Init>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <MX_TIM8_Init+0x58>
	{
		Error_Handler();
 800a0f8:	f000 fc20 	bl	800a93c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a100:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a102:	f107 0310 	add.w	r3, r7, #16
 800a106:	4619      	mov	r1, r3
 800a108:	480d      	ldr	r0, [pc, #52]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a10a:	f7fd fc83 	bl	8007a14 <HAL_TIM_ConfigClockSource>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <MX_TIM8_Init+0x74>
	{
		Error_Handler();
 800a114:	f000 fc12 	bl	800a93c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a118:	2300      	movs	r3, #0
 800a11a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a120:	2300      	movs	r3, #0
 800a122:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a124:	1d3b      	adds	r3, r7, #4
 800a126:	4619      	mov	r1, r3
 800a128:	4805      	ldr	r0, [pc, #20]	; (800a140 <MX_TIM8_Init+0x9c>)
 800a12a:	f7fe f889 	bl	8008240 <HAL_TIMEx_MasterConfigSynchronization>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	d001      	beq.n	800a138 <MX_TIM8_Init+0x94>
	{
		Error_Handler();
 800a134:	f000 fc02 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800a138:	bf00      	nop
 800a13a:	3720      	adds	r7, #32
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}
 800a140:	20008138 	.word	0x20008138
 800a144:	40010400 	.word	0x40010400

0800a148 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b088      	sub	sp, #32
 800a14c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800a14e:	1d3b      	adds	r3, r7, #4
 800a150:	2200      	movs	r2, #0
 800a152:	601a      	str	r2, [r3, #0]
 800a154:	605a      	str	r2, [r3, #4]
 800a156:	609a      	str	r2, [r3, #8]
 800a158:	60da      	str	r2, [r3, #12]
 800a15a:	611a      	str	r2, [r3, #16]
 800a15c:	615a      	str	r2, [r3, #20]
 800a15e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 800a160:	4b19      	ldr	r3, [pc, #100]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a162:	4a1a      	ldr	r2, [pc, #104]	; (800a1cc <MX_TIM12_Init+0x84>)
 800a164:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 800a166:	4b18      	ldr	r3, [pc, #96]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a168:	2200      	movs	r2, #0
 800a16a:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a16c:	4b16      	ldr	r3, [pc, #88]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a16e:	2200      	movs	r2, #0
 800a170:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 0;
 800a172:	4b15      	ldr	r3, [pc, #84]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a174:	2200      	movs	r2, #0
 800a176:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a178:	4b13      	ldr	r3, [pc, #76]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a17e:	4b12      	ldr	r3, [pc, #72]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a180:	2200      	movs	r2, #0
 800a182:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800a184:	4810      	ldr	r0, [pc, #64]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a186:	f7fd fc1a 	bl	80079be <HAL_TIM_PWM_Init>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 800a190:	f000 fbd4 	bl	800a93c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a194:	2360      	movs	r3, #96	; 0x60
 800a196:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800a198:	2300      	movs	r3, #0
 800a19a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a19c:	2300      	movs	r3, #0
 800a19e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a1a4:	1d3b      	adds	r3, r7, #4
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	4807      	ldr	r0, [pc, #28]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a1ac:	f7fe f89c 	bl	80082e8 <HAL_TIM_PWM_ConfigChannel>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d001      	beq.n	800a1ba <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 800a1b6:	f000 fbc1 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 800a1ba:	4803      	ldr	r0, [pc, #12]	; (800a1c8 <MX_TIM12_Init+0x80>)
 800a1bc:	f000 fe50 	bl	800ae60 <HAL_TIM_MspPostInit>

}
 800a1c0:	bf00      	nop
 800a1c2:	3720      	adds	r7, #32
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	200084c4 	.word	0x200084c4
 800a1cc:	40001800 	.word	0x40001800

0800a1d0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800a1d4:	4b14      	ldr	r3, [pc, #80]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a1d6:	4a15      	ldr	r2, [pc, #84]	; (800a22c <MX_USART1_UART_Init+0x5c>)
 800a1d8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800a1da:	4b13      	ldr	r3, [pc, #76]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a1dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a1e0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a1e2:	4b11      	ldr	r3, [pc, #68]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800a1e8:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800a1ee:	4b0e      	ldr	r3, [pc, #56]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800a1f4:	4b0c      	ldr	r3, [pc, #48]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a1f6:	220c      	movs	r2, #12
 800a1f8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a1fa:	4b0b      	ldr	r3, [pc, #44]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a200:	4b09      	ldr	r3, [pc, #36]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a202:	2200      	movs	r2, #0
 800a204:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a206:	4b08      	ldr	r3, [pc, #32]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a208:	2200      	movs	r2, #0
 800a20a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a20c:	4b06      	ldr	r3, [pc, #24]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a20e:	2200      	movs	r2, #0
 800a210:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800a212:	4805      	ldr	r0, [pc, #20]	; (800a228 <MX_USART1_UART_Init+0x58>)
 800a214:	f7fe fa32 	bl	800867c <HAL_UART_Init>
 800a218:	4603      	mov	r3, r0
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800a21e:	f000 fb8d 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800a222:	bf00      	nop
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20008324 	.word	0x20008324
 800a22c:	40011000 	.word	0x40011000

0800a230 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 800a234:	4b14      	ldr	r3, [pc, #80]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a236:	4a15      	ldr	r2, [pc, #84]	; (800a28c <MX_USART6_UART_Init+0x5c>)
 800a238:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800a23a:	4b13      	ldr	r3, [pc, #76]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a23c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a240:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a242:	4b11      	ldr	r3, [pc, #68]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a244:	2200      	movs	r2, #0
 800a246:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800a248:	4b0f      	ldr	r3, [pc, #60]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800a24e:	4b0e      	ldr	r3, [pc, #56]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a250:	2200      	movs	r2, #0
 800a252:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 800a254:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a256:	220c      	movs	r2, #12
 800a258:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a25c:	2200      	movs	r2, #0
 800a25e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a260:	4b09      	ldr	r3, [pc, #36]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a262:	2200      	movs	r2, #0
 800a264:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a266:	4b08      	ldr	r3, [pc, #32]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a268:	2200      	movs	r2, #0
 800a26a:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a26c:	4b06      	ldr	r3, [pc, #24]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a26e:	2200      	movs	r2, #0
 800a270:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 800a272:	4805      	ldr	r0, [pc, #20]	; (800a288 <MX_USART6_UART_Init+0x58>)
 800a274:	f7fe fa02 	bl	800867c <HAL_UART_Init>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 800a27e:	f000 fb5d 	bl	800a93c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800a282:	bf00      	nop
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200083d4 	.word	0x200083d4
 800a28c:	40011400 	.word	0x40011400

0800a290 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b088      	sub	sp, #32
 800a294:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800a296:	4b20      	ldr	r3, [pc, #128]	; (800a318 <MX_FMC_Init+0x88>)
 800a298:	4a20      	ldr	r2, [pc, #128]	; (800a31c <MX_FMC_Init+0x8c>)
 800a29a:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800a29c:	4b1e      	ldr	r3, [pc, #120]	; (800a318 <MX_FMC_Init+0x88>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800a2a2:	4b1d      	ldr	r3, [pc, #116]	; (800a318 <MX_FMC_Init+0x88>)
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800a2a8:	4b1b      	ldr	r3, [pc, #108]	; (800a318 <MX_FMC_Init+0x88>)
 800a2aa:	2204      	movs	r2, #4
 800a2ac:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800a2ae:	4b1a      	ldr	r3, [pc, #104]	; (800a318 <MX_FMC_Init+0x88>)
 800a2b0:	2210      	movs	r2, #16
 800a2b2:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800a2b4:	4b18      	ldr	r3, [pc, #96]	; (800a318 <MX_FMC_Init+0x88>)
 800a2b6:	2240      	movs	r2, #64	; 0x40
 800a2b8:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800a2ba:	4b17      	ldr	r3, [pc, #92]	; (800a318 <MX_FMC_Init+0x88>)
 800a2bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800a2c0:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800a2c2:	4b15      	ldr	r3, [pc, #84]	; (800a318 <MX_FMC_Init+0x88>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800a2c8:	4b13      	ldr	r3, [pc, #76]	; (800a318 <MX_FMC_Init+0x88>)
 800a2ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2ce:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800a2d0:	4b11      	ldr	r3, [pc, #68]	; (800a318 <MX_FMC_Init+0x88>)
 800a2d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a2d6:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800a2d8:	4b0f      	ldr	r3, [pc, #60]	; (800a318 <MX_FMC_Init+0x88>)
 800a2da:	2200      	movs	r2, #0
 800a2dc:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 800a2de:	2302      	movs	r3, #2
 800a2e0:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 800a2e2:	2307      	movs	r3, #7
 800a2e4:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 800a2e6:	2304      	movs	r3, #4
 800a2e8:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 800a2ea:	2307      	movs	r3, #7
 800a2ec:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 800a2f6:	2302      	movs	r3, #2
 800a2f8:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800a2fa:	1d3b      	adds	r3, r7, #4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4806      	ldr	r0, [pc, #24]	; (800a318 <MX_FMC_Init+0x88>)
 800a300:	f7fd fa98 	bl	8007834 <HAL_SDRAM_Init>
 800a304:	4603      	mov	r3, r0
 800a306:	2b00      	cmp	r3, #0
 800a308:	d001      	beq.n	800a30e <MX_FMC_Init+0x7e>
	{
		Error_Handler( );
 800a30a:	f000 fb17 	bl	800a93c <Error_Handler>
	}

}
 800a30e:	bf00      	nop
 800a310:	3720      	adds	r7, #32
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20008504 	.word	0x20008504
 800a31c:	a0000140 	.word	0xa0000140

0800a320 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b090      	sub	sp, #64	; 0x40
 800a324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	605a      	str	r2, [r3, #4]
 800a330:	609a      	str	r2, [r3, #8]
 800a332:	60da      	str	r2, [r3, #12]
 800a334:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800a336:	4bae      	ldr	r3, [pc, #696]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a33a:	4aad      	ldr	r2, [pc, #692]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a33c:	f043 0310 	orr.w	r3, r3, #16
 800a340:	6313      	str	r3, [r2, #48]	; 0x30
 800a342:	4bab      	ldr	r3, [pc, #684]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a346:	f003 0310 	and.w	r3, r3, #16
 800a34a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800a34e:	4ba8      	ldr	r3, [pc, #672]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a352:	4aa7      	ldr	r2, [pc, #668]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a358:	6313      	str	r3, [r2, #48]	; 0x30
 800a35a:	4ba5      	ldr	r3, [pc, #660]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a362:	627b      	str	r3, [r7, #36]	; 0x24
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800a366:	4ba2      	ldr	r3, [pc, #648]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	4aa1      	ldr	r2, [pc, #644]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a36c:	f043 0302 	orr.w	r3, r3, #2
 800a370:	6313      	str	r3, [r2, #48]	; 0x30
 800a372:	4b9f      	ldr	r3, [pc, #636]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	623b      	str	r3, [r7, #32]
 800a37c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800a37e:	4b9c      	ldr	r3, [pc, #624]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a382:	4a9b      	ldr	r2, [pc, #620]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a384:	f043 0308 	orr.w	r3, r3, #8
 800a388:	6313      	str	r3, [r2, #48]	; 0x30
 800a38a:	4b99      	ldr	r3, [pc, #612]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38e:	f003 0308 	and.w	r3, r3, #8
 800a392:	61fb      	str	r3, [r7, #28]
 800a394:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a396:	4b96      	ldr	r3, [pc, #600]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39a:	4a95      	ldr	r2, [pc, #596]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a39c:	f043 0304 	orr.w	r3, r3, #4
 800a3a0:	6313      	str	r3, [r2, #48]	; 0x30
 800a3a2:	4b93      	ldr	r3, [pc, #588]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	61bb      	str	r3, [r7, #24]
 800a3ac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800a3ae:	4b90      	ldr	r3, [pc, #576]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b2:	4a8f      	ldr	r2, [pc, #572]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3b4:	f043 0301 	orr.w	r3, r3, #1
 800a3b8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ba:	4b8d      	ldr	r3, [pc, #564]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3be:	f003 0301 	and.w	r3, r3, #1
 800a3c2:	617b      	str	r3, [r7, #20]
 800a3c4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800a3c6:	4b8a      	ldr	r3, [pc, #552]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ca:	4a89      	ldr	r2, [pc, #548]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3d0:	6313      	str	r3, [r2, #48]	; 0x30
 800a3d2:	4b87      	ldr	r3, [pc, #540]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a3da:	613b      	str	r3, [r7, #16]
 800a3dc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800a3de:	4b84      	ldr	r3, [pc, #528]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e2:	4a83      	ldr	r2, [pc, #524]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a3ea:	4b81      	ldr	r3, [pc, #516]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800a3f6:	4b7e      	ldr	r3, [pc, #504]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fa:	4a7d      	ldr	r2, [pc, #500]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a3fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a400:	6313      	str	r3, [r2, #48]	; 0x30
 800a402:	4b7b      	ldr	r3, [pc, #492]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a40a:	60bb      	str	r3, [r7, #8]
 800a40c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800a40e:	4b78      	ldr	r3, [pc, #480]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a412:	4a77      	ldr	r2, [pc, #476]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a414:	f043 0320 	orr.w	r3, r3, #32
 800a418:	6313      	str	r3, [r2, #48]	; 0x30
 800a41a:	4b75      	ldr	r3, [pc, #468]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a41c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800a426:	4b72      	ldr	r3, [pc, #456]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42a:	4a71      	ldr	r2, [pc, #452]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a42c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a430:	6313      	str	r3, [r2, #48]	; 0x30
 800a432:	4b6f      	ldr	r3, [pc, #444]	; (800a5f0 <MX_GPIO_Init+0x2d0>)
 800a434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a43a:	603b      	str	r3, [r7, #0]
 800a43c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a43e:	2201      	movs	r2, #1
 800a440:	2120      	movs	r1, #32
 800a442:	486c      	ldr	r0, [pc, #432]	; (800a5f4 <MX_GPIO_Init+0x2d4>)
 800a444:	f7fa fbd4 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 800a448:	2200      	movs	r2, #0
 800a44a:	210e      	movs	r1, #14
 800a44c:	486a      	ldr	r0, [pc, #424]	; (800a5f8 <MX_GPIO_Init+0x2d8>)
 800a44e:	f7fa fbcf 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800a452:	2201      	movs	r2, #1
 800a454:	2108      	movs	r1, #8
 800a456:	4869      	ldr	r0, [pc, #420]	; (800a5fc <MX_GPIO_Init+0x2dc>)
 800a458:	f7fa fbca 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800a45c:	2201      	movs	r2, #1
 800a45e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a462:	4865      	ldr	r0, [pc, #404]	; (800a5f8 <MX_GPIO_Init+0x2d8>)
 800a464:	f7fa fbc4 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800a468:	2200      	movs	r2, #0
 800a46a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a46e:	4864      	ldr	r0, [pc, #400]	; (800a600 <MX_GPIO_Init+0x2e0>)
 800a470:	f7fa fbbe 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800a474:	2200      	movs	r2, #0
 800a476:	21c8      	movs	r1, #200	; 0xc8
 800a478:	4862      	ldr	r0, [pc, #392]	; (800a604 <MX_GPIO_Init+0x2e4>)
 800a47a:	f7fa fbb9 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800a47e:	2308      	movs	r3, #8
 800a480:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a482:	2300      	movs	r3, #0
 800a484:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a486:	2300      	movs	r3, #0
 800a488:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a48a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a48e:	4619      	mov	r1, r3
 800a490:	485d      	ldr	r0, [pc, #372]	; (800a608 <MX_GPIO_Init+0x2e8>)
 800a492:	f7fa f8f5 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800a496:	2304      	movs	r3, #4
 800a498:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a49a:	2302      	movs	r3, #2
 800a49c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a4a6:	2309      	movs	r3, #9
 800a4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800a4aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	4855      	ldr	r0, [pc, #340]	; (800a608 <MX_GPIO_Init+0x2e8>)
 800a4b2:	f7fa f8e5 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800a4b6:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4c4:	2303      	movs	r3, #3
 800a4c6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a4c8:	230b      	movs	r3, #11
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a4cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	484c      	ldr	r0, [pc, #304]	; (800a604 <MX_GPIO_Init+0x2e4>)
 800a4d4:	f7fa f8d4 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 800a4d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a4dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a4de:	2312      	movs	r3, #18
 800a4e0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a4ea:	2304      	movs	r3, #4
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4845      	ldr	r0, [pc, #276]	; (800a60c <MX_GPIO_Init+0x2ec>)
 800a4f6:	f7fa f8c3 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800a4fa:	f643 4323 	movw	r3, #15395	; 0x3c23
 800a4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a500:	2302      	movs	r3, #2
 800a502:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a504:	2300      	movs	r3, #0
 800a506:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a508:	2303      	movs	r3, #3
 800a50a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a50c:	230a      	movs	r3, #10
 800a50e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a514:	4619      	mov	r1, r3
 800a516:	483d      	ldr	r0, [pc, #244]	; (800a60c <MX_GPIO_Init+0x2ec>)
 800a518:	f7fa f8b2 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800a51c:	2380      	movs	r3, #128	; 0x80
 800a51e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a520:	2302      	movs	r3, #2
 800a522:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a524:	2300      	movs	r3, #0
 800a526:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a528:	2300      	movs	r3, #0
 800a52a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800a52c:	2308      	movs	r3, #8
 800a52e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800a530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a534:	4619      	mov	r1, r3
 800a536:	482f      	ldr	r0, [pc, #188]	; (800a5f4 <MX_GPIO_Init+0x2d4>)
 800a538:	f7fa f8a2 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800a53c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800a540:	62fb      	str	r3, [r7, #44]	; 0x2c
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a542:	2302      	movs	r3, #2
 800a544:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a546:	2300      	movs	r3, #0
 800a548:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a54a:	2303      	movs	r3, #3
 800a54c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a54e:	230c      	movs	r3, #12
 800a550:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a556:	4619      	mov	r1, r3
 800a558:	482d      	ldr	r0, [pc, #180]	; (800a610 <MX_GPIO_Init+0x2f0>)
 800a55a:	f7fa f891 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800a55e:	2360      	movs	r3, #96	; 0x60
 800a560:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a562:	2302      	movs	r3, #2
 800a564:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a566:	2300      	movs	r3, #0
 800a568:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a56a:	2300      	movs	r3, #0
 800a56c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a56e:	230d      	movs	r3, #13
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a576:	4619      	mov	r1, r3
 800a578:	4823      	ldr	r0, [pc, #140]	; (800a608 <MX_GPIO_Init+0x2e8>)
 800a57a:	f7fa f881 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800a57e:	2340      	movs	r3, #64	; 0x40
 800a580:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a582:	2302      	movs	r3, #2
 800a584:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a586:	2300      	movs	r3, #0
 800a588:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a58a:	2303      	movs	r3, #3
 800a58c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800a58e:	230a      	movs	r3, #10
 800a590:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800a592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a596:	4619      	mov	r1, r3
 800a598:	481c      	ldr	r0, [pc, #112]	; (800a60c <MX_GPIO_Init+0x2ec>)
 800a59a:	f7fa f871 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800a59e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a5ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4818      	ldr	r0, [pc, #96]	; (800a614 <MX_GPIO_Init+0x2f4>)
 800a5b4:	f7fa f864 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 800a5b8:	2340      	movs	r3, #64	; 0x40
 800a5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a5bc:	4b16      	ldr	r3, [pc, #88]	; (800a618 <MX_GPIO_Init+0x2f8>)
 800a5be:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800a5c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	480a      	ldr	r0, [pc, #40]	; (800a5f4 <MX_GPIO_Init+0x2d4>)
 800a5cc:	f7fa f858 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 800a5d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5d6:	2302      	movs	r3, #2
 800a5d8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5e2:	230a      	movs	r3, #10
 800a5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	e016      	b.n	800a61c <MX_GPIO_Init+0x2fc>
 800a5ee:	bf00      	nop
 800a5f0:	40023800 	.word	0x40023800
 800a5f4:	40020c00 	.word	0x40020c00
 800a5f8:	40022000 	.word	0x40022000
 800a5fc:	40022800 	.word	0x40022800
 800a600:	40021c00 	.word	0x40021c00
 800a604:	40021800 	.word	0x40021800
 800a608:	40021000 	.word	0x40021000
 800a60c:	40020400 	.word	0x40020400
 800a610:	40020800 	.word	0x40020800
 800a614:	40022400 	.word	0x40022400
 800a618:	10120000 	.word	0x10120000
 800a61c:	48bb      	ldr	r0, [pc, #748]	; (800a90c <MX_GPIO_Init+0x5ec>)
 800a61e:	f7fa f82f 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a622:	2320      	movs	r3, #32
 800a624:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a626:	2301      	movs	r3, #1
 800a628:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a62a:	2300      	movs	r3, #0
 800a62c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a62e:	2300      	movs	r3, #0
 800a630:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a636:	4619      	mov	r1, r3
 800a638:	48b5      	ldr	r0, [pc, #724]	; (800a910 <MX_GPIO_Init+0x5f0>)
 800a63a:	f7fa f821 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 800a63e:	2308      	movs	r3, #8
 800a640:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a642:	2302      	movs	r3, #2
 800a644:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a646:	2300      	movs	r3, #0
 800a648:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a64a:	2300      	movs	r3, #0
 800a64c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a64e:	230d      	movs	r3, #13
 800a650:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 800a652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a656:	4619      	mov	r1, r3
 800a658:	48ad      	ldr	r0, [pc, #692]	; (800a910 <MX_GPIO_Init+0x5f0>)
 800a65a:	f7fa f811 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 800a65e:	f241 030e 	movw	r3, #4110	; 0x100e
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a664:	2301      	movs	r3, #1
 800a666:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a668:	2300      	movs	r3, #0
 800a66a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a66c:	2300      	movs	r3, #0
 800a66e:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a674:	4619      	mov	r1, r3
 800a676:	48a7      	ldr	r0, [pc, #668]	; (800a914 <MX_GPIO_Init+0x5f4>)
 800a678:	f7fa f802 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800a67c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a680:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a682:	2300      	movs	r3, #0
 800a684:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a686:	2300      	movs	r3, #0
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800a68a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a68e:	4619      	mov	r1, r3
 800a690:	48a1      	ldr	r0, [pc, #644]	; (800a918 <MX_GPIO_Init+0x5f8>)
 800a692:	f7f9 fff5 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800a696:	2308      	movs	r3, #8
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a69a:	2301      	movs	r3, #1
 800a69c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800a6a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	489b      	ldr	r0, [pc, #620]	; (800a91c <MX_GPIO_Init+0x5fc>)
 800a6ae:	f7f9 ffe7 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 800a6b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a6c4:	230d      	movs	r3, #13
 800a6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 800a6c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	4894      	ldr	r0, [pc, #592]	; (800a920 <MX_GPIO_Init+0x600>)
 800a6d0:	f7f9 ffd6 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a6d4:	2310      	movs	r3, #16
 800a6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a6e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	488a      	ldr	r0, [pc, #552]	; (800a910 <MX_GPIO_Init+0x5f0>)
 800a6e8:	f7f9 ffca 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_CMD_Pin */
	GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 800a6ec:	2304      	movs	r3, #4
 800a6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800a6fc:	230c      	movs	r3, #12
 800a6fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800a700:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a704:	4619      	mov	r1, r3
 800a706:	4882      	ldr	r0, [pc, #520]	; (800a910 <MX_GPIO_Init+0x5f0>)
 800a708:	f7f9 ffba 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 800a70c:	f248 0304 	movw	r3, #32772	; 0x8004
 800a710:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a712:	2300      	movs	r3, #0
 800a714:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a716:	2300      	movs	r3, #0
 800a718:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a71a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a71e:	4619      	mov	r1, r3
 800a720:	4880      	ldr	r0, [pc, #512]	; (800a924 <MX_GPIO_Init+0x604>)
 800a722:	f7f9 ffad 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800a726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a72a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a72c:	2301      	movs	r3, #1
 800a72e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a730:	2300      	movs	r3, #0
 800a732:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a734:	2300      	movs	r3, #0
 800a736:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800a738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a73c:	4619      	mov	r1, r3
 800a73e:	4879      	ldr	r0, [pc, #484]	; (800a924 <MX_GPIO_Init+0x604>)
 800a740:	f7f9 ff9e 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 800a744:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 800a748:	62fb      	str	r3, [r7, #44]	; 0x2c
			|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a74a:	2302      	movs	r3, #2
 800a74c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a74e:	2300      	movs	r3, #0
 800a750:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a752:	2300      	movs	r3, #0
 800a754:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a756:	230d      	movs	r3, #13
 800a758:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a75a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a75e:	4619      	mov	r1, r3
 800a760:	4870      	ldr	r0, [pc, #448]	; (800a924 <MX_GPIO_Init+0x604>)
 800a762:	f7f9 ff8d 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 800a766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a76a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a76c:	4b6e      	ldr	r3, [pc, #440]	; (800a928 <MX_GPIO_Init+0x608>)
 800a76e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a770:	2300      	movs	r3, #0
 800a772:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800a774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a778:	4619      	mov	r1, r3
 800a77a:	4866      	ldr	r0, [pc, #408]	; (800a914 <MX_GPIO_Init+0x5f4>)
 800a77c:	f7f9 ff80 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800a780:	2310      	movs	r3, #16
 800a782:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a784:	2302      	movs	r3, #2
 800a786:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a788:	2300      	movs	r3, #0
 800a78a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a78c:	2303      	movs	r3, #3
 800a78e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a790:	230a      	movs	r3, #10
 800a792:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800a794:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a798:	4619      	mov	r1, r3
 800a79a:	4862      	ldr	r0, [pc, #392]	; (800a924 <MX_GPIO_Init+0x604>)
 800a79c:	f7f9 ff70 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 800a7a0:	23c8      	movs	r3, #200	; 0xc8
 800a7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a7b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	485a      	ldr	r0, [pc, #360]	; (800a920 <MX_GPIO_Init+0x600>)
 800a7b8:	f7f9 ff62 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 800a7bc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a7ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4856      	ldr	r0, [pc, #344]	; (800a92c <MX_GPIO_Init+0x60c>)
 800a7d2:	f7f9 ff55 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800a7d6:	2305      	movs	r3, #5
 800a7d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7da:	2302      	movs	r3, #2
 800a7dc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a7e6:	230a      	movs	r3, #10
 800a7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4849      	ldr	r0, [pc, #292]	; (800a918 <MX_GPIO_Init+0x5f8>)
 800a7f2:	f7f9 ff45 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a7f6:	2332      	movs	r3, #50	; 0x32
 800a7f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7fe:	2300      	movs	r3, #0
 800a800:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a802:	2303      	movs	r3, #3
 800a804:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a806:	230b      	movs	r3, #11
 800a808:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a80a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a80e:	4619      	mov	r1, r3
 800a810:	4841      	ldr	r0, [pc, #260]	; (800a918 <MX_GPIO_Init+0x5f8>)
 800a812:	f7f9 ff35 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a816:	2304      	movs	r3, #4
 800a818:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a81a:	2302      	movs	r3, #2
 800a81c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a822:	2303      	movs	r3, #3
 800a824:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a826:	2309      	movs	r3, #9
 800a828:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a82a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a82e:	4619      	mov	r1, r3
 800a830:	483f      	ldr	r0, [pc, #252]	; (800a930 <MX_GPIO_Init+0x610>)
 800a832:	f7f9 ff25 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 800a836:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800a83a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a83c:	2302      	movs	r3, #2
 800a83e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a840:	2300      	movs	r3, #0
 800a842:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a844:	2303      	movs	r3, #3
 800a846:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800a848:	2309      	movs	r3, #9
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a84c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a850:	4619      	mov	r1, r3
 800a852:	482f      	ldr	r0, [pc, #188]	; (800a910 <MX_GPIO_Init+0x5f0>)
 800a854:	f7f9 ff14 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 800a858:	2304      	movs	r3, #4
 800a85a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a85c:	2300      	movs	r3, #0
 800a85e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a860:	2300      	movs	r3, #0
 800a862:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800a864:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a868:	4619      	mov	r1, r3
 800a86a:	482d      	ldr	r0, [pc, #180]	; (800a920 <MX_GPIO_Init+0x600>)
 800a86c:	f7f9 ff08 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a870:	2386      	movs	r3, #134	; 0x86
 800a872:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a874:	2302      	movs	r3, #2
 800a876:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a878:	2300      	movs	r3, #0
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a87c:	2303      	movs	r3, #3
 800a87e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a880:	230b      	movs	r3, #11
 800a882:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a888:	4619      	mov	r1, r3
 800a88a:	4820      	ldr	r0, [pc, #128]	; (800a90c <MX_GPIO_Init+0x5ec>)
 800a88c:	f7f9 fef8 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800a890:	2301      	movs	r3, #1
 800a892:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a894:	2303      	movs	r3, #3
 800a896:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 800a89c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	481a      	ldr	r0, [pc, #104]	; (800a90c <MX_GPIO_Init+0x5ec>)
 800a8a4:	f7f9 feec 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 800a8a8:	2350      	movs	r3, #80	; 0x50
 800a8aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8ac:	2302      	movs	r3, #2
 800a8ae:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800a8b8:	230d      	movs	r3, #13
 800a8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	4812      	ldr	r0, [pc, #72]	; (800a90c <MX_GPIO_Init+0x5ec>)
 800a8c4:	f7f9 fedc 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800a8c8:	2328      	movs	r3, #40	; 0x28
 800a8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8d4:	2303      	movs	r3, #3
 800a8d6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800a8d8:	230a      	movs	r3, #10
 800a8da:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a8dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	480a      	ldr	r0, [pc, #40]	; (800a90c <MX_GPIO_Init+0x5ec>)
 800a8e4:	f7f9 fecc 	bl	8004680 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800a8e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800a8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8ee:	2302      	movs	r3, #2
 800a8f0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a8fa:	2305      	movs	r3, #5
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a8fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a902:	4619      	mov	r1, r3
 800a904:	480a      	ldr	r0, [pc, #40]	; (800a930 <MX_GPIO_Init+0x610>)
 800a906:	f7f9 febb 	bl	8004680 <HAL_GPIO_Init>
 800a90a:	e013      	b.n	800a934 <MX_GPIO_Init+0x614>
 800a90c:	40020000 	.word	0x40020000
 800a910:	40020c00 	.word	0x40020c00
 800a914:	40022000 	.word	0x40022000
 800a918:	40020800 	.word	0x40020800
 800a91c:	40022800 	.word	0x40022800
 800a920:	40021800 	.word	0x40021800
 800a924:	40021c00 	.word	0x40021c00
 800a928:	10120000 	.word	0x10120000
 800a92c:	40021400 	.word	0x40021400
 800a930:	40020400 	.word	0x40020400

}
 800a934:	bf00      	nop
 800a936:	3740      	adds	r7, #64	; 0x40
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1);
 800a940:	e7fe      	b.n	800a940 <Error_Handler+0x4>
	...

0800a944 <wm8994Init>:
#include "stm32746g_discovery_audio.h"

extern AUDIO_DrvTypeDef  *audio_drv;

uint8_t wm8994Init(void){
 800a944:	b590      	push	{r4, r7, lr}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
	uint32_t deviceid = 0x00;
 800a94a:	2300      	movs	r3, #0
 800a94c:	607b      	str	r3, [r7, #4]

	deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 800a94e:	4b11      	ldr	r3, [pc, #68]	; (800a994 <wm8994Init+0x50>)
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	2034      	movs	r0, #52	; 0x34
 800a954:	4798      	blx	r3
 800a956:	6078      	str	r0, [r7, #4]
	if((deviceid) == WM8994_ID){
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f648 1294 	movw	r2, #35220	; 0x8994
 800a95e:	4293      	cmp	r3, r2
 800a960:	d112      	bne.n	800a988 <wm8994Init+0x44>
		wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <wm8994Init+0x50>)
 800a964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a966:	2034      	movs	r0, #52	; 0x34
 800a968:	4798      	blx	r3
	 	audio_drv = &wm8994_drv;
 800a96a:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <wm8994Init+0x54>)
 800a96c:	4a09      	ldr	r2, [pc, #36]	; (800a994 <wm8994Init+0x50>)
 800a96e:	601a      	str	r2, [r3, #0]
	 	//audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
	 	  audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
 800a970:	4b09      	ldr	r3, [pc, #36]	; (800a998 <wm8994Init+0x54>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681c      	ldr	r4, [r3, #0]
 800a976:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800a97a:	2264      	movs	r2, #100	; 0x64
 800a97c:	f240 2102 	movw	r1, #514	; 0x202
 800a980:	2034      	movs	r0, #52	; 0x34
 800a982:	47a0      	blx	r4
	 	return AUDIO_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	e000      	b.n	800a98a <wm8994Init+0x46>
	 }
	 else{
	 	return AUDIO_ERROR;
 800a988:	2301      	movs	r3, #1
	 }
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd90      	pop	{r4, r7, pc}
 800a992:	bf00      	nop
 800a994:	20000000 	.word	0x20000000
 800a998:	20007f84 	.word	0x20007f84

0800a99c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a9a2:	4b0f      	ldr	r3, [pc, #60]	; (800a9e0 <HAL_MspInit+0x44>)
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	4a0e      	ldr	r2, [pc, #56]	; (800a9e0 <HAL_MspInit+0x44>)
 800a9a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a9ae:	4b0c      	ldr	r3, [pc, #48]	; (800a9e0 <HAL_MspInit+0x44>)
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9b6:	607b      	str	r3, [r7, #4]
 800a9b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9ba:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <HAL_MspInit+0x44>)
 800a9bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9be:	4a08      	ldr	r2, [pc, #32]	; (800a9e0 <HAL_MspInit+0x44>)
 800a9c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9c4:	6453      	str	r3, [r2, #68]	; 0x44
 800a9c6:	4b06      	ldr	r3, [pc, #24]	; (800a9e0 <HAL_MspInit+0x44>)
 800a9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ce:	603b      	str	r3, [r7, #0]
 800a9d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a9d2:	bf00      	nop
 800a9d4:	370c      	adds	r7, #12
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	40023800 	.word	0x40023800

0800a9e4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b084      	sub	sp, #16
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a0d      	ldr	r2, [pc, #52]	; (800aa28 <HAL_DMA2D_MspInit+0x44>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d113      	bne.n	800aa1e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800a9f6:	4b0d      	ldr	r3, [pc, #52]	; (800aa2c <HAL_DMA2D_MspInit+0x48>)
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	4a0c      	ldr	r2, [pc, #48]	; (800aa2c <HAL_DMA2D_MspInit+0x48>)
 800a9fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa00:	6313      	str	r3, [r2, #48]	; 0x30
 800aa02:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <HAL_DMA2D_MspInit+0x48>)
 800aa04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800aa0e:	2200      	movs	r2, #0
 800aa10:	2105      	movs	r1, #5
 800aa12:	205a      	movs	r0, #90	; 0x5a
 800aa14:	f7f9 f895 	bl	8003b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800aa18:	205a      	movs	r0, #90	; 0x5a
 800aa1a:	f7f9 f8ae 	bl	8003b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800aa1e:	bf00      	nop
 800aa20:	3710      	adds	r7, #16
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	4002b000 	.word	0x4002b000
 800aa2c:	40023800 	.word	0x40023800

0800aa30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08a      	sub	sp, #40	; 0x28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa38:	f107 0314 	add.w	r3, r7, #20
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	605a      	str	r2, [r3, #4]
 800aa42:	609a      	str	r2, [r3, #8]
 800aa44:	60da      	str	r2, [r3, #12]
 800aa46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a17      	ldr	r2, [pc, #92]	; (800aaac <HAL_I2C_MspInit+0x7c>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d128      	bne.n	800aaa4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800aa52:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <HAL_I2C_MspInit+0x80>)
 800aa54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa56:	4a16      	ldr	r2, [pc, #88]	; (800aab0 <HAL_I2C_MspInit+0x80>)
 800aa58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa5c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa5e:	4b14      	ldr	r3, [pc, #80]	; (800aab0 <HAL_I2C_MspInit+0x80>)
 800aa60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa66:	613b      	str	r3, [r7, #16]
 800aa68:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 800aa6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800aa6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800aa70:	2312      	movs	r3, #18
 800aa72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aa74:	2301      	movs	r3, #1
 800aa76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800aa80:	f107 0314 	add.w	r3, r7, #20
 800aa84:	4619      	mov	r1, r3
 800aa86:	480b      	ldr	r0, [pc, #44]	; (800aab4 <HAL_I2C_MspInit+0x84>)
 800aa88:	f7f9 fdfa 	bl	8004680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800aa8c:	4b08      	ldr	r3, [pc, #32]	; (800aab0 <HAL_I2C_MspInit+0x80>)
 800aa8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa90:	4a07      	ldr	r2, [pc, #28]	; (800aab0 <HAL_I2C_MspInit+0x80>)
 800aa92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa96:	6413      	str	r3, [r2, #64]	; 0x40
 800aa98:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <HAL_I2C_MspInit+0x80>)
 800aa9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aaa0:	60fb      	str	r3, [r7, #12]
 800aaa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800aaa4:	bf00      	nop
 800aaa6:	3728      	adds	r7, #40	; 0x28
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}
 800aaac:	40005c00 	.word	0x40005c00
 800aab0:	40023800 	.word	0x40023800
 800aab4:	40021c00 	.word	0x40021c00

0800aab8 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C3)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a08      	ldr	r2, [pc, #32]	; (800aae8 <HAL_I2C_MspDeInit+0x30>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d10a      	bne.n	800aae0 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 800aaca:	4b08      	ldr	r3, [pc, #32]	; (800aaec <HAL_I2C_MspDeInit+0x34>)
 800aacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aace:	4a07      	ldr	r2, [pc, #28]	; (800aaec <HAL_I2C_MspDeInit+0x34>)
 800aad0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800aad4:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 800aad6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800aada:	4805      	ldr	r0, [pc, #20]	; (800aaf0 <HAL_I2C_MspDeInit+0x38>)
 800aadc:	f7f9 ff7c 	bl	80049d8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800aae0:	bf00      	nop
 800aae2:	3708      	adds	r7, #8
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}
 800aae8:	40005c00 	.word	0x40005c00
 800aaec:	40023800 	.word	0x40023800
 800aaf0:	40021c00 	.word	0x40021c00

0800aaf4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b08e      	sub	sp, #56	; 0x38
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aafc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab00:	2200      	movs	r2, #0
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	605a      	str	r2, [r3, #4]
 800ab06:	609a      	str	r2, [r3, #8]
 800ab08:	60da      	str	r2, [r3, #12]
 800ab0a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a55      	ldr	r2, [pc, #340]	; (800ac68 <HAL_LTDC_MspInit+0x174>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	f040 80a3 	bne.w	800ac5e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800ab18:	4b54      	ldr	r3, [pc, #336]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab1c:	4a53      	ldr	r2, [pc, #332]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ab22:	6453      	str	r3, [r2, #68]	; 0x44
 800ab24:	4b51      	ldr	r3, [pc, #324]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ab2c:	623b      	str	r3, [r7, #32]
 800ab2e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800ab30:	4b4e      	ldr	r3, [pc, #312]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab34:	4a4d      	ldr	r2, [pc, #308]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab36:	f043 0310 	orr.w	r3, r3, #16
 800ab3a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab3c:	4b4b      	ldr	r3, [pc, #300]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	f003 0310 	and.w	r3, r3, #16
 800ab44:	61fb      	str	r3, [r7, #28]
 800ab46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800ab48:	4b48      	ldr	r3, [pc, #288]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4c:	4a47      	ldr	r2, [pc, #284]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab52:	6313      	str	r3, [r2, #48]	; 0x30
 800ab54:	4b45      	ldr	r3, [pc, #276]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab5c:	61bb      	str	r3, [r7, #24]
 800ab5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800ab60:	4b42      	ldr	r3, [pc, #264]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab64:	4a41      	ldr	r2, [pc, #260]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ab6a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab6c:	4b3f      	ldr	r3, [pc, #252]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ab78:	4b3c      	ldr	r3, [pc, #240]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab7c:	4a3b      	ldr	r2, [pc, #236]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab82:	6313      	str	r3, [r2, #48]	; 0x30
 800ab84:	4b39      	ldr	r3, [pc, #228]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab8c:	613b      	str	r3, [r7, #16]
 800ab8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800ab90:	4b36      	ldr	r3, [pc, #216]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab94:	4a35      	ldr	r2, [pc, #212]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab9a:	6313      	str	r3, [r2, #48]	; 0x30
 800ab9c:	4b33      	ldr	r3, [pc, #204]	; (800ac6c <HAL_LTDC_MspInit+0x178>)
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aba4:	60fb      	str	r3, [r7, #12]
 800aba6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 800aba8:	2310      	movs	r3, #16
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abac:	2302      	movs	r3, #2
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abb4:	2300      	movs	r3, #0
 800abb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800abb8:	230e      	movs	r3, #14
 800abba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800abbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abc0:	4619      	mov	r1, r3
 800abc2:	482b      	ldr	r0, [pc, #172]	; (800ac70 <HAL_LTDC_MspInit+0x17c>)
 800abc4:	f7f9 fd5c 	bl	8004680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 800abc8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abce:	2302      	movs	r3, #2
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abd6:	2300      	movs	r3, #0
 800abd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800abda:	230e      	movs	r3, #14
 800abdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800abde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800abe2:	4619      	mov	r1, r3
 800abe4:	4823      	ldr	r0, [pc, #140]	; (800ac74 <HAL_LTDC_MspInit+0x180>)
 800abe6:	f7f9 fd4b 	bl	8004680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 800abea:	23f7      	movs	r3, #247	; 0xf7
 800abec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abee:	2302      	movs	r3, #2
 800abf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abf2:	2300      	movs	r3, #0
 800abf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abf6:	2300      	movs	r3, #0
 800abf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800abfa:	230e      	movs	r3, #14
 800abfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800abfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac02:	4619      	mov	r1, r3
 800ac04:	481c      	ldr	r0, [pc, #112]	; (800ac78 <HAL_LTDC_MspInit+0x184>)
 800ac06:	f7f9 fd3b 	bl	8004680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800ac0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac10:	2302      	movs	r3, #2
 800ac12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac14:	2300      	movs	r3, #0
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800ac1c:	2309      	movs	r3, #9
 800ac1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800ac20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac24:	4619      	mov	r1, r3
 800ac26:	4815      	ldr	r0, [pc, #84]	; (800ac7c <HAL_LTDC_MspInit+0x188>)
 800ac28:	f7f9 fd2a 	bl	8004680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800ac2c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800ac30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac32:	2302      	movs	r3, #2
 800ac34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac36:	2300      	movs	r3, #0
 800ac38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800ac3e:	230e      	movs	r3, #14
 800ac40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800ac42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac46:	4619      	mov	r1, r3
 800ac48:	480d      	ldr	r0, [pc, #52]	; (800ac80 <HAL_LTDC_MspInit+0x18c>)
 800ac4a:	f7f9 fd19 	bl	8004680 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800ac4e:	2200      	movs	r2, #0
 800ac50:	2105      	movs	r1, #5
 800ac52:	2058      	movs	r0, #88	; 0x58
 800ac54:	f7f8 ff75 	bl	8003b42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800ac58:	2058      	movs	r0, #88	; 0x58
 800ac5a:	f7f8 ff8e 	bl	8003b7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800ac5e:	bf00      	nop
 800ac60:	3738      	adds	r7, #56	; 0x38
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	40016800 	.word	0x40016800
 800ac6c:	40023800 	.word	0x40023800
 800ac70:	40021000 	.word	0x40021000
 800ac74:	40022400 	.word	0x40022400
 800ac78:	40022800 	.word	0x40022800
 800ac7c:	40021800 	.word	0x40021800
 800ac80:	40022000 	.word	0x40022000

0800ac84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b090      	sub	sp, #64	; 0x40
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ac90:	2200      	movs	r2, #0
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	605a      	str	r2, [r3, #4]
 800ac96:	609a      	str	r2, [r3, #8]
 800ac98:	60da      	str	r2, [r3, #12]
 800ac9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4a58      	ldr	r2, [pc, #352]	; (800ae04 <HAL_TIM_Base_MspInit+0x180>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d129      	bne.n	800acfa <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800aca6:	4b58      	ldr	r3, [pc, #352]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800aca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acaa:	4a57      	ldr	r2, [pc, #348]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800acac:	f043 0301 	orr.w	r3, r3, #1
 800acb0:	6453      	str	r3, [r2, #68]	; 0x44
 800acb2:	4b55      	ldr	r3, [pc, #340]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800acb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	62bb      	str	r3, [r7, #40]	; 0x28
 800acbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acbe:	4b52      	ldr	r3, [pc, #328]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800acc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc2:	4a51      	ldr	r2, [pc, #324]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800acc4:	f043 0301 	orr.w	r3, r3, #1
 800acc8:	6313      	str	r3, [r2, #48]	; 0x30
 800acca:	4b4f      	ldr	r3, [pc, #316]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800accc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	627b      	str	r3, [r7, #36]	; 0x24
 800acd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800acd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acdc:	2302      	movs	r3, #2
 800acde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ace0:	2300      	movs	r3, #0
 800ace2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ace4:	2300      	movs	r3, #0
 800ace6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800ace8:	2301      	movs	r3, #1
 800acea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800acec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800acf0:	4619      	mov	r1, r3
 800acf2:	4846      	ldr	r0, [pc, #280]	; (800ae0c <HAL_TIM_Base_MspInit+0x188>)
 800acf4:	f7f9 fcc4 	bl	8004680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800acf8:	e07f      	b.n	800adfa <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad02:	d129      	bne.n	800ad58 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ad04:	4b40      	ldr	r3, [pc, #256]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	4a3f      	ldr	r2, [pc, #252]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad0a:	f043 0301 	orr.w	r3, r3, #1
 800ad0e:	6413      	str	r3, [r2, #64]	; 0x40
 800ad10:	4b3d      	ldr	r3, [pc, #244]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad14:	f003 0301 	and.w	r3, r3, #1
 800ad18:	623b      	str	r3, [r7, #32]
 800ad1a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad1c:	4b3a      	ldr	r3, [pc, #232]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad20:	4a39      	ldr	r2, [pc, #228]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad22:	f043 0301 	orr.w	r3, r3, #1
 800ad26:	6313      	str	r3, [r2, #48]	; 0x30
 800ad28:	4b37      	ldr	r3, [pc, #220]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	61fb      	str	r3, [r7, #28]
 800ad32:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800ad34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad42:	2300      	movs	r3, #0
 800ad44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ad46:	2301      	movs	r3, #1
 800ad48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800ad4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ad4e:	4619      	mov	r1, r3
 800ad50:	482e      	ldr	r0, [pc, #184]	; (800ae0c <HAL_TIM_Base_MspInit+0x188>)
 800ad52:	f7f9 fc95 	bl	8004680 <HAL_GPIO_Init>
}
 800ad56:	e050      	b.n	800adfa <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a2c      	ldr	r2, [pc, #176]	; (800ae10 <HAL_TIM_Base_MspInit+0x18c>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d128      	bne.n	800adb4 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ad62:	4b29      	ldr	r3, [pc, #164]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad66:	4a28      	ldr	r2, [pc, #160]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad68:	f043 0302 	orr.w	r3, r3, #2
 800ad6c:	6413      	str	r3, [r2, #64]	; 0x40
 800ad6e:	4b26      	ldr	r3, [pc, #152]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad72:	f003 0302 	and.w	r3, r3, #2
 800ad76:	61bb      	str	r3, [r7, #24]
 800ad78:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad7a:	4b23      	ldr	r3, [pc, #140]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7e:	4a22      	ldr	r2, [pc, #136]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad80:	f043 0302 	orr.w	r3, r3, #2
 800ad84:	6313      	str	r3, [r2, #48]	; 0x30
 800ad86:	4b20      	ldr	r3, [pc, #128]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ad88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800ad92:	2310      	movs	r3, #16
 800ad94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad96:	2302      	movs	r3, #2
 800ad98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ada2:	2302      	movs	r3, #2
 800ada4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800ada6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800adaa:	4619      	mov	r1, r3
 800adac:	4819      	ldr	r0, [pc, #100]	; (800ae14 <HAL_TIM_Base_MspInit+0x190>)
 800adae:	f7f9 fc67 	bl	8004680 <HAL_GPIO_Init>
}
 800adb2:	e022      	b.n	800adfa <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM5)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a17      	ldr	r2, [pc, #92]	; (800ae18 <HAL_TIM_Base_MspInit+0x194>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d10c      	bne.n	800add8 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800adbe:	4b12      	ldr	r3, [pc, #72]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	4a11      	ldr	r2, [pc, #68]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800adc4:	f043 0308 	orr.w	r3, r3, #8
 800adc8:	6413      	str	r3, [r2, #64]	; 0x40
 800adca:	4b0f      	ldr	r3, [pc, #60]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	f003 0308 	and.w	r3, r3, #8
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	693b      	ldr	r3, [r7, #16]
}
 800add6:	e010      	b.n	800adfa <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a0f      	ldr	r2, [pc, #60]	; (800ae1c <HAL_TIM_Base_MspInit+0x198>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d10b      	bne.n	800adfa <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ade2:	4b09      	ldr	r3, [pc, #36]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ade4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade6:	4a08      	ldr	r2, [pc, #32]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800ade8:	f043 0302 	orr.w	r3, r3, #2
 800adec:	6453      	str	r3, [r2, #68]	; 0x44
 800adee:	4b06      	ldr	r3, [pc, #24]	; (800ae08 <HAL_TIM_Base_MspInit+0x184>)
 800adf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf2:	f003 0302 	and.w	r3, r3, #2
 800adf6:	60fb      	str	r3, [r7, #12]
 800adf8:	68fb      	ldr	r3, [r7, #12]
}
 800adfa:	bf00      	nop
 800adfc:	3740      	adds	r7, #64	; 0x40
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	40010000 	.word	0x40010000
 800ae08:	40023800 	.word	0x40023800
 800ae0c:	40020000 	.word	0x40020000
 800ae10:	40000400 	.word	0x40000400
 800ae14:	40020400 	.word	0x40020400
 800ae18:	40000c00 	.word	0x40000c00
 800ae1c:	40010400 	.word	0x40010400

0800ae20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM12)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a0a      	ldr	r2, [pc, #40]	; (800ae58 <HAL_TIM_PWM_MspInit+0x38>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d10b      	bne.n	800ae4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800ae32:	4b0a      	ldr	r3, [pc, #40]	; (800ae5c <HAL_TIM_PWM_MspInit+0x3c>)
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	4a09      	ldr	r2, [pc, #36]	; (800ae5c <HAL_TIM_PWM_MspInit+0x3c>)
 800ae38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae3c:	6413      	str	r3, [r2, #64]	; 0x40
 800ae3e:	4b07      	ldr	r3, [pc, #28]	; (800ae5c <HAL_TIM_PWM_MspInit+0x3c>)
 800ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae46:	60fb      	str	r3, [r7, #12]
 800ae48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800ae4a:	bf00      	nop
 800ae4c:	3714      	adds	r7, #20
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop
 800ae58:	40001800 	.word	0x40001800
 800ae5c:	40023800 	.word	0x40023800

0800ae60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b08a      	sub	sp, #40	; 0x28
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae68:	f107 0314 	add.w	r3, r7, #20
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	601a      	str	r2, [r3, #0]
 800ae70:	605a      	str	r2, [r3, #4]
 800ae72:	609a      	str	r2, [r3, #8]
 800ae74:	60da      	str	r2, [r3, #12]
 800ae76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a22      	ldr	r2, [pc, #136]	; (800af08 <HAL_TIM_MspPostInit+0xa8>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d11c      	bne.n	800aebc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800ae82:	4b22      	ldr	r3, [pc, #136]	; (800af0c <HAL_TIM_MspPostInit+0xac>)
 800ae84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae86:	4a21      	ldr	r2, [pc, #132]	; (800af0c <HAL_TIM_MspPostInit+0xac>)
 800ae88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae8c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae8e:	4b1f      	ldr	r3, [pc, #124]	; (800af0c <HAL_TIM_MspPostInit+0xac>)
 800ae90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae96:	613b      	str	r3, [r7, #16]
 800ae98:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration    
    PI0     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae9e:	2302      	movs	r3, #2
 800aea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aea6:	2300      	movs	r3, #0
 800aea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800aeaa:	2302      	movs	r3, #2
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800aeae:	f107 0314 	add.w	r3, r7, #20
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4816      	ldr	r0, [pc, #88]	; (800af10 <HAL_TIM_MspPostInit+0xb0>)
 800aeb6:	f7f9 fbe3 	bl	8004680 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800aeba:	e020      	b.n	800aefe <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM12)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	4a14      	ldr	r2, [pc, #80]	; (800af14 <HAL_TIM_MspPostInit+0xb4>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d11b      	bne.n	800aefe <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800aec6:	4b11      	ldr	r3, [pc, #68]	; (800af0c <HAL_TIM_MspPostInit+0xac>)
 800aec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeca:	4a10      	ldr	r2, [pc, #64]	; (800af0c <HAL_TIM_MspPostInit+0xac>)
 800aecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed0:	6313      	str	r3, [r2, #48]	; 0x30
 800aed2:	4b0e      	ldr	r3, [pc, #56]	; (800af0c <HAL_TIM_MspPostInit+0xac>)
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800aede:	2340      	movs	r3, #64	; 0x40
 800aee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aee2:	2302      	movs	r3, #2
 800aee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aee6:	2300      	movs	r3, #0
 800aee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeea:	2300      	movs	r3, #0
 800aeec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800aeee:	2309      	movs	r3, #9
 800aef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800aef2:	f107 0314 	add.w	r3, r7, #20
 800aef6:	4619      	mov	r1, r3
 800aef8:	4807      	ldr	r0, [pc, #28]	; (800af18 <HAL_TIM_MspPostInit+0xb8>)
 800aefa:	f7f9 fbc1 	bl	8004680 <HAL_GPIO_Init>
}
 800aefe:	bf00      	nop
 800af00:	3728      	adds	r7, #40	; 0x28
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	40000c00 	.word	0x40000c00
 800af0c:	40023800 	.word	0x40023800
 800af10:	40022000 	.word	0x40022000
 800af14:	40001800 	.word	0x40001800
 800af18:	40021c00 	.word	0x40021c00

0800af1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08c      	sub	sp, #48	; 0x30
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af24:	f107 031c 	add.w	r3, r7, #28
 800af28:	2200      	movs	r2, #0
 800af2a:	601a      	str	r2, [r3, #0]
 800af2c:	605a      	str	r2, [r3, #4]
 800af2e:	609a      	str	r2, [r3, #8]
 800af30:	60da      	str	r2, [r3, #12]
 800af32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a3c      	ldr	r2, [pc, #240]	; (800b02c <HAL_UART_MspInit+0x110>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d145      	bne.n	800afca <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800af3e:	4b3c      	ldr	r3, [pc, #240]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af42:	4a3b      	ldr	r2, [pc, #236]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af44:	f043 0310 	orr.w	r3, r3, #16
 800af48:	6453      	str	r3, [r2, #68]	; 0x44
 800af4a:	4b39      	ldr	r3, [pc, #228]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af4e:	f003 0310 	and.w	r3, r3, #16
 800af52:	61bb      	str	r3, [r7, #24]
 800af54:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af56:	4b36      	ldr	r3, [pc, #216]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5a:	4a35      	ldr	r2, [pc, #212]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af5c:	f043 0302 	orr.w	r3, r3, #2
 800af60:	6313      	str	r3, [r2, #48]	; 0x30
 800af62:	4b33      	ldr	r3, [pc, #204]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	617b      	str	r3, [r7, #20]
 800af6c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af6e:	4b30      	ldr	r3, [pc, #192]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af72:	4a2f      	ldr	r2, [pc, #188]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af74:	f043 0301 	orr.w	r3, r3, #1
 800af78:	6313      	str	r3, [r2, #48]	; 0x30
 800af7a:	4b2d      	ldr	r3, [pc, #180]	; (800b030 <HAL_UART_MspInit+0x114>)
 800af7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	613b      	str	r3, [r7, #16]
 800af84:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800af86:	2380      	movs	r3, #128	; 0x80
 800af88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af8a:	2302      	movs	r3, #2
 800af8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af8e:	2300      	movs	r3, #0
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af92:	2300      	movs	r3, #0
 800af94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800af96:	2307      	movs	r3, #7
 800af98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800af9a:	f107 031c 	add.w	r3, r7, #28
 800af9e:	4619      	mov	r1, r3
 800afa0:	4824      	ldr	r0, [pc, #144]	; (800b034 <HAL_UART_MspInit+0x118>)
 800afa2:	f7f9 fb6d 	bl	8004680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800afa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afac:	2302      	movs	r3, #2
 800afae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afb4:	2300      	movs	r3, #0
 800afb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800afb8:	2307      	movs	r3, #7
 800afba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800afbc:	f107 031c 	add.w	r3, r7, #28
 800afc0:	4619      	mov	r1, r3
 800afc2:	481d      	ldr	r0, [pc, #116]	; (800b038 <HAL_UART_MspInit+0x11c>)
 800afc4:	f7f9 fb5c 	bl	8004680 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800afc8:	e02c      	b.n	800b024 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a1b      	ldr	r2, [pc, #108]	; (800b03c <HAL_UART_MspInit+0x120>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d127      	bne.n	800b024 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800afd4:	4b16      	ldr	r3, [pc, #88]	; (800b030 <HAL_UART_MspInit+0x114>)
 800afd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afd8:	4a15      	ldr	r2, [pc, #84]	; (800b030 <HAL_UART_MspInit+0x114>)
 800afda:	f043 0320 	orr.w	r3, r3, #32
 800afde:	6453      	str	r3, [r2, #68]	; 0x44
 800afe0:	4b13      	ldr	r3, [pc, #76]	; (800b030 <HAL_UART_MspInit+0x114>)
 800afe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afe4:	f003 0320 	and.w	r3, r3, #32
 800afe8:	60fb      	str	r3, [r7, #12]
 800afea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800afec:	4b10      	ldr	r3, [pc, #64]	; (800b030 <HAL_UART_MspInit+0x114>)
 800afee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff0:	4a0f      	ldr	r2, [pc, #60]	; (800b030 <HAL_UART_MspInit+0x114>)
 800aff2:	f043 0304 	orr.w	r3, r3, #4
 800aff6:	6313      	str	r3, [r2, #48]	; 0x30
 800aff8:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <HAL_UART_MspInit+0x114>)
 800affa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affc:	f003 0304 	and.w	r3, r3, #4
 800b000:	60bb      	str	r3, [r7, #8]
 800b002:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800b004:	23c0      	movs	r3, #192	; 0xc0
 800b006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b008:	2302      	movs	r3, #2
 800b00a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b00c:	2300      	movs	r3, #0
 800b00e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b010:	2303      	movs	r3, #3
 800b012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b014:	2308      	movs	r3, #8
 800b016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b018:	f107 031c 	add.w	r3, r7, #28
 800b01c:	4619      	mov	r1, r3
 800b01e:	4808      	ldr	r0, [pc, #32]	; (800b040 <HAL_UART_MspInit+0x124>)
 800b020:	f7f9 fb2e 	bl	8004680 <HAL_GPIO_Init>
}
 800b024:	bf00      	nop
 800b026:	3730      	adds	r7, #48	; 0x30
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	40011000 	.word	0x40011000
 800b030:	40023800 	.word	0x40023800
 800b034:	40020400 	.word	0x40020400
 800b038:	40020000 	.word	0x40020000
 800b03c:	40011400 	.word	0x40011400
 800b040:	40020800 	.word	0x40020800

0800b044 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800b044:	b580      	push	{r7, lr}
 800b046:	b086      	sub	sp, #24
 800b048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800b04a:	4b3b      	ldr	r3, [pc, #236]	; (800b138 <HAL_FMC_MspInit+0xf4>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d16d      	bne.n	800b12e <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800b052:	4b39      	ldr	r3, [pc, #228]	; (800b138 <HAL_FMC_MspInit+0xf4>)
 800b054:	2201      	movs	r2, #1
 800b056:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800b058:	4b38      	ldr	r3, [pc, #224]	; (800b13c <HAL_FMC_MspInit+0xf8>)
 800b05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05c:	4a37      	ldr	r2, [pc, #220]	; (800b13c <HAL_FMC_MspInit+0xf8>)
 800b05e:	f043 0301 	orr.w	r3, r3, #1
 800b062:	6393      	str	r3, [r2, #56]	; 0x38
 800b064:	4b35      	ldr	r3, [pc, #212]	; (800b13c <HAL_FMC_MspInit+0xf8>)
 800b066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b068:	f003 0301 	and.w	r3, r3, #1
 800b06c:	603b      	str	r3, [r7, #0]
 800b06e:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800b070:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b074:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b076:	2302      	movs	r3, #2
 800b078:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b07e:	2303      	movs	r3, #3
 800b080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b082:	230c      	movs	r3, #12
 800b084:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b086:	1d3b      	adds	r3, r7, #4
 800b088:	4619      	mov	r1, r3
 800b08a:	482d      	ldr	r0, [pc, #180]	; (800b140 <HAL_FMC_MspInit+0xfc>)
 800b08c:	f7f9 faf8 	bl	8004680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800b090:	f248 1333 	movw	r3, #33075	; 0x8133
 800b094:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b096:	2302      	movs	r3, #2
 800b098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b0a2:	230c      	movs	r3, #12
 800b0a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b0a6:	1d3b      	adds	r3, r7, #4
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	4826      	ldr	r0, [pc, #152]	; (800b144 <HAL_FMC_MspInit+0x100>)
 800b0ac:	f7f9 fae8 	bl	8004680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800b0b0:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b0b4:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0b6:	2302      	movs	r3, #2
 800b0b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0be:	2303      	movs	r3, #3
 800b0c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b0c2:	230c      	movs	r3, #12
 800b0c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b0c6:	1d3b      	adds	r3, r7, #4
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	481f      	ldr	r0, [pc, #124]	; (800b148 <HAL_FMC_MspInit+0x104>)
 800b0cc:	f7f9 fad8 	bl	8004680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800b0d0:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b0d4:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0d6:	2302      	movs	r3, #2
 800b0d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b0e2:	230c      	movs	r3, #12
 800b0e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800b0e6:	1d3b      	adds	r3, r7, #4
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	4818      	ldr	r0, [pc, #96]	; (800b14c <HAL_FMC_MspInit+0x108>)
 800b0ec:	f7f9 fac8 	bl	8004680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800b0f0:	2328      	movs	r3, #40	; 0x28
 800b0f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b100:	230c      	movs	r3, #12
 800b102:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800b104:	1d3b      	adds	r3, r7, #4
 800b106:	4619      	mov	r1, r3
 800b108:	4811      	ldr	r0, [pc, #68]	; (800b150 <HAL_FMC_MspInit+0x10c>)
 800b10a:	f7f9 fab9 	bl	8004680 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800b10e:	2308      	movs	r3, #8
 800b110:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b112:	2302      	movs	r3, #2
 800b114:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b116:	2300      	movs	r3, #0
 800b118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b11a:	2303      	movs	r3, #3
 800b11c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800b11e:	230c      	movs	r3, #12
 800b120:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800b122:	1d3b      	adds	r3, r7, #4
 800b124:	4619      	mov	r1, r3
 800b126:	480b      	ldr	r0, [pc, #44]	; (800b154 <HAL_FMC_MspInit+0x110>)
 800b128:	f7f9 faaa 	bl	8004680 <HAL_GPIO_Init>
 800b12c:	e000      	b.n	800b130 <HAL_FMC_MspInit+0xec>
    return;
 800b12e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800b130:	3718      	adds	r7, #24
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20007f3c 	.word	0x20007f3c
 800b13c:	40023800 	.word	0x40023800
 800b140:	40021000 	.word	0x40021000
 800b144:	40021800 	.word	0x40021800
 800b148:	40020c00 	.word	0x40020c00
 800b14c:	40021400 	.word	0x40021400
 800b150:	40021c00 	.word	0x40021c00
 800b154:	40020800 	.word	0x40020800

0800b158 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800b158:	b580      	push	{r7, lr}
 800b15a:	b082      	sub	sp, #8
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800b160:	f7ff ff70 	bl	800b044 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b08a      	sub	sp, #40	; 0x28
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a2b      	ldr	r2, [pc, #172]	; (800b228 <HAL_SAI_MspInit+0xbc>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d124      	bne.n	800b1c8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800b17e:	4b2b      	ldr	r3, [pc, #172]	; (800b22c <HAL_SAI_MspInit+0xc0>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10b      	bne.n	800b19e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b186:	4b2a      	ldr	r3, [pc, #168]	; (800b230 <HAL_SAI_MspInit+0xc4>)
 800b188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18a:	4a29      	ldr	r2, [pc, #164]	; (800b230 <HAL_SAI_MspInit+0xc4>)
 800b18c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b190:	6453      	str	r3, [r2, #68]	; 0x44
 800b192:	4b27      	ldr	r3, [pc, #156]	; (800b230 <HAL_SAI_MspInit+0xc4>)
 800b194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800b19e:	4b23      	ldr	r3, [pc, #140]	; (800b22c <HAL_SAI_MspInit+0xc0>)
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	4a21      	ldr	r2, [pc, #132]	; (800b22c <HAL_SAI_MspInit+0xc0>)
 800b1a6:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800b1a8:	23f0      	movs	r3, #240	; 0xf0
 800b1aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b1b8:	230a      	movs	r3, #10
 800b1ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800b1bc:	f107 0314 	add.w	r3, r7, #20
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	481c      	ldr	r0, [pc, #112]	; (800b234 <HAL_SAI_MspInit+0xc8>)
 800b1c4:	f7f9 fa5c 	bl	8004680 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a1a      	ldr	r2, [pc, #104]	; (800b238 <HAL_SAI_MspInit+0xcc>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d125      	bne.n	800b21e <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800b1d2:	4b16      	ldr	r3, [pc, #88]	; (800b22c <HAL_SAI_MspInit+0xc0>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10b      	bne.n	800b1f2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800b1da:	4b15      	ldr	r3, [pc, #84]	; (800b230 <HAL_SAI_MspInit+0xc4>)
 800b1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1de:	4a14      	ldr	r2, [pc, #80]	; (800b230 <HAL_SAI_MspInit+0xc4>)
 800b1e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b1e4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1e6:	4b12      	ldr	r3, [pc, #72]	; (800b230 <HAL_SAI_MspInit+0xc4>)
 800b1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b1ee:	60fb      	str	r3, [r7, #12]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800b1f2:	4b0e      	ldr	r3, [pc, #56]	; (800b22c <HAL_SAI_MspInit+0xc0>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	3301      	adds	r3, #1
 800b1f8:	4a0c      	ldr	r2, [pc, #48]	; (800b22c <HAL_SAI_MspInit+0xc0>)
 800b1fa:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800b1fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b200:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b202:	2302      	movs	r3, #2
 800b204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b206:	2300      	movs	r3, #0
 800b208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b20a:	2303      	movs	r3, #3
 800b20c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800b20e:	230a      	movs	r3, #10
 800b210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800b212:	f107 0314 	add.w	r3, r7, #20
 800b216:	4619      	mov	r1, r3
 800b218:	4808      	ldr	r0, [pc, #32]	; (800b23c <HAL_SAI_MspInit+0xd0>)
 800b21a:	f7f9 fa31 	bl	8004680 <HAL_GPIO_Init>

    }
}
 800b21e:	bf00      	nop
 800b220:	3728      	adds	r7, #40	; 0x28
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	40015c04 	.word	0x40015c04
 800b22c:	20007f40 	.word	0x20007f40
 800b230:	40023800 	.word	0x40023800
 800b234:	40022000 	.word	0x40022000
 800b238:	40015c24 	.word	0x40015c24
 800b23c:	40021800 	.word	0x40021800

0800b240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b240:	b480      	push	{r7}
 800b242:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b244:	bf00      	nop
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b24e:	b480      	push	{r7}
 800b250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b252:	e7fe      	b.n	800b252 <HardFault_Handler+0x4>

0800b254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b258:	e7fe      	b.n	800b258 <MemManage_Handler+0x4>

0800b25a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b25a:	b480      	push	{r7}
 800b25c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b25e:	e7fe      	b.n	800b25e <BusFault_Handler+0x4>

0800b260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b260:	b480      	push	{r7}
 800b262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b264:	e7fe      	b.n	800b264 <UsageFault_Handler+0x4>

0800b266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b266:	b480      	push	{r7}
 800b268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b26a:	bf00      	nop
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b278:	bf00      	nop
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b282:	b480      	push	{r7}
 800b284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b286:	bf00      	nop
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b294:	f7f8 fb3a 	bl	800390c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b298:	bf00      	nop
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800b2a0:	4802      	ldr	r0, [pc, #8]	; (800b2ac <LTDC_IRQHandler+0x10>)
 800b2a2:	f7fa fb75 	bl	8005990 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800b2a6:	bf00      	nop
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	2000827c 	.word	0x2000827c

0800b2b0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800b2b4:	4802      	ldr	r0, [pc, #8]	; (800b2c0 <DMA2D_IRQHandler+0x10>)
 800b2b6:	f7f8 ff96 	bl	80041e6 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800b2ba:	bf00      	nop
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20008444 	.word	0x20008444

0800b2c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b2c8:	4b15      	ldr	r3, [pc, #84]	; (800b320 <SystemInit+0x5c>)
 800b2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2ce:	4a14      	ldr	r2, [pc, #80]	; (800b320 <SystemInit+0x5c>)
 800b2d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b2d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b2d8:	4b12      	ldr	r3, [pc, #72]	; (800b324 <SystemInit+0x60>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a11      	ldr	r2, [pc, #68]	; (800b324 <SystemInit+0x60>)
 800b2de:	f043 0301 	orr.w	r3, r3, #1
 800b2e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b2e4:	4b0f      	ldr	r3, [pc, #60]	; (800b324 <SystemInit+0x60>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b2ea:	4b0e      	ldr	r3, [pc, #56]	; (800b324 <SystemInit+0x60>)
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	490d      	ldr	r1, [pc, #52]	; (800b324 <SystemInit+0x60>)
 800b2f0:	4b0d      	ldr	r3, [pc, #52]	; (800b328 <SystemInit+0x64>)
 800b2f2:	4013      	ands	r3, r2
 800b2f4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b2f6:	4b0b      	ldr	r3, [pc, #44]	; (800b324 <SystemInit+0x60>)
 800b2f8:	4a0c      	ldr	r2, [pc, #48]	; (800b32c <SystemInit+0x68>)
 800b2fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b2fc:	4b09      	ldr	r3, [pc, #36]	; (800b324 <SystemInit+0x60>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a08      	ldr	r2, [pc, #32]	; (800b324 <SystemInit+0x60>)
 800b302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b306:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b308:	4b06      	ldr	r3, [pc, #24]	; (800b324 <SystemInit+0x60>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <SystemInit+0x5c>)
 800b310:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b314:	609a      	str	r2, [r3, #8]
#endif
}
 800b316:	bf00      	nop
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	e000ed00 	.word	0xe000ed00
 800b324:	40023800 	.word	0x40023800
 800b328:	fef6ffff 	.word	0xfef6ffff
 800b32c:	24003010 	.word	0x24003010

0800b330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b330:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b336:	e003      	b.n	800b340 <LoopCopyDataInit>

0800b338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b338:	4b0c      	ldr	r3, [pc, #48]	; (800b36c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b33a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b33c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b33e:	3104      	adds	r1, #4

0800b340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b340:	480b      	ldr	r0, [pc, #44]	; (800b370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b342:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b348:	d3f6      	bcc.n	800b338 <CopyDataInit>
  ldr  r2, =_sbss
 800b34a:	4a0b      	ldr	r2, [pc, #44]	; (800b378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b34c:	e002      	b.n	800b354 <LoopFillZerobss>

0800b34e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b34e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b350:	f842 3b04 	str.w	r3, [r2], #4

0800b354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b354:	4b09      	ldr	r3, [pc, #36]	; (800b37c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b358:	d3f9      	bcc.n	800b34e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b35a:	f7ff ffb3 	bl	800b2c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b35e:	f000 f811 	bl	800b384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b362:	f7fe f9a3 	bl	80096ac <main>
  bx  lr    
 800b366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b368:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b36c:	08011590 	.word	0x08011590
  ldr  r0, =_sdata
 800b370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b374:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 800b378:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 800b37c:	20008538 	.word	0x20008538

0800b380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b380:	e7fe      	b.n	800b380 <ADC_IRQHandler>
	...

0800b384 <__libc_init_array>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4d0d      	ldr	r5, [pc, #52]	; (800b3bc <__libc_init_array+0x38>)
 800b388:	4c0d      	ldr	r4, [pc, #52]	; (800b3c0 <__libc_init_array+0x3c>)
 800b38a:	1b64      	subs	r4, r4, r5
 800b38c:	10a4      	asrs	r4, r4, #2
 800b38e:	2600      	movs	r6, #0
 800b390:	42a6      	cmp	r6, r4
 800b392:	d109      	bne.n	800b3a8 <__libc_init_array+0x24>
 800b394:	4d0b      	ldr	r5, [pc, #44]	; (800b3c4 <__libc_init_array+0x40>)
 800b396:	4c0c      	ldr	r4, [pc, #48]	; (800b3c8 <__libc_init_array+0x44>)
 800b398:	f001 f858 	bl	800c44c <_init>
 800b39c:	1b64      	subs	r4, r4, r5
 800b39e:	10a4      	asrs	r4, r4, #2
 800b3a0:	2600      	movs	r6, #0
 800b3a2:	42a6      	cmp	r6, r4
 800b3a4:	d105      	bne.n	800b3b2 <__libc_init_array+0x2e>
 800b3a6:	bd70      	pop	{r4, r5, r6, pc}
 800b3a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3ac:	4798      	blx	r3
 800b3ae:	3601      	adds	r6, #1
 800b3b0:	e7ee      	b.n	800b390 <__libc_init_array+0xc>
 800b3b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3b6:	4798      	blx	r3
 800b3b8:	3601      	adds	r6, #1
 800b3ba:	e7f2      	b.n	800b3a2 <__libc_init_array+0x1e>
 800b3bc:	08011588 	.word	0x08011588
 800b3c0:	08011588 	.word	0x08011588
 800b3c4:	08011588 	.word	0x08011588
 800b3c8:	0801158c 	.word	0x0801158c

0800b3cc <memset>:
 800b3cc:	4402      	add	r2, r0
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d100      	bne.n	800b3d6 <memset+0xa>
 800b3d4:	4770      	bx	lr
 800b3d6:	f803 1b01 	strb.w	r1, [r3], #1
 800b3da:	e7f9      	b.n	800b3d0 <memset+0x4>
 800b3dc:	0000      	movs	r0, r0
	...

0800b3e0 <sin>:
 800b3e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3e2:	ec53 2b10 	vmov	r2, r3, d0
 800b3e6:	4826      	ldr	r0, [pc, #152]	; (800b480 <sin+0xa0>)
 800b3e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b3ec:	4281      	cmp	r1, r0
 800b3ee:	dc07      	bgt.n	800b400 <sin+0x20>
 800b3f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b478 <sin+0x98>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	f000 fe5b 	bl	800c0b0 <__kernel_sin>
 800b3fa:	ec51 0b10 	vmov	r0, r1, d0
 800b3fe:	e007      	b.n	800b410 <sin+0x30>
 800b400:	4820      	ldr	r0, [pc, #128]	; (800b484 <sin+0xa4>)
 800b402:	4281      	cmp	r1, r0
 800b404:	dd09      	ble.n	800b41a <sin+0x3a>
 800b406:	ee10 0a10 	vmov	r0, s0
 800b40a:	4619      	mov	r1, r3
 800b40c:	f7f4 ff00 	bl	8000210 <__aeabi_dsub>
 800b410:	ec41 0b10 	vmov	d0, r0, r1
 800b414:	b005      	add	sp, #20
 800b416:	f85d fb04 	ldr.w	pc, [sp], #4
 800b41a:	4668      	mov	r0, sp
 800b41c:	f000 f834 	bl	800b488 <__ieee754_rem_pio2>
 800b420:	f000 0003 	and.w	r0, r0, #3
 800b424:	2801      	cmp	r0, #1
 800b426:	d008      	beq.n	800b43a <sin+0x5a>
 800b428:	2802      	cmp	r0, #2
 800b42a:	d00d      	beq.n	800b448 <sin+0x68>
 800b42c:	b9d0      	cbnz	r0, 800b464 <sin+0x84>
 800b42e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b432:	ed9d 0b00 	vldr	d0, [sp]
 800b436:	2001      	movs	r0, #1
 800b438:	e7dd      	b.n	800b3f6 <sin+0x16>
 800b43a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b43e:	ed9d 0b00 	vldr	d0, [sp]
 800b442:	f000 fa2d 	bl	800b8a0 <__kernel_cos>
 800b446:	e7d8      	b.n	800b3fa <sin+0x1a>
 800b448:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b44c:	ed9d 0b00 	vldr	d0, [sp]
 800b450:	2001      	movs	r0, #1
 800b452:	f000 fe2d 	bl	800c0b0 <__kernel_sin>
 800b456:	ec53 2b10 	vmov	r2, r3, d0
 800b45a:	ee10 0a10 	vmov	r0, s0
 800b45e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b462:	e7d5      	b.n	800b410 <sin+0x30>
 800b464:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b468:	ed9d 0b00 	vldr	d0, [sp]
 800b46c:	f000 fa18 	bl	800b8a0 <__kernel_cos>
 800b470:	e7f1      	b.n	800b456 <sin+0x76>
 800b472:	bf00      	nop
 800b474:	f3af 8000 	nop.w
	...
 800b480:	3fe921fb 	.word	0x3fe921fb
 800b484:	7fefffff 	.word	0x7fefffff

0800b488 <__ieee754_rem_pio2>:
 800b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b48c:	ed2d 8b02 	vpush	{d8}
 800b490:	ec55 4b10 	vmov	r4, r5, d0
 800b494:	4bca      	ldr	r3, [pc, #808]	; (800b7c0 <__ieee754_rem_pio2+0x338>)
 800b496:	b08b      	sub	sp, #44	; 0x2c
 800b498:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b49c:	4598      	cmp	r8, r3
 800b49e:	4682      	mov	sl, r0
 800b4a0:	9502      	str	r5, [sp, #8]
 800b4a2:	dc08      	bgt.n	800b4b6 <__ieee754_rem_pio2+0x2e>
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	ed80 0b00 	vstr	d0, [r0]
 800b4ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b4b0:	f04f 0b00 	mov.w	fp, #0
 800b4b4:	e028      	b.n	800b508 <__ieee754_rem_pio2+0x80>
 800b4b6:	4bc3      	ldr	r3, [pc, #780]	; (800b7c4 <__ieee754_rem_pio2+0x33c>)
 800b4b8:	4598      	cmp	r8, r3
 800b4ba:	dc78      	bgt.n	800b5ae <__ieee754_rem_pio2+0x126>
 800b4bc:	9b02      	ldr	r3, [sp, #8]
 800b4be:	4ec2      	ldr	r6, [pc, #776]	; (800b7c8 <__ieee754_rem_pio2+0x340>)
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	ee10 0a10 	vmov	r0, s0
 800b4c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b788 <__ieee754_rem_pio2+0x300>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	dd39      	ble.n	800b544 <__ieee754_rem_pio2+0xbc>
 800b4d0:	f7f4 fe9e 	bl	8000210 <__aeabi_dsub>
 800b4d4:	45b0      	cmp	r8, r6
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	460d      	mov	r5, r1
 800b4da:	d01b      	beq.n	800b514 <__ieee754_rem_pio2+0x8c>
 800b4dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800b790 <__ieee754_rem_pio2+0x308>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fe95 	bl	8000210 <__aeabi_dsub>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	e9ca 2300 	strd	r2, r3, [sl]
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	f7f4 fe8d 	bl	8000210 <__aeabi_dsub>
 800b4f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800b790 <__ieee754_rem_pio2+0x308>)
 800b4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fc:	f7f4 fe88 	bl	8000210 <__aeabi_dsub>
 800b500:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b504:	f04f 0b01 	mov.w	fp, #1
 800b508:	4658      	mov	r0, fp
 800b50a:	b00b      	add	sp, #44	; 0x2c
 800b50c:	ecbd 8b02 	vpop	{d8}
 800b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b514:	a3a0      	add	r3, pc, #640	; (adr r3, 800b798 <__ieee754_rem_pio2+0x310>)
 800b516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51a:	f7f4 fe79 	bl	8000210 <__aeabi_dsub>
 800b51e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x318>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	4604      	mov	r4, r0
 800b526:	460d      	mov	r5, r1
 800b528:	f7f4 fe72 	bl	8000210 <__aeabi_dsub>
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	e9ca 2300 	strd	r2, r3, [sl]
 800b534:	4620      	mov	r0, r4
 800b536:	4629      	mov	r1, r5
 800b538:	f7f4 fe6a 	bl	8000210 <__aeabi_dsub>
 800b53c:	a398      	add	r3, pc, #608	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x318>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	e7db      	b.n	800b4fc <__ieee754_rem_pio2+0x74>
 800b544:	f7f4 fe66 	bl	8000214 <__adddf3>
 800b548:	45b0      	cmp	r8, r6
 800b54a:	4604      	mov	r4, r0
 800b54c:	460d      	mov	r5, r1
 800b54e:	d016      	beq.n	800b57e <__ieee754_rem_pio2+0xf6>
 800b550:	a38f      	add	r3, pc, #572	; (adr r3, 800b790 <__ieee754_rem_pio2+0x308>)
 800b552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b556:	f7f4 fe5d 	bl	8000214 <__adddf3>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	e9ca 2300 	strd	r2, r3, [sl]
 800b562:	4620      	mov	r0, r4
 800b564:	4629      	mov	r1, r5
 800b566:	f7f4 fe53 	bl	8000210 <__aeabi_dsub>
 800b56a:	a389      	add	r3, pc, #548	; (adr r3, 800b790 <__ieee754_rem_pio2+0x308>)
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f7f4 fe50 	bl	8000214 <__adddf3>
 800b574:	f04f 3bff 	mov.w	fp, #4294967295
 800b578:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b57c:	e7c4      	b.n	800b508 <__ieee754_rem_pio2+0x80>
 800b57e:	a386      	add	r3, pc, #536	; (adr r3, 800b798 <__ieee754_rem_pio2+0x310>)
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f7f4 fe46 	bl	8000214 <__adddf3>
 800b588:	a385      	add	r3, pc, #532	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x318>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	4604      	mov	r4, r0
 800b590:	460d      	mov	r5, r1
 800b592:	f7f4 fe3f 	bl	8000214 <__adddf3>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	e9ca 2300 	strd	r2, r3, [sl]
 800b59e:	4620      	mov	r0, r4
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	f7f4 fe35 	bl	8000210 <__aeabi_dsub>
 800b5a6:	a37e      	add	r3, pc, #504	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x318>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	e7e0      	b.n	800b570 <__ieee754_rem_pio2+0xe8>
 800b5ae:	4b87      	ldr	r3, [pc, #540]	; (800b7cc <__ieee754_rem_pio2+0x344>)
 800b5b0:	4598      	cmp	r8, r3
 800b5b2:	f300 80d9 	bgt.w	800b768 <__ieee754_rem_pio2+0x2e0>
 800b5b6:	f000 fe39 	bl	800c22c <fabs>
 800b5ba:	ec55 4b10 	vmov	r4, r5, d0
 800b5be:	ee10 0a10 	vmov	r0, s0
 800b5c2:	a379      	add	r3, pc, #484	; (adr r3, 800b7a8 <__ieee754_rem_pio2+0x320>)
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7f4 ffd9 	bl	8000580 <__aeabi_dmul>
 800b5ce:	4b80      	ldr	r3, [pc, #512]	; (800b7d0 <__ieee754_rem_pio2+0x348>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f7f4 fe1f 	bl	8000214 <__adddf3>
 800b5d6:	f7f5 fa6d 	bl	8000ab4 <__aeabi_d2iz>
 800b5da:	4683      	mov	fp, r0
 800b5dc:	f7f4 ff66 	bl	80004ac <__aeabi_i2d>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	ec43 2b18 	vmov	d8, r2, r3
 800b5e8:	a367      	add	r3, pc, #412	; (adr r3, 800b788 <__ieee754_rem_pio2+0x300>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f4 ffc7 	bl	8000580 <__aeabi_dmul>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	4629      	mov	r1, r5
 800b5fa:	f7f4 fe09 	bl	8000210 <__aeabi_dsub>
 800b5fe:	a364      	add	r3, pc, #400	; (adr r3, 800b790 <__ieee754_rem_pio2+0x308>)
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	4606      	mov	r6, r0
 800b606:	460f      	mov	r7, r1
 800b608:	ec51 0b18 	vmov	r0, r1, d8
 800b60c:	f7f4 ffb8 	bl	8000580 <__aeabi_dmul>
 800b610:	f1bb 0f1f 	cmp.w	fp, #31
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	dc0d      	bgt.n	800b636 <__ieee754_rem_pio2+0x1ae>
 800b61a:	4b6e      	ldr	r3, [pc, #440]	; (800b7d4 <__ieee754_rem_pio2+0x34c>)
 800b61c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b624:	4543      	cmp	r3, r8
 800b626:	d006      	beq.n	800b636 <__ieee754_rem_pio2+0x1ae>
 800b628:	4622      	mov	r2, r4
 800b62a:	462b      	mov	r3, r5
 800b62c:	4630      	mov	r0, r6
 800b62e:	4639      	mov	r1, r7
 800b630:	f7f4 fdee 	bl	8000210 <__aeabi_dsub>
 800b634:	e00f      	b.n	800b656 <__ieee754_rem_pio2+0x1ce>
 800b636:	462b      	mov	r3, r5
 800b638:	4622      	mov	r2, r4
 800b63a:	4630      	mov	r0, r6
 800b63c:	4639      	mov	r1, r7
 800b63e:	f7f4 fde7 	bl	8000210 <__aeabi_dsub>
 800b642:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b646:	9303      	str	r3, [sp, #12]
 800b648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b64c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b650:	f1b8 0f10 	cmp.w	r8, #16
 800b654:	dc02      	bgt.n	800b65c <__ieee754_rem_pio2+0x1d4>
 800b656:	e9ca 0100 	strd	r0, r1, [sl]
 800b65a:	e039      	b.n	800b6d0 <__ieee754_rem_pio2+0x248>
 800b65c:	a34e      	add	r3, pc, #312	; (adr r3, 800b798 <__ieee754_rem_pio2+0x310>)
 800b65e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b662:	ec51 0b18 	vmov	r0, r1, d8
 800b666:	f7f4 ff8b 	bl	8000580 <__aeabi_dmul>
 800b66a:	4604      	mov	r4, r0
 800b66c:	460d      	mov	r5, r1
 800b66e:	4602      	mov	r2, r0
 800b670:	460b      	mov	r3, r1
 800b672:	4630      	mov	r0, r6
 800b674:	4639      	mov	r1, r7
 800b676:	f7f4 fdcb 	bl	8000210 <__aeabi_dsub>
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4680      	mov	r8, r0
 800b680:	4689      	mov	r9, r1
 800b682:	4630      	mov	r0, r6
 800b684:	4639      	mov	r1, r7
 800b686:	f7f4 fdc3 	bl	8000210 <__aeabi_dsub>
 800b68a:	4622      	mov	r2, r4
 800b68c:	462b      	mov	r3, r5
 800b68e:	f7f4 fdbf 	bl	8000210 <__aeabi_dsub>
 800b692:	a343      	add	r3, pc, #268	; (adr r3, 800b7a0 <__ieee754_rem_pio2+0x318>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	4604      	mov	r4, r0
 800b69a:	460d      	mov	r5, r1
 800b69c:	ec51 0b18 	vmov	r0, r1, d8
 800b6a0:	f7f4 ff6e 	bl	8000580 <__aeabi_dmul>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f7f4 fdb2 	bl	8000210 <__aeabi_dsub>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4604      	mov	r4, r0
 800b6b2:	460d      	mov	r5, r1
 800b6b4:	4640      	mov	r0, r8
 800b6b6:	4649      	mov	r1, r9
 800b6b8:	f7f4 fdaa 	bl	8000210 <__aeabi_dsub>
 800b6bc:	9a03      	ldr	r2, [sp, #12]
 800b6be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b31      	cmp	r3, #49	; 0x31
 800b6c6:	dc24      	bgt.n	800b712 <__ieee754_rem_pio2+0x28a>
 800b6c8:	e9ca 0100 	strd	r0, r1, [sl]
 800b6cc:	4646      	mov	r6, r8
 800b6ce:	464f      	mov	r7, r9
 800b6d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4642      	mov	r2, r8
 800b6d8:	464b      	mov	r3, r9
 800b6da:	4639      	mov	r1, r7
 800b6dc:	f7f4 fd98 	bl	8000210 <__aeabi_dsub>
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	4622      	mov	r2, r4
 800b6e4:	f7f4 fd94 	bl	8000210 <__aeabi_dsub>
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6f0:	f6bf af0a 	bge.w	800b508 <__ieee754_rem_pio2+0x80>
 800b6f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b6f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800b6fc:	f8ca 8000 	str.w	r8, [sl]
 800b700:	f8ca 0008 	str.w	r0, [sl, #8]
 800b704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b708:	f8ca 300c 	str.w	r3, [sl, #12]
 800b70c:	f1cb 0b00 	rsb	fp, fp, #0
 800b710:	e6fa      	b.n	800b508 <__ieee754_rem_pio2+0x80>
 800b712:	a327      	add	r3, pc, #156	; (adr r3, 800b7b0 <__ieee754_rem_pio2+0x328>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	ec51 0b18 	vmov	r0, r1, d8
 800b71c:	f7f4 ff30 	bl	8000580 <__aeabi_dmul>
 800b720:	4604      	mov	r4, r0
 800b722:	460d      	mov	r5, r1
 800b724:	4602      	mov	r2, r0
 800b726:	460b      	mov	r3, r1
 800b728:	4640      	mov	r0, r8
 800b72a:	4649      	mov	r1, r9
 800b72c:	f7f4 fd70 	bl	8000210 <__aeabi_dsub>
 800b730:	4602      	mov	r2, r0
 800b732:	460b      	mov	r3, r1
 800b734:	4606      	mov	r6, r0
 800b736:	460f      	mov	r7, r1
 800b738:	4640      	mov	r0, r8
 800b73a:	4649      	mov	r1, r9
 800b73c:	f7f4 fd68 	bl	8000210 <__aeabi_dsub>
 800b740:	4622      	mov	r2, r4
 800b742:	462b      	mov	r3, r5
 800b744:	f7f4 fd64 	bl	8000210 <__aeabi_dsub>
 800b748:	a31b      	add	r3, pc, #108	; (adr r3, 800b7b8 <__ieee754_rem_pio2+0x330>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	4604      	mov	r4, r0
 800b750:	460d      	mov	r5, r1
 800b752:	ec51 0b18 	vmov	r0, r1, d8
 800b756:	f7f4 ff13 	bl	8000580 <__aeabi_dmul>
 800b75a:	4622      	mov	r2, r4
 800b75c:	462b      	mov	r3, r5
 800b75e:	f7f4 fd57 	bl	8000210 <__aeabi_dsub>
 800b762:	4604      	mov	r4, r0
 800b764:	460d      	mov	r5, r1
 800b766:	e75f      	b.n	800b628 <__ieee754_rem_pio2+0x1a0>
 800b768:	4b1b      	ldr	r3, [pc, #108]	; (800b7d8 <__ieee754_rem_pio2+0x350>)
 800b76a:	4598      	cmp	r8, r3
 800b76c:	dd36      	ble.n	800b7dc <__ieee754_rem_pio2+0x354>
 800b76e:	ee10 2a10 	vmov	r2, s0
 800b772:	462b      	mov	r3, r5
 800b774:	4620      	mov	r0, r4
 800b776:	4629      	mov	r1, r5
 800b778:	f7f4 fd4a 	bl	8000210 <__aeabi_dsub>
 800b77c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b780:	e9ca 0100 	strd	r0, r1, [sl]
 800b784:	e694      	b.n	800b4b0 <__ieee754_rem_pio2+0x28>
 800b786:	bf00      	nop
 800b788:	54400000 	.word	0x54400000
 800b78c:	3ff921fb 	.word	0x3ff921fb
 800b790:	1a626331 	.word	0x1a626331
 800b794:	3dd0b461 	.word	0x3dd0b461
 800b798:	1a600000 	.word	0x1a600000
 800b79c:	3dd0b461 	.word	0x3dd0b461
 800b7a0:	2e037073 	.word	0x2e037073
 800b7a4:	3ba3198a 	.word	0x3ba3198a
 800b7a8:	6dc9c883 	.word	0x6dc9c883
 800b7ac:	3fe45f30 	.word	0x3fe45f30
 800b7b0:	2e000000 	.word	0x2e000000
 800b7b4:	3ba3198a 	.word	0x3ba3198a
 800b7b8:	252049c1 	.word	0x252049c1
 800b7bc:	397b839a 	.word	0x397b839a
 800b7c0:	3fe921fb 	.word	0x3fe921fb
 800b7c4:	4002d97b 	.word	0x4002d97b
 800b7c8:	3ff921fb 	.word	0x3ff921fb
 800b7cc:	413921fb 	.word	0x413921fb
 800b7d0:	3fe00000 	.word	0x3fe00000
 800b7d4:	080113a4 	.word	0x080113a4
 800b7d8:	7fefffff 	.word	0x7fefffff
 800b7dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b7e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b7e4:	ee10 0a10 	vmov	r0, s0
 800b7e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b7ec:	ee10 6a10 	vmov	r6, s0
 800b7f0:	460f      	mov	r7, r1
 800b7f2:	f7f5 f95f 	bl	8000ab4 <__aeabi_d2iz>
 800b7f6:	f7f4 fe59 	bl	80004ac <__aeabi_i2d>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4630      	mov	r0, r6
 800b800:	4639      	mov	r1, r7
 800b802:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b806:	f7f4 fd03 	bl	8000210 <__aeabi_dsub>
 800b80a:	4b22      	ldr	r3, [pc, #136]	; (800b894 <__ieee754_rem_pio2+0x40c>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	f7f4 feb7 	bl	8000580 <__aeabi_dmul>
 800b812:	460f      	mov	r7, r1
 800b814:	4606      	mov	r6, r0
 800b816:	f7f5 f94d 	bl	8000ab4 <__aeabi_d2iz>
 800b81a:	f7f4 fe47 	bl	80004ac <__aeabi_i2d>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b82a:	f7f4 fcf1 	bl	8000210 <__aeabi_dsub>
 800b82e:	4b19      	ldr	r3, [pc, #100]	; (800b894 <__ieee754_rem_pio2+0x40c>)
 800b830:	2200      	movs	r2, #0
 800b832:	f7f4 fea5 	bl	8000580 <__aeabi_dmul>
 800b836:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b83a:	ad04      	add	r5, sp, #16
 800b83c:	f04f 0803 	mov.w	r8, #3
 800b840:	46a9      	mov	r9, r5
 800b842:	2600      	movs	r6, #0
 800b844:	2700      	movs	r7, #0
 800b846:	4632      	mov	r2, r6
 800b848:	463b      	mov	r3, r7
 800b84a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b84e:	46c3      	mov	fp, r8
 800b850:	3d08      	subs	r5, #8
 800b852:	f108 38ff 	add.w	r8, r8, #4294967295
 800b856:	f7f5 f8fb 	bl	8000a50 <__aeabi_dcmpeq>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d1f3      	bne.n	800b846 <__ieee754_rem_pio2+0x3be>
 800b85e:	4b0e      	ldr	r3, [pc, #56]	; (800b898 <__ieee754_rem_pio2+0x410>)
 800b860:	9301      	str	r3, [sp, #4]
 800b862:	2302      	movs	r3, #2
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	4622      	mov	r2, r4
 800b868:	465b      	mov	r3, fp
 800b86a:	4651      	mov	r1, sl
 800b86c:	4648      	mov	r0, r9
 800b86e:	f000 f8df 	bl	800ba30 <__kernel_rem_pio2>
 800b872:	9b02      	ldr	r3, [sp, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	4683      	mov	fp, r0
 800b878:	f6bf ae46 	bge.w	800b508 <__ieee754_rem_pio2+0x80>
 800b87c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b880:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b884:	f8ca 3004 	str.w	r3, [sl, #4]
 800b888:	f8da 300c 	ldr.w	r3, [sl, #12]
 800b88c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b890:	e73a      	b.n	800b708 <__ieee754_rem_pio2+0x280>
 800b892:	bf00      	nop
 800b894:	41700000 	.word	0x41700000
 800b898:	08011424 	.word	0x08011424
 800b89c:	00000000 	.word	0x00000000

0800b8a0 <__kernel_cos>:
 800b8a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a4:	ec57 6b10 	vmov	r6, r7, d0
 800b8a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b8ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b8b0:	ed8d 1b00 	vstr	d1, [sp]
 800b8b4:	da07      	bge.n	800b8c6 <__kernel_cos+0x26>
 800b8b6:	ee10 0a10 	vmov	r0, s0
 800b8ba:	4639      	mov	r1, r7
 800b8bc:	f7f5 f8fa 	bl	8000ab4 <__aeabi_d2iz>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	f000 8088 	beq.w	800b9d6 <__kernel_cos+0x136>
 800b8c6:	4632      	mov	r2, r6
 800b8c8:	463b      	mov	r3, r7
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	f7f4 fe57 	bl	8000580 <__aeabi_dmul>
 800b8d2:	4b51      	ldr	r3, [pc, #324]	; (800ba18 <__kernel_cos+0x178>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	460d      	mov	r5, r1
 800b8da:	f7f4 fe51 	bl	8000580 <__aeabi_dmul>
 800b8de:	a340      	add	r3, pc, #256	; (adr r3, 800b9e0 <__kernel_cos+0x140>)
 800b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e4:	4682      	mov	sl, r0
 800b8e6:	468b      	mov	fp, r1
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	f7f4 fe48 	bl	8000580 <__aeabi_dmul>
 800b8f0:	a33d      	add	r3, pc, #244	; (adr r3, 800b9e8 <__kernel_cos+0x148>)
 800b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f6:	f7f4 fc8d 	bl	8000214 <__adddf3>
 800b8fa:	4622      	mov	r2, r4
 800b8fc:	462b      	mov	r3, r5
 800b8fe:	f7f4 fe3f 	bl	8000580 <__aeabi_dmul>
 800b902:	a33b      	add	r3, pc, #236	; (adr r3, 800b9f0 <__kernel_cos+0x150>)
 800b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b908:	f7f4 fc82 	bl	8000210 <__aeabi_dsub>
 800b90c:	4622      	mov	r2, r4
 800b90e:	462b      	mov	r3, r5
 800b910:	f7f4 fe36 	bl	8000580 <__aeabi_dmul>
 800b914:	a338      	add	r3, pc, #224	; (adr r3, 800b9f8 <__kernel_cos+0x158>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	f7f4 fc7b 	bl	8000214 <__adddf3>
 800b91e:	4622      	mov	r2, r4
 800b920:	462b      	mov	r3, r5
 800b922:	f7f4 fe2d 	bl	8000580 <__aeabi_dmul>
 800b926:	a336      	add	r3, pc, #216	; (adr r3, 800ba00 <__kernel_cos+0x160>)
 800b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b92c:	f7f4 fc70 	bl	8000210 <__aeabi_dsub>
 800b930:	4622      	mov	r2, r4
 800b932:	462b      	mov	r3, r5
 800b934:	f7f4 fe24 	bl	8000580 <__aeabi_dmul>
 800b938:	a333      	add	r3, pc, #204	; (adr r3, 800ba08 <__kernel_cos+0x168>)
 800b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b93e:	f7f4 fc69 	bl	8000214 <__adddf3>
 800b942:	4622      	mov	r2, r4
 800b944:	462b      	mov	r3, r5
 800b946:	f7f4 fe1b 	bl	8000580 <__aeabi_dmul>
 800b94a:	4622      	mov	r2, r4
 800b94c:	462b      	mov	r3, r5
 800b94e:	f7f4 fe17 	bl	8000580 <__aeabi_dmul>
 800b952:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b956:	4604      	mov	r4, r0
 800b958:	460d      	mov	r5, r1
 800b95a:	4630      	mov	r0, r6
 800b95c:	4639      	mov	r1, r7
 800b95e:	f7f4 fe0f 	bl	8000580 <__aeabi_dmul>
 800b962:	460b      	mov	r3, r1
 800b964:	4602      	mov	r2, r0
 800b966:	4629      	mov	r1, r5
 800b968:	4620      	mov	r0, r4
 800b96a:	f7f4 fc51 	bl	8000210 <__aeabi_dsub>
 800b96e:	4b2b      	ldr	r3, [pc, #172]	; (800ba1c <__kernel_cos+0x17c>)
 800b970:	4598      	cmp	r8, r3
 800b972:	4606      	mov	r6, r0
 800b974:	460f      	mov	r7, r1
 800b976:	dc10      	bgt.n	800b99a <__kernel_cos+0xfa>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4650      	mov	r0, sl
 800b97e:	4659      	mov	r1, fp
 800b980:	f7f4 fc46 	bl	8000210 <__aeabi_dsub>
 800b984:	460b      	mov	r3, r1
 800b986:	4926      	ldr	r1, [pc, #152]	; (800ba20 <__kernel_cos+0x180>)
 800b988:	4602      	mov	r2, r0
 800b98a:	2000      	movs	r0, #0
 800b98c:	f7f4 fc40 	bl	8000210 <__aeabi_dsub>
 800b990:	ec41 0b10 	vmov	d0, r0, r1
 800b994:	b003      	add	sp, #12
 800b996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b99a:	4b22      	ldr	r3, [pc, #136]	; (800ba24 <__kernel_cos+0x184>)
 800b99c:	4920      	ldr	r1, [pc, #128]	; (800ba20 <__kernel_cos+0x180>)
 800b99e:	4598      	cmp	r8, r3
 800b9a0:	bfcc      	ite	gt
 800b9a2:	4d21      	ldrgt	r5, [pc, #132]	; (800ba28 <__kernel_cos+0x188>)
 800b9a4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b9a8:	2400      	movs	r4, #0
 800b9aa:	4622      	mov	r2, r4
 800b9ac:	462b      	mov	r3, r5
 800b9ae:	2000      	movs	r0, #0
 800b9b0:	f7f4 fc2e 	bl	8000210 <__aeabi_dsub>
 800b9b4:	4622      	mov	r2, r4
 800b9b6:	4680      	mov	r8, r0
 800b9b8:	4689      	mov	r9, r1
 800b9ba:	462b      	mov	r3, r5
 800b9bc:	4650      	mov	r0, sl
 800b9be:	4659      	mov	r1, fp
 800b9c0:	f7f4 fc26 	bl	8000210 <__aeabi_dsub>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	f7f4 fc22 	bl	8000210 <__aeabi_dsub>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4640      	mov	r0, r8
 800b9d2:	4649      	mov	r1, r9
 800b9d4:	e7da      	b.n	800b98c <__kernel_cos+0xec>
 800b9d6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ba10 <__kernel_cos+0x170>
 800b9da:	e7db      	b.n	800b994 <__kernel_cos+0xf4>
 800b9dc:	f3af 8000 	nop.w
 800b9e0:	be8838d4 	.word	0xbe8838d4
 800b9e4:	bda8fae9 	.word	0xbda8fae9
 800b9e8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b9ec:	3e21ee9e 	.word	0x3e21ee9e
 800b9f0:	809c52ad 	.word	0x809c52ad
 800b9f4:	3e927e4f 	.word	0x3e927e4f
 800b9f8:	19cb1590 	.word	0x19cb1590
 800b9fc:	3efa01a0 	.word	0x3efa01a0
 800ba00:	16c15177 	.word	0x16c15177
 800ba04:	3f56c16c 	.word	0x3f56c16c
 800ba08:	5555554c 	.word	0x5555554c
 800ba0c:	3fa55555 	.word	0x3fa55555
 800ba10:	00000000 	.word	0x00000000
 800ba14:	3ff00000 	.word	0x3ff00000
 800ba18:	3fe00000 	.word	0x3fe00000
 800ba1c:	3fd33332 	.word	0x3fd33332
 800ba20:	3ff00000 	.word	0x3ff00000
 800ba24:	3fe90000 	.word	0x3fe90000
 800ba28:	3fd20000 	.word	0x3fd20000
 800ba2c:	00000000 	.word	0x00000000

0800ba30 <__kernel_rem_pio2>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	ed2d 8b02 	vpush	{d8}
 800ba38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ba3c:	f112 0f14 	cmn.w	r2, #20
 800ba40:	9308      	str	r3, [sp, #32]
 800ba42:	9101      	str	r1, [sp, #4]
 800ba44:	4bc6      	ldr	r3, [pc, #792]	; (800bd60 <__kernel_rem_pio2+0x330>)
 800ba46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ba48:	9009      	str	r0, [sp, #36]	; 0x24
 800ba4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba4e:	9304      	str	r3, [sp, #16]
 800ba50:	9b08      	ldr	r3, [sp, #32]
 800ba52:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba56:	bfa8      	it	ge
 800ba58:	1ed4      	subge	r4, r2, #3
 800ba5a:	9306      	str	r3, [sp, #24]
 800ba5c:	bfb2      	itee	lt
 800ba5e:	2400      	movlt	r4, #0
 800ba60:	2318      	movge	r3, #24
 800ba62:	fb94 f4f3 	sdivge	r4, r4, r3
 800ba66:	f06f 0317 	mvn.w	r3, #23
 800ba6a:	fb04 3303 	mla	r3, r4, r3, r3
 800ba6e:	eb03 0a02 	add.w	sl, r3, r2
 800ba72:	9b04      	ldr	r3, [sp, #16]
 800ba74:	9a06      	ldr	r2, [sp, #24]
 800ba76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800bd50 <__kernel_rem_pio2+0x320>
 800ba7a:	eb03 0802 	add.w	r8, r3, r2
 800ba7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ba80:	1aa7      	subs	r7, r4, r2
 800ba82:	ae20      	add	r6, sp, #128	; 0x80
 800ba84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba88:	2500      	movs	r5, #0
 800ba8a:	4545      	cmp	r5, r8
 800ba8c:	dd18      	ble.n	800bac0 <__kernel_rem_pio2+0x90>
 800ba8e:	9b08      	ldr	r3, [sp, #32]
 800ba90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ba94:	aa20      	add	r2, sp, #128	; 0x80
 800ba96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800bd50 <__kernel_rem_pio2+0x320>
 800ba9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ba9e:	f1c3 0301 	rsb	r3, r3, #1
 800baa2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800baa6:	9307      	str	r3, [sp, #28]
 800baa8:	9b07      	ldr	r3, [sp, #28]
 800baaa:	9a04      	ldr	r2, [sp, #16]
 800baac:	4443      	add	r3, r8
 800baae:	429a      	cmp	r2, r3
 800bab0:	db2f      	blt.n	800bb12 <__kernel_rem_pio2+0xe2>
 800bab2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bab6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800baba:	462f      	mov	r7, r5
 800babc:	2600      	movs	r6, #0
 800babe:	e01b      	b.n	800baf8 <__kernel_rem_pio2+0xc8>
 800bac0:	42ef      	cmn	r7, r5
 800bac2:	d407      	bmi.n	800bad4 <__kernel_rem_pio2+0xa4>
 800bac4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bac8:	f7f4 fcf0 	bl	80004ac <__aeabi_i2d>
 800bacc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bad0:	3501      	adds	r5, #1
 800bad2:	e7da      	b.n	800ba8a <__kernel_rem_pio2+0x5a>
 800bad4:	ec51 0b18 	vmov	r0, r1, d8
 800bad8:	e7f8      	b.n	800bacc <__kernel_rem_pio2+0x9c>
 800bada:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bade:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bae2:	f7f4 fd4d 	bl	8000580 <__aeabi_dmul>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baee:	f7f4 fb91 	bl	8000214 <__adddf3>
 800baf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baf6:	3601      	adds	r6, #1
 800baf8:	9b06      	ldr	r3, [sp, #24]
 800bafa:	429e      	cmp	r6, r3
 800bafc:	f1a7 0708 	sub.w	r7, r7, #8
 800bb00:	ddeb      	ble.n	800bada <__kernel_rem_pio2+0xaa>
 800bb02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb06:	3508      	adds	r5, #8
 800bb08:	ecab 7b02 	vstmia	fp!, {d7}
 800bb0c:	f108 0801 	add.w	r8, r8, #1
 800bb10:	e7ca      	b.n	800baa8 <__kernel_rem_pio2+0x78>
 800bb12:	9b04      	ldr	r3, [sp, #16]
 800bb14:	aa0c      	add	r2, sp, #48	; 0x30
 800bb16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bb1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb22:	9c04      	ldr	r4, [sp, #16]
 800bb24:	930a      	str	r3, [sp, #40]	; 0x28
 800bb26:	ab98      	add	r3, sp, #608	; 0x260
 800bb28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bb30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800bb34:	f8cd b008 	str.w	fp, [sp, #8]
 800bb38:	4625      	mov	r5, r4
 800bb3a:	2d00      	cmp	r5, #0
 800bb3c:	dc78      	bgt.n	800bc30 <__kernel_rem_pio2+0x200>
 800bb3e:	ec47 6b10 	vmov	d0, r6, r7
 800bb42:	4650      	mov	r0, sl
 800bb44:	f000 fbfc 	bl	800c340 <scalbn>
 800bb48:	ec57 6b10 	vmov	r6, r7, d0
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bb52:	ee10 0a10 	vmov	r0, s0
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f4 fd12 	bl	8000580 <__aeabi_dmul>
 800bb5c:	ec41 0b10 	vmov	d0, r0, r1
 800bb60:	f000 fb6e 	bl	800c240 <floor>
 800bb64:	4b7f      	ldr	r3, [pc, #508]	; (800bd64 <__kernel_rem_pio2+0x334>)
 800bb66:	ec51 0b10 	vmov	r0, r1, d0
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f7f4 fd08 	bl	8000580 <__aeabi_dmul>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4630      	mov	r0, r6
 800bb76:	4639      	mov	r1, r7
 800bb78:	f7f4 fb4a 	bl	8000210 <__aeabi_dsub>
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	4606      	mov	r6, r0
 800bb80:	f7f4 ff98 	bl	8000ab4 <__aeabi_d2iz>
 800bb84:	9007      	str	r0, [sp, #28]
 800bb86:	f7f4 fc91 	bl	80004ac <__aeabi_i2d>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	4630      	mov	r0, r6
 800bb90:	4639      	mov	r1, r7
 800bb92:	f7f4 fb3d 	bl	8000210 <__aeabi_dsub>
 800bb96:	f1ba 0f00 	cmp.w	sl, #0
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	dd70      	ble.n	800bc82 <__kernel_rem_pio2+0x252>
 800bba0:	1e62      	subs	r2, r4, #1
 800bba2:	ab0c      	add	r3, sp, #48	; 0x30
 800bba4:	9d07      	ldr	r5, [sp, #28]
 800bba6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bbaa:	f1ca 0118 	rsb	r1, sl, #24
 800bbae:	fa40 f301 	asr.w	r3, r0, r1
 800bbb2:	441d      	add	r5, r3
 800bbb4:	408b      	lsls	r3, r1
 800bbb6:	1ac0      	subs	r0, r0, r3
 800bbb8:	ab0c      	add	r3, sp, #48	; 0x30
 800bbba:	9507      	str	r5, [sp, #28]
 800bbbc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bbc0:	f1ca 0317 	rsb	r3, sl, #23
 800bbc4:	fa40 f303 	asr.w	r3, r0, r3
 800bbc8:	9302      	str	r3, [sp, #8]
 800bbca:	9b02      	ldr	r3, [sp, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	dd66      	ble.n	800bc9e <__kernel_rem_pio2+0x26e>
 800bbd0:	9b07      	ldr	r3, [sp, #28]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	9307      	str	r3, [sp, #28]
 800bbd8:	4615      	mov	r5, r2
 800bbda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bbde:	4294      	cmp	r4, r2
 800bbe0:	f300 8099 	bgt.w	800bd16 <__kernel_rem_pio2+0x2e6>
 800bbe4:	f1ba 0f00 	cmp.w	sl, #0
 800bbe8:	dd07      	ble.n	800bbfa <__kernel_rem_pio2+0x1ca>
 800bbea:	f1ba 0f01 	cmp.w	sl, #1
 800bbee:	f000 80a5 	beq.w	800bd3c <__kernel_rem_pio2+0x30c>
 800bbf2:	f1ba 0f02 	cmp.w	sl, #2
 800bbf6:	f000 80c1 	beq.w	800bd7c <__kernel_rem_pio2+0x34c>
 800bbfa:	9b02      	ldr	r3, [sp, #8]
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d14e      	bne.n	800bc9e <__kernel_rem_pio2+0x26e>
 800bc00:	4632      	mov	r2, r6
 800bc02:	463b      	mov	r3, r7
 800bc04:	4958      	ldr	r1, [pc, #352]	; (800bd68 <__kernel_rem_pio2+0x338>)
 800bc06:	2000      	movs	r0, #0
 800bc08:	f7f4 fb02 	bl	8000210 <__aeabi_dsub>
 800bc0c:	4606      	mov	r6, r0
 800bc0e:	460f      	mov	r7, r1
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	d044      	beq.n	800bc9e <__kernel_rem_pio2+0x26e>
 800bc14:	4650      	mov	r0, sl
 800bc16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800bd58 <__kernel_rem_pio2+0x328>
 800bc1a:	f000 fb91 	bl	800c340 <scalbn>
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	ec53 2b10 	vmov	r2, r3, d0
 800bc26:	f7f4 faf3 	bl	8000210 <__aeabi_dsub>
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	460f      	mov	r7, r1
 800bc2e:	e036      	b.n	800bc9e <__kernel_rem_pio2+0x26e>
 800bc30:	4b4e      	ldr	r3, [pc, #312]	; (800bd6c <__kernel_rem_pio2+0x33c>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	4630      	mov	r0, r6
 800bc36:	4639      	mov	r1, r7
 800bc38:	f7f4 fca2 	bl	8000580 <__aeabi_dmul>
 800bc3c:	f7f4 ff3a 	bl	8000ab4 <__aeabi_d2iz>
 800bc40:	f7f4 fc34 	bl	80004ac <__aeabi_i2d>
 800bc44:	4b4a      	ldr	r3, [pc, #296]	; (800bd70 <__kernel_rem_pio2+0x340>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	4680      	mov	r8, r0
 800bc4a:	4689      	mov	r9, r1
 800bc4c:	f7f4 fc98 	bl	8000580 <__aeabi_dmul>
 800bc50:	4602      	mov	r2, r0
 800bc52:	460b      	mov	r3, r1
 800bc54:	4630      	mov	r0, r6
 800bc56:	4639      	mov	r1, r7
 800bc58:	f7f4 fada 	bl	8000210 <__aeabi_dsub>
 800bc5c:	f7f4 ff2a 	bl	8000ab4 <__aeabi_d2iz>
 800bc60:	9b02      	ldr	r3, [sp, #8]
 800bc62:	f843 0b04 	str.w	r0, [r3], #4
 800bc66:	3d01      	subs	r5, #1
 800bc68:	9302      	str	r3, [sp, #8]
 800bc6a:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc74:	4640      	mov	r0, r8
 800bc76:	4649      	mov	r1, r9
 800bc78:	f7f4 facc 	bl	8000214 <__adddf3>
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	460f      	mov	r7, r1
 800bc80:	e75b      	b.n	800bb3a <__kernel_rem_pio2+0x10a>
 800bc82:	d105      	bne.n	800bc90 <__kernel_rem_pio2+0x260>
 800bc84:	1e63      	subs	r3, r4, #1
 800bc86:	aa0c      	add	r2, sp, #48	; 0x30
 800bc88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bc8c:	15c3      	asrs	r3, r0, #23
 800bc8e:	e79b      	b.n	800bbc8 <__kernel_rem_pio2+0x198>
 800bc90:	4b38      	ldr	r3, [pc, #224]	; (800bd74 <__kernel_rem_pio2+0x344>)
 800bc92:	2200      	movs	r2, #0
 800bc94:	f7f4 fefa 	bl	8000a8c <__aeabi_dcmpge>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d139      	bne.n	800bd10 <__kernel_rem_pio2+0x2e0>
 800bc9c:	9002      	str	r0, [sp, #8]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2300      	movs	r3, #0
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	f7f4 fed3 	bl	8000a50 <__aeabi_dcmpeq>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	f000 80b4 	beq.w	800be18 <__kernel_rem_pio2+0x3e8>
 800bcb0:	f104 3bff 	add.w	fp, r4, #4294967295
 800bcb4:	465b      	mov	r3, fp
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	9904      	ldr	r1, [sp, #16]
 800bcba:	428b      	cmp	r3, r1
 800bcbc:	da65      	bge.n	800bd8a <__kernel_rem_pio2+0x35a>
 800bcbe:	2a00      	cmp	r2, #0
 800bcc0:	d07b      	beq.n	800bdba <__kernel_rem_pio2+0x38a>
 800bcc2:	ab0c      	add	r3, sp, #48	; 0x30
 800bcc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bcc8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	f000 80a0 	beq.w	800be12 <__kernel_rem_pio2+0x3e2>
 800bcd2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800bd58 <__kernel_rem_pio2+0x328>
 800bcd6:	4650      	mov	r0, sl
 800bcd8:	f000 fb32 	bl	800c340 <scalbn>
 800bcdc:	4f23      	ldr	r7, [pc, #140]	; (800bd6c <__kernel_rem_pio2+0x33c>)
 800bcde:	ec55 4b10 	vmov	r4, r5, d0
 800bce2:	46d8      	mov	r8, fp
 800bce4:	2600      	movs	r6, #0
 800bce6:	f1b8 0f00 	cmp.w	r8, #0
 800bcea:	f280 80cf 	bge.w	800be8c <__kernel_rem_pio2+0x45c>
 800bcee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800bd50 <__kernel_rem_pio2+0x320>
 800bcf2:	465f      	mov	r7, fp
 800bcf4:	f04f 0800 	mov.w	r8, #0
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	f2c0 80fd 	blt.w	800bef8 <__kernel_rem_pio2+0x4c8>
 800bcfe:	ab70      	add	r3, sp, #448	; 0x1c0
 800bd00:	f8df a074 	ldr.w	sl, [pc, #116]	; 800bd78 <__kernel_rem_pio2+0x348>
 800bd04:	ec55 4b18 	vmov	r4, r5, d8
 800bd08:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800bd0c:	2600      	movs	r6, #0
 800bd0e:	e0e5      	b.n	800bedc <__kernel_rem_pio2+0x4ac>
 800bd10:	2302      	movs	r3, #2
 800bd12:	9302      	str	r3, [sp, #8]
 800bd14:	e75c      	b.n	800bbd0 <__kernel_rem_pio2+0x1a0>
 800bd16:	f8db 3000 	ldr.w	r3, [fp]
 800bd1a:	b955      	cbnz	r5, 800bd32 <__kernel_rem_pio2+0x302>
 800bd1c:	b123      	cbz	r3, 800bd28 <__kernel_rem_pio2+0x2f8>
 800bd1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bd22:	f8cb 3000 	str.w	r3, [fp]
 800bd26:	2301      	movs	r3, #1
 800bd28:	3201      	adds	r2, #1
 800bd2a:	f10b 0b04 	add.w	fp, fp, #4
 800bd2e:	461d      	mov	r5, r3
 800bd30:	e755      	b.n	800bbde <__kernel_rem_pio2+0x1ae>
 800bd32:	1acb      	subs	r3, r1, r3
 800bd34:	f8cb 3000 	str.w	r3, [fp]
 800bd38:	462b      	mov	r3, r5
 800bd3a:	e7f5      	b.n	800bd28 <__kernel_rem_pio2+0x2f8>
 800bd3c:	1e62      	subs	r2, r4, #1
 800bd3e:	ab0c      	add	r3, sp, #48	; 0x30
 800bd40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd48:	a90c      	add	r1, sp, #48	; 0x30
 800bd4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd4e:	e754      	b.n	800bbfa <__kernel_rem_pio2+0x1ca>
	...
 800bd5c:	3ff00000 	.word	0x3ff00000
 800bd60:	08011570 	.word	0x08011570
 800bd64:	40200000 	.word	0x40200000
 800bd68:	3ff00000 	.word	0x3ff00000
 800bd6c:	3e700000 	.word	0x3e700000
 800bd70:	41700000 	.word	0x41700000
 800bd74:	3fe00000 	.word	0x3fe00000
 800bd78:	08011530 	.word	0x08011530
 800bd7c:	1e62      	subs	r2, r4, #1
 800bd7e:	ab0c      	add	r3, sp, #48	; 0x30
 800bd80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd88:	e7de      	b.n	800bd48 <__kernel_rem_pio2+0x318>
 800bd8a:	a90c      	add	r1, sp, #48	; 0x30
 800bd8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	430a      	orrs	r2, r1
 800bd94:	e790      	b.n	800bcb8 <__kernel_rem_pio2+0x288>
 800bd96:	3301      	adds	r3, #1
 800bd98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	d0fa      	beq.n	800bd96 <__kernel_rem_pio2+0x366>
 800bda0:	9a08      	ldr	r2, [sp, #32]
 800bda2:	18e3      	adds	r3, r4, r3
 800bda4:	18a6      	adds	r6, r4, r2
 800bda6:	aa20      	add	r2, sp, #128	; 0x80
 800bda8:	1c65      	adds	r5, r4, #1
 800bdaa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bdae:	9302      	str	r3, [sp, #8]
 800bdb0:	9b02      	ldr	r3, [sp, #8]
 800bdb2:	42ab      	cmp	r3, r5
 800bdb4:	da04      	bge.n	800bdc0 <__kernel_rem_pio2+0x390>
 800bdb6:	461c      	mov	r4, r3
 800bdb8:	e6b5      	b.n	800bb26 <__kernel_rem_pio2+0xf6>
 800bdba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	e7eb      	b.n	800bd98 <__kernel_rem_pio2+0x368>
 800bdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdc6:	f7f4 fb71 	bl	80004ac <__aeabi_i2d>
 800bdca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd0:	46b3      	mov	fp, r6
 800bdd2:	461c      	mov	r4, r3
 800bdd4:	2700      	movs	r7, #0
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	f04f 0900 	mov.w	r9, #0
 800bdde:	9b06      	ldr	r3, [sp, #24]
 800bde0:	429f      	cmp	r7, r3
 800bde2:	dd06      	ble.n	800bdf2 <__kernel_rem_pio2+0x3c2>
 800bde4:	ab70      	add	r3, sp, #448	; 0x1c0
 800bde6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bdea:	e9c3 8900 	strd	r8, r9, [r3]
 800bdee:	3501      	adds	r5, #1
 800bdf0:	e7de      	b.n	800bdb0 <__kernel_rem_pio2+0x380>
 800bdf2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bdf6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bdfa:	f7f4 fbc1 	bl	8000580 <__aeabi_dmul>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	4640      	mov	r0, r8
 800be04:	4649      	mov	r1, r9
 800be06:	f7f4 fa05 	bl	8000214 <__adddf3>
 800be0a:	3701      	adds	r7, #1
 800be0c:	4680      	mov	r8, r0
 800be0e:	4689      	mov	r9, r1
 800be10:	e7e5      	b.n	800bdde <__kernel_rem_pio2+0x3ae>
 800be12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be16:	e754      	b.n	800bcc2 <__kernel_rem_pio2+0x292>
 800be18:	ec47 6b10 	vmov	d0, r6, r7
 800be1c:	f1ca 0000 	rsb	r0, sl, #0
 800be20:	f000 fa8e 	bl	800c340 <scalbn>
 800be24:	ec57 6b10 	vmov	r6, r7, d0
 800be28:	4b9f      	ldr	r3, [pc, #636]	; (800c0a8 <__kernel_rem_pio2+0x678>)
 800be2a:	ee10 0a10 	vmov	r0, s0
 800be2e:	2200      	movs	r2, #0
 800be30:	4639      	mov	r1, r7
 800be32:	f7f4 fe2b 	bl	8000a8c <__aeabi_dcmpge>
 800be36:	b300      	cbz	r0, 800be7a <__kernel_rem_pio2+0x44a>
 800be38:	4b9c      	ldr	r3, [pc, #624]	; (800c0ac <__kernel_rem_pio2+0x67c>)
 800be3a:	2200      	movs	r2, #0
 800be3c:	4630      	mov	r0, r6
 800be3e:	4639      	mov	r1, r7
 800be40:	f7f4 fb9e 	bl	8000580 <__aeabi_dmul>
 800be44:	f7f4 fe36 	bl	8000ab4 <__aeabi_d2iz>
 800be48:	4605      	mov	r5, r0
 800be4a:	f7f4 fb2f 	bl	80004ac <__aeabi_i2d>
 800be4e:	4b96      	ldr	r3, [pc, #600]	; (800c0a8 <__kernel_rem_pio2+0x678>)
 800be50:	2200      	movs	r2, #0
 800be52:	f7f4 fb95 	bl	8000580 <__aeabi_dmul>
 800be56:	460b      	mov	r3, r1
 800be58:	4602      	mov	r2, r0
 800be5a:	4639      	mov	r1, r7
 800be5c:	4630      	mov	r0, r6
 800be5e:	f7f4 f9d7 	bl	8000210 <__aeabi_dsub>
 800be62:	f7f4 fe27 	bl	8000ab4 <__aeabi_d2iz>
 800be66:	f104 0b01 	add.w	fp, r4, #1
 800be6a:	ab0c      	add	r3, sp, #48	; 0x30
 800be6c:	f10a 0a18 	add.w	sl, sl, #24
 800be70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800be74:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800be78:	e72b      	b.n	800bcd2 <__kernel_rem_pio2+0x2a2>
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fe19 	bl	8000ab4 <__aeabi_d2iz>
 800be82:	ab0c      	add	r3, sp, #48	; 0x30
 800be84:	46a3      	mov	fp, r4
 800be86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800be8a:	e722      	b.n	800bcd2 <__kernel_rem_pio2+0x2a2>
 800be8c:	ab70      	add	r3, sp, #448	; 0x1c0
 800be8e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800be92:	ab0c      	add	r3, sp, #48	; 0x30
 800be94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800be98:	f7f4 fb08 	bl	80004ac <__aeabi_i2d>
 800be9c:	4622      	mov	r2, r4
 800be9e:	462b      	mov	r3, r5
 800bea0:	f7f4 fb6e 	bl	8000580 <__aeabi_dmul>
 800bea4:	4632      	mov	r2, r6
 800bea6:	e9c9 0100 	strd	r0, r1, [r9]
 800beaa:	463b      	mov	r3, r7
 800beac:	4620      	mov	r0, r4
 800beae:	4629      	mov	r1, r5
 800beb0:	f7f4 fb66 	bl	8000580 <__aeabi_dmul>
 800beb4:	f108 38ff 	add.w	r8, r8, #4294967295
 800beb8:	4604      	mov	r4, r0
 800beba:	460d      	mov	r5, r1
 800bebc:	e713      	b.n	800bce6 <__kernel_rem_pio2+0x2b6>
 800bebe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bec2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800bec6:	f7f4 fb5b 	bl	8000580 <__aeabi_dmul>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4620      	mov	r0, r4
 800bed0:	4629      	mov	r1, r5
 800bed2:	f7f4 f99f 	bl	8000214 <__adddf3>
 800bed6:	3601      	adds	r6, #1
 800bed8:	4604      	mov	r4, r0
 800beda:	460d      	mov	r5, r1
 800bedc:	9b04      	ldr	r3, [sp, #16]
 800bede:	429e      	cmp	r6, r3
 800bee0:	dc01      	bgt.n	800bee6 <__kernel_rem_pio2+0x4b6>
 800bee2:	45b0      	cmp	r8, r6
 800bee4:	daeb      	bge.n	800bebe <__kernel_rem_pio2+0x48e>
 800bee6:	ab48      	add	r3, sp, #288	; 0x120
 800bee8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800beec:	e9c3 4500 	strd	r4, r5, [r3]
 800bef0:	3f01      	subs	r7, #1
 800bef2:	f108 0801 	add.w	r8, r8, #1
 800bef6:	e6ff      	b.n	800bcf8 <__kernel_rem_pio2+0x2c8>
 800bef8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800befa:	2b02      	cmp	r3, #2
 800befc:	dc0b      	bgt.n	800bf16 <__kernel_rem_pio2+0x4e6>
 800befe:	2b00      	cmp	r3, #0
 800bf00:	dc6e      	bgt.n	800bfe0 <__kernel_rem_pio2+0x5b0>
 800bf02:	d045      	beq.n	800bf90 <__kernel_rem_pio2+0x560>
 800bf04:	9b07      	ldr	r3, [sp, #28]
 800bf06:	f003 0007 	and.w	r0, r3, #7
 800bf0a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bf0e:	ecbd 8b02 	vpop	{d8}
 800bf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf18:	2b03      	cmp	r3, #3
 800bf1a:	d1f3      	bne.n	800bf04 <__kernel_rem_pio2+0x4d4>
 800bf1c:	ab48      	add	r3, sp, #288	; 0x120
 800bf1e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800bf22:	46d0      	mov	r8, sl
 800bf24:	46d9      	mov	r9, fp
 800bf26:	f1b9 0f00 	cmp.w	r9, #0
 800bf2a:	f1a8 0808 	sub.w	r8, r8, #8
 800bf2e:	dc64      	bgt.n	800bffa <__kernel_rem_pio2+0x5ca>
 800bf30:	465c      	mov	r4, fp
 800bf32:	2c01      	cmp	r4, #1
 800bf34:	f1aa 0a08 	sub.w	sl, sl, #8
 800bf38:	dc7e      	bgt.n	800c038 <__kernel_rem_pio2+0x608>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	2100      	movs	r1, #0
 800bf3e:	f1bb 0f01 	cmp.w	fp, #1
 800bf42:	f300 8097 	bgt.w	800c074 <__kernel_rem_pio2+0x644>
 800bf46:	9b02      	ldr	r3, [sp, #8]
 800bf48:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800bf4c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f040 8099 	bne.w	800c088 <__kernel_rem_pio2+0x658>
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	e9c3 5600 	strd	r5, r6, [r3]
 800bf5c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bf60:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bf64:	e7ce      	b.n	800bf04 <__kernel_rem_pio2+0x4d4>
 800bf66:	ab48      	add	r3, sp, #288	; 0x120
 800bf68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf70:	f7f4 f950 	bl	8000214 <__adddf3>
 800bf74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bf78:	f1bb 0f00 	cmp.w	fp, #0
 800bf7c:	daf3      	bge.n	800bf66 <__kernel_rem_pio2+0x536>
 800bf7e:	9b02      	ldr	r3, [sp, #8]
 800bf80:	b113      	cbz	r3, 800bf88 <__kernel_rem_pio2+0x558>
 800bf82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf86:	4619      	mov	r1, r3
 800bf88:	9b01      	ldr	r3, [sp, #4]
 800bf8a:	e9c3 0100 	strd	r0, r1, [r3]
 800bf8e:	e7b9      	b.n	800bf04 <__kernel_rem_pio2+0x4d4>
 800bf90:	2000      	movs	r0, #0
 800bf92:	2100      	movs	r1, #0
 800bf94:	e7f0      	b.n	800bf78 <__kernel_rem_pio2+0x548>
 800bf96:	ab48      	add	r3, sp, #288	; 0x120
 800bf98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa0:	f7f4 f938 	bl	8000214 <__adddf3>
 800bfa4:	3c01      	subs	r4, #1
 800bfa6:	2c00      	cmp	r4, #0
 800bfa8:	daf5      	bge.n	800bf96 <__kernel_rem_pio2+0x566>
 800bfaa:	9b02      	ldr	r3, [sp, #8]
 800bfac:	b1e3      	cbz	r3, 800bfe8 <__kernel_rem_pio2+0x5b8>
 800bfae:	4602      	mov	r2, r0
 800bfb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfb4:	9c01      	ldr	r4, [sp, #4]
 800bfb6:	e9c4 2300 	strd	r2, r3, [r4]
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bfc2:	f7f4 f925 	bl	8000210 <__aeabi_dsub>
 800bfc6:	ad4a      	add	r5, sp, #296	; 0x128
 800bfc8:	2401      	movs	r4, #1
 800bfca:	45a3      	cmp	fp, r4
 800bfcc:	da0f      	bge.n	800bfee <__kernel_rem_pio2+0x5be>
 800bfce:	9b02      	ldr	r3, [sp, #8]
 800bfd0:	b113      	cbz	r3, 800bfd8 <__kernel_rem_pio2+0x5a8>
 800bfd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	9b01      	ldr	r3, [sp, #4]
 800bfda:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bfde:	e791      	b.n	800bf04 <__kernel_rem_pio2+0x4d4>
 800bfe0:	465c      	mov	r4, fp
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	e7de      	b.n	800bfa6 <__kernel_rem_pio2+0x576>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	e7e2      	b.n	800bfb4 <__kernel_rem_pio2+0x584>
 800bfee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bff2:	f7f4 f90f 	bl	8000214 <__adddf3>
 800bff6:	3401      	adds	r4, #1
 800bff8:	e7e7      	b.n	800bfca <__kernel_rem_pio2+0x59a>
 800bffa:	e9d8 4500 	ldrd	r4, r5, [r8]
 800bffe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800c002:	4620      	mov	r0, r4
 800c004:	4632      	mov	r2, r6
 800c006:	463b      	mov	r3, r7
 800c008:	4629      	mov	r1, r5
 800c00a:	f7f4 f903 	bl	8000214 <__adddf3>
 800c00e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c012:	4602      	mov	r2, r0
 800c014:	460b      	mov	r3, r1
 800c016:	4620      	mov	r0, r4
 800c018:	4629      	mov	r1, r5
 800c01a:	f7f4 f8f9 	bl	8000210 <__aeabi_dsub>
 800c01e:	4632      	mov	r2, r6
 800c020:	463b      	mov	r3, r7
 800c022:	f7f4 f8f7 	bl	8000214 <__adddf3>
 800c026:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c02a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800c02e:	ed88 7b00 	vstr	d7, [r8]
 800c032:	f109 39ff 	add.w	r9, r9, #4294967295
 800c036:	e776      	b.n	800bf26 <__kernel_rem_pio2+0x4f6>
 800c038:	e9da 8900 	ldrd	r8, r9, [sl]
 800c03c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c040:	4640      	mov	r0, r8
 800c042:	4632      	mov	r2, r6
 800c044:	463b      	mov	r3, r7
 800c046:	4649      	mov	r1, r9
 800c048:	f7f4 f8e4 	bl	8000214 <__adddf3>
 800c04c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c050:	4602      	mov	r2, r0
 800c052:	460b      	mov	r3, r1
 800c054:	4640      	mov	r0, r8
 800c056:	4649      	mov	r1, r9
 800c058:	f7f4 f8da 	bl	8000210 <__aeabi_dsub>
 800c05c:	4632      	mov	r2, r6
 800c05e:	463b      	mov	r3, r7
 800c060:	f7f4 f8d8 	bl	8000214 <__adddf3>
 800c064:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c068:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c06c:	ed8a 7b00 	vstr	d7, [sl]
 800c070:	3c01      	subs	r4, #1
 800c072:	e75e      	b.n	800bf32 <__kernel_rem_pio2+0x502>
 800c074:	ab48      	add	r3, sp, #288	; 0x120
 800c076:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	f7f4 f8c9 	bl	8000214 <__adddf3>
 800c082:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c086:	e75a      	b.n	800bf3e <__kernel_rem_pio2+0x50e>
 800c088:	9b01      	ldr	r3, [sp, #4]
 800c08a:	9a01      	ldr	r2, [sp, #4]
 800c08c:	601d      	str	r5, [r3, #0]
 800c08e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c092:	605c      	str	r4, [r3, #4]
 800c094:	609f      	str	r7, [r3, #8]
 800c096:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c09a:	60d3      	str	r3, [r2, #12]
 800c09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0a0:	6110      	str	r0, [r2, #16]
 800c0a2:	6153      	str	r3, [r2, #20]
 800c0a4:	e72e      	b.n	800bf04 <__kernel_rem_pio2+0x4d4>
 800c0a6:	bf00      	nop
 800c0a8:	41700000 	.word	0x41700000
 800c0ac:	3e700000 	.word	0x3e700000

0800c0b0 <__kernel_sin>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	ed2d 8b04 	vpush	{d8-d9}
 800c0b8:	eeb0 8a41 	vmov.f32	s16, s2
 800c0bc:	eef0 8a61 	vmov.f32	s17, s3
 800c0c0:	ec55 4b10 	vmov	r4, r5, d0
 800c0c4:	b083      	sub	sp, #12
 800c0c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c0ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c0ce:	9001      	str	r0, [sp, #4]
 800c0d0:	da06      	bge.n	800c0e0 <__kernel_sin+0x30>
 800c0d2:	ee10 0a10 	vmov	r0, s0
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	f7f4 fcec 	bl	8000ab4 <__aeabi_d2iz>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d051      	beq.n	800c184 <__kernel_sin+0xd4>
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7f4 fa4a 	bl	8000580 <__aeabi_dmul>
 800c0ec:	4682      	mov	sl, r0
 800c0ee:	468b      	mov	fp, r1
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	4629      	mov	r1, r5
 800c0f8:	f7f4 fa42 	bl	8000580 <__aeabi_dmul>
 800c0fc:	a341      	add	r3, pc, #260	; (adr r3, 800c204 <__kernel_sin+0x154>)
 800c0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c102:	4680      	mov	r8, r0
 800c104:	4689      	mov	r9, r1
 800c106:	4650      	mov	r0, sl
 800c108:	4659      	mov	r1, fp
 800c10a:	f7f4 fa39 	bl	8000580 <__aeabi_dmul>
 800c10e:	a33f      	add	r3, pc, #252	; (adr r3, 800c20c <__kernel_sin+0x15c>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 f87c 	bl	8000210 <__aeabi_dsub>
 800c118:	4652      	mov	r2, sl
 800c11a:	465b      	mov	r3, fp
 800c11c:	f7f4 fa30 	bl	8000580 <__aeabi_dmul>
 800c120:	a33c      	add	r3, pc, #240	; (adr r3, 800c214 <__kernel_sin+0x164>)
 800c122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c126:	f7f4 f875 	bl	8000214 <__adddf3>
 800c12a:	4652      	mov	r2, sl
 800c12c:	465b      	mov	r3, fp
 800c12e:	f7f4 fa27 	bl	8000580 <__aeabi_dmul>
 800c132:	a33a      	add	r3, pc, #232	; (adr r3, 800c21c <__kernel_sin+0x16c>)
 800c134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c138:	f7f4 f86a 	bl	8000210 <__aeabi_dsub>
 800c13c:	4652      	mov	r2, sl
 800c13e:	465b      	mov	r3, fp
 800c140:	f7f4 fa1e 	bl	8000580 <__aeabi_dmul>
 800c144:	a337      	add	r3, pc, #220	; (adr r3, 800c224 <__kernel_sin+0x174>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f7f4 f863 	bl	8000214 <__adddf3>
 800c14e:	9b01      	ldr	r3, [sp, #4]
 800c150:	4606      	mov	r6, r0
 800c152:	460f      	mov	r7, r1
 800c154:	b9eb      	cbnz	r3, 800c192 <__kernel_sin+0xe2>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4650      	mov	r0, sl
 800c15c:	4659      	mov	r1, fp
 800c15e:	f7f4 fa0f 	bl	8000580 <__aeabi_dmul>
 800c162:	a325      	add	r3, pc, #148	; (adr r3, 800c1f8 <__kernel_sin+0x148>)
 800c164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c168:	f7f4 f852 	bl	8000210 <__aeabi_dsub>
 800c16c:	4642      	mov	r2, r8
 800c16e:	464b      	mov	r3, r9
 800c170:	f7f4 fa06 	bl	8000580 <__aeabi_dmul>
 800c174:	4602      	mov	r2, r0
 800c176:	460b      	mov	r3, r1
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 f84a 	bl	8000214 <__adddf3>
 800c180:	4604      	mov	r4, r0
 800c182:	460d      	mov	r5, r1
 800c184:	ec45 4b10 	vmov	d0, r4, r5
 800c188:	b003      	add	sp, #12
 800c18a:	ecbd 8b04 	vpop	{d8-d9}
 800c18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c192:	4b1b      	ldr	r3, [pc, #108]	; (800c200 <__kernel_sin+0x150>)
 800c194:	ec51 0b18 	vmov	r0, r1, d8
 800c198:	2200      	movs	r2, #0
 800c19a:	f7f4 f9f1 	bl	8000580 <__aeabi_dmul>
 800c19e:	4632      	mov	r2, r6
 800c1a0:	ec41 0b19 	vmov	d9, r0, r1
 800c1a4:	463b      	mov	r3, r7
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	f7f4 f9e9 	bl	8000580 <__aeabi_dmul>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	460b      	mov	r3, r1
 800c1b2:	ec51 0b19 	vmov	r0, r1, d9
 800c1b6:	f7f4 f82b 	bl	8000210 <__aeabi_dsub>
 800c1ba:	4652      	mov	r2, sl
 800c1bc:	465b      	mov	r3, fp
 800c1be:	f7f4 f9df 	bl	8000580 <__aeabi_dmul>
 800c1c2:	ec53 2b18 	vmov	r2, r3, d8
 800c1c6:	f7f4 f823 	bl	8000210 <__aeabi_dsub>
 800c1ca:	a30b      	add	r3, pc, #44	; (adr r3, 800c1f8 <__kernel_sin+0x148>)
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	460f      	mov	r7, r1
 800c1d4:	4640      	mov	r0, r8
 800c1d6:	4649      	mov	r1, r9
 800c1d8:	f7f4 f9d2 	bl	8000580 <__aeabi_dmul>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	4639      	mov	r1, r7
 800c1e4:	f7f4 f816 	bl	8000214 <__adddf3>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	460b      	mov	r3, r1
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	4629      	mov	r1, r5
 800c1f0:	f7f4 f80e 	bl	8000210 <__aeabi_dsub>
 800c1f4:	e7c4      	b.n	800c180 <__kernel_sin+0xd0>
 800c1f6:	bf00      	nop
 800c1f8:	55555549 	.word	0x55555549
 800c1fc:	3fc55555 	.word	0x3fc55555
 800c200:	3fe00000 	.word	0x3fe00000
 800c204:	5acfd57c 	.word	0x5acfd57c
 800c208:	3de5d93a 	.word	0x3de5d93a
 800c20c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c210:	3e5ae5e6 	.word	0x3e5ae5e6
 800c214:	57b1fe7d 	.word	0x57b1fe7d
 800c218:	3ec71de3 	.word	0x3ec71de3
 800c21c:	19c161d5 	.word	0x19c161d5
 800c220:	3f2a01a0 	.word	0x3f2a01a0
 800c224:	1110f8a6 	.word	0x1110f8a6
 800c228:	3f811111 	.word	0x3f811111

0800c22c <fabs>:
 800c22c:	ec51 0b10 	vmov	r0, r1, d0
 800c230:	ee10 2a10 	vmov	r2, s0
 800c234:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c238:	ec43 2b10 	vmov	d0, r2, r3
 800c23c:	4770      	bx	lr
	...

0800c240 <floor>:
 800c240:	ec51 0b10 	vmov	r0, r1, d0
 800c244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c248:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c24c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c250:	2e13      	cmp	r6, #19
 800c252:	ee10 5a10 	vmov	r5, s0
 800c256:	ee10 8a10 	vmov	r8, s0
 800c25a:	460c      	mov	r4, r1
 800c25c:	dc32      	bgt.n	800c2c4 <floor+0x84>
 800c25e:	2e00      	cmp	r6, #0
 800c260:	da14      	bge.n	800c28c <floor+0x4c>
 800c262:	a333      	add	r3, pc, #204	; (adr r3, 800c330 <floor+0xf0>)
 800c264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c268:	f7f3 ffd4 	bl	8000214 <__adddf3>
 800c26c:	2200      	movs	r2, #0
 800c26e:	2300      	movs	r3, #0
 800c270:	f7f4 fc16 	bl	8000aa0 <__aeabi_dcmpgt>
 800c274:	b138      	cbz	r0, 800c286 <floor+0x46>
 800c276:	2c00      	cmp	r4, #0
 800c278:	da57      	bge.n	800c32a <floor+0xea>
 800c27a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c27e:	431d      	orrs	r5, r3
 800c280:	d001      	beq.n	800c286 <floor+0x46>
 800c282:	4c2d      	ldr	r4, [pc, #180]	; (800c338 <floor+0xf8>)
 800c284:	2500      	movs	r5, #0
 800c286:	4621      	mov	r1, r4
 800c288:	4628      	mov	r0, r5
 800c28a:	e025      	b.n	800c2d8 <floor+0x98>
 800c28c:	4f2b      	ldr	r7, [pc, #172]	; (800c33c <floor+0xfc>)
 800c28e:	4137      	asrs	r7, r6
 800c290:	ea01 0307 	and.w	r3, r1, r7
 800c294:	4303      	orrs	r3, r0
 800c296:	d01f      	beq.n	800c2d8 <floor+0x98>
 800c298:	a325      	add	r3, pc, #148	; (adr r3, 800c330 <floor+0xf0>)
 800c29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29e:	f7f3 ffb9 	bl	8000214 <__adddf3>
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f7f4 fbfb 	bl	8000aa0 <__aeabi_dcmpgt>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d0eb      	beq.n	800c286 <floor+0x46>
 800c2ae:	2c00      	cmp	r4, #0
 800c2b0:	bfbe      	ittt	lt
 800c2b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c2b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c2ba:	19a4      	addlt	r4, r4, r6
 800c2bc:	ea24 0407 	bic.w	r4, r4, r7
 800c2c0:	2500      	movs	r5, #0
 800c2c2:	e7e0      	b.n	800c286 <floor+0x46>
 800c2c4:	2e33      	cmp	r6, #51	; 0x33
 800c2c6:	dd0b      	ble.n	800c2e0 <floor+0xa0>
 800c2c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c2cc:	d104      	bne.n	800c2d8 <floor+0x98>
 800c2ce:	ee10 2a10 	vmov	r2, s0
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	f7f3 ff9e 	bl	8000214 <__adddf3>
 800c2d8:	ec41 0b10 	vmov	d0, r0, r1
 800c2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c2e8:	fa23 f707 	lsr.w	r7, r3, r7
 800c2ec:	4207      	tst	r7, r0
 800c2ee:	d0f3      	beq.n	800c2d8 <floor+0x98>
 800c2f0:	a30f      	add	r3, pc, #60	; (adr r3, 800c330 <floor+0xf0>)
 800c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f6:	f7f3 ff8d 	bl	8000214 <__adddf3>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	f7f4 fbcf 	bl	8000aa0 <__aeabi_dcmpgt>
 800c302:	2800      	cmp	r0, #0
 800c304:	d0bf      	beq.n	800c286 <floor+0x46>
 800c306:	2c00      	cmp	r4, #0
 800c308:	da02      	bge.n	800c310 <floor+0xd0>
 800c30a:	2e14      	cmp	r6, #20
 800c30c:	d103      	bne.n	800c316 <floor+0xd6>
 800c30e:	3401      	adds	r4, #1
 800c310:	ea25 0507 	bic.w	r5, r5, r7
 800c314:	e7b7      	b.n	800c286 <floor+0x46>
 800c316:	2301      	movs	r3, #1
 800c318:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c31c:	fa03 f606 	lsl.w	r6, r3, r6
 800c320:	4435      	add	r5, r6
 800c322:	4545      	cmp	r5, r8
 800c324:	bf38      	it	cc
 800c326:	18e4      	addcc	r4, r4, r3
 800c328:	e7f2      	b.n	800c310 <floor+0xd0>
 800c32a:	2500      	movs	r5, #0
 800c32c:	462c      	mov	r4, r5
 800c32e:	e7aa      	b.n	800c286 <floor+0x46>
 800c330:	8800759c 	.word	0x8800759c
 800c334:	7e37e43c 	.word	0x7e37e43c
 800c338:	bff00000 	.word	0xbff00000
 800c33c:	000fffff 	.word	0x000fffff

0800c340 <scalbn>:
 800c340:	b570      	push	{r4, r5, r6, lr}
 800c342:	ec55 4b10 	vmov	r4, r5, d0
 800c346:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c34a:	4606      	mov	r6, r0
 800c34c:	462b      	mov	r3, r5
 800c34e:	b99a      	cbnz	r2, 800c378 <scalbn+0x38>
 800c350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c354:	4323      	orrs	r3, r4
 800c356:	d036      	beq.n	800c3c6 <scalbn+0x86>
 800c358:	4b39      	ldr	r3, [pc, #228]	; (800c440 <scalbn+0x100>)
 800c35a:	4629      	mov	r1, r5
 800c35c:	ee10 0a10 	vmov	r0, s0
 800c360:	2200      	movs	r2, #0
 800c362:	f7f4 f90d 	bl	8000580 <__aeabi_dmul>
 800c366:	4b37      	ldr	r3, [pc, #220]	; (800c444 <scalbn+0x104>)
 800c368:	429e      	cmp	r6, r3
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	da10      	bge.n	800c392 <scalbn+0x52>
 800c370:	a32b      	add	r3, pc, #172	; (adr r3, 800c420 <scalbn+0xe0>)
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	e03a      	b.n	800c3ee <scalbn+0xae>
 800c378:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c37c:	428a      	cmp	r2, r1
 800c37e:	d10c      	bne.n	800c39a <scalbn+0x5a>
 800c380:	ee10 2a10 	vmov	r2, s0
 800c384:	4620      	mov	r0, r4
 800c386:	4629      	mov	r1, r5
 800c388:	f7f3 ff44 	bl	8000214 <__adddf3>
 800c38c:	4604      	mov	r4, r0
 800c38e:	460d      	mov	r5, r1
 800c390:	e019      	b.n	800c3c6 <scalbn+0x86>
 800c392:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c396:	460b      	mov	r3, r1
 800c398:	3a36      	subs	r2, #54	; 0x36
 800c39a:	4432      	add	r2, r6
 800c39c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c3a0:	428a      	cmp	r2, r1
 800c3a2:	dd08      	ble.n	800c3b6 <scalbn+0x76>
 800c3a4:	2d00      	cmp	r5, #0
 800c3a6:	a120      	add	r1, pc, #128	; (adr r1, 800c428 <scalbn+0xe8>)
 800c3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ac:	da1c      	bge.n	800c3e8 <scalbn+0xa8>
 800c3ae:	a120      	add	r1, pc, #128	; (adr r1, 800c430 <scalbn+0xf0>)
 800c3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b4:	e018      	b.n	800c3e8 <scalbn+0xa8>
 800c3b6:	2a00      	cmp	r2, #0
 800c3b8:	dd08      	ble.n	800c3cc <scalbn+0x8c>
 800c3ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c3c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3c6:	ec45 4b10 	vmov	d0, r4, r5
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c3d0:	da19      	bge.n	800c406 <scalbn+0xc6>
 800c3d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c3d6:	429e      	cmp	r6, r3
 800c3d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c3dc:	dd0a      	ble.n	800c3f4 <scalbn+0xb4>
 800c3de:	a112      	add	r1, pc, #72	; (adr r1, 800c428 <scalbn+0xe8>)
 800c3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1e2      	bne.n	800c3ae <scalbn+0x6e>
 800c3e8:	a30f      	add	r3, pc, #60	; (adr r3, 800c428 <scalbn+0xe8>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f4 f8c7 	bl	8000580 <__aeabi_dmul>
 800c3f2:	e7cb      	b.n	800c38c <scalbn+0x4c>
 800c3f4:	a10a      	add	r1, pc, #40	; (adr r1, 800c420 <scalbn+0xe0>)
 800c3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d0b8      	beq.n	800c370 <scalbn+0x30>
 800c3fe:	a10e      	add	r1, pc, #56	; (adr r1, 800c438 <scalbn+0xf8>)
 800c400:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c404:	e7b4      	b.n	800c370 <scalbn+0x30>
 800c406:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c40a:	3236      	adds	r2, #54	; 0x36
 800c40c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c410:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c414:	4620      	mov	r0, r4
 800c416:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <scalbn+0x108>)
 800c418:	2200      	movs	r2, #0
 800c41a:	e7e8      	b.n	800c3ee <scalbn+0xae>
 800c41c:	f3af 8000 	nop.w
 800c420:	c2f8f359 	.word	0xc2f8f359
 800c424:	01a56e1f 	.word	0x01a56e1f
 800c428:	8800759c 	.word	0x8800759c
 800c42c:	7e37e43c 	.word	0x7e37e43c
 800c430:	8800759c 	.word	0x8800759c
 800c434:	fe37e43c 	.word	0xfe37e43c
 800c438:	c2f8f359 	.word	0xc2f8f359
 800c43c:	81a56e1f 	.word	0x81a56e1f
 800c440:	43500000 	.word	0x43500000
 800c444:	ffff3cb0 	.word	0xffff3cb0
 800c448:	3c900000 	.word	0x3c900000

0800c44c <_init>:
 800c44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44e:	bf00      	nop
 800c450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c452:	bc08      	pop	{r3}
 800c454:	469e      	mov	lr, r3
 800c456:	4770      	bx	lr

0800c458 <_fini>:
 800c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c45a:	bf00      	nop
 800c45c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c45e:	bc08      	pop	{r3}
 800c460:	469e      	mov	lr, r3
 800c462:	4770      	bx	lr
