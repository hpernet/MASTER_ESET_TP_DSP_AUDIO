
TP_DSP_M1ESET.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5b4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004f3c  0800a77c  0800a77c  0001a77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f6b8  0800f6b8  0001f6b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f6c0  0800f6c0  0001f6c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f6c4  0800f6c4  0001f6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000000  0800f6c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004660  2000005c  0800f724  0002005c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200046bc  0800f724  000246bc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002e21f  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d97  00000000  00000000  0004e2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b28  00000000  00000000  00053048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001968  00000000  00000000  00054b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00029baa  00000000  00000000  000564d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00020689  00000000  00000000  00080082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f7a1f  00000000  00000000  000a070b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0019812a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000722c  00000000  00000000  00198180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000005c 	.word	0x2000005c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800a764 	.word	0x0800a764

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000060 	.word	0x20000060
 8000204:	0800a764 	.word	0x0800a764

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	4603      	mov	r3, r0
 800050a:	81fb      	strh	r3, [r7, #14]
 800050c:	460b      	mov	r3, r1
 800050e:	81bb      	strh	r3, [r7, #12]
 8000510:	4613      	mov	r3, r2
 8000512:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8000518:	89bb      	ldrh	r3, [r7, #12]
 800051a:	b2db      	uxtb	r3, r3
 800051c:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800051e:	89bb      	ldrh	r3, [r7, #12]
 8000520:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000524:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800052a:	f001 fc71 	bl	8001e10 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800052e:	89fb      	ldrh	r3, [r7, #14]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2203      	movs	r2, #3
 8000534:	f44f 7181 	mov.w	r1, #258	; 0x102
 8000538:	4618      	mov	r0, r3
 800053a:	f001 fafb 	bl	8001b34 <CODEC_IO_Write>
 800053e:	4603      	mov	r3, r0
 8000540:	461a      	mov	r2, r3
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	4413      	add	r3, r2
 8000546:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8000548:	89fb      	ldrh	r3, [r7, #14]
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2200      	movs	r2, #0
 800054e:	f640 0117 	movw	r1, #2071	; 0x817
 8000552:	4618      	mov	r0, r3
 8000554:	f001 faee 	bl	8001b34 <CODEC_IO_Write>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	4413      	add	r3, r2
 8000560:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8000562:	89fb      	ldrh	r3, [r7, #14]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7181 	mov.w	r1, #258	; 0x102
 800056c:	4618      	mov	r0, r3
 800056e:	f001 fae1 	bl	8001b34 <CODEC_IO_Write>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	69fb      	ldr	r3, [r7, #28]
 8000578:	4413      	add	r3, r2
 800057a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 800057c:	89fb      	ldrh	r3, [r7, #14]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	226c      	movs	r2, #108	; 0x6c
 8000582:	2139      	movs	r1, #57	; 0x39
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fad5 	bl	8001b34 <CODEC_IO_Write>
 800058a:	4603      	mov	r3, r0
 800058c:	461a      	mov	r2, r3
 800058e:	69fb      	ldr	r3, [r7, #28]
 8000590:	4413      	add	r3, r2
 8000592:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8000594:	8afb      	ldrh	r3, [r7, #22]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00c      	beq.n	80005b4 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2213      	movs	r2, #19
 80005a0:	2101      	movs	r1, #1
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 fac6 	bl	8001b34 <CODEC_IO_Write>
 80005a8:	4603      	mov	r3, r0
 80005aa:	461a      	mov	r2, r3
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	4413      	add	r3, r2
 80005b0:	61fb      	str	r3, [r7, #28]
 80005b2:	e00b      	b.n	80005cc <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 80005b4:	89fb      	ldrh	r3, [r7, #14]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2203      	movs	r2, #3
 80005ba:	2101      	movs	r1, #1
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fab9 	bl	8001b34 <CODEC_IO_Write>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	4413      	add	r3, r2
 80005ca:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 80005cc:	2032      	movs	r0, #50	; 0x32
 80005ce:	f001 fc87 	bl	8001ee0 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80005d2:	8b3b      	ldrh	r3, [r7, #24]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f000 815f 	beq.w	8000898 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80005da:	4bae      	ldr	r3, [pc, #696]	; (8000894 <wm8994_Init+0x394>)
 80005dc:	2201      	movs	r2, #1
 80005de:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80005e0:	8b3b      	ldrh	r3, [r7, #24]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	f000 808c 	beq.w	8000700 <wm8994_Init+0x200>
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	f300 8111 	bgt.w	8000810 <wm8994_Init+0x310>
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d002      	beq.n	80005f8 <wm8994_Init+0xf8>
 80005f2:	2b02      	cmp	r3, #2
 80005f4:	d042      	beq.n	800067c <wm8994_Init+0x17c>
 80005f6:	e10b      	b.n	8000810 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80005f8:	89fb      	ldrh	r3, [r7, #14]
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	f640 420c 	movw	r2, #3084	; 0xc0c
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fa96 	bl	8001b34 <CODEC_IO_Write>
 8000608:	4603      	mov	r3, r0
 800060a:	461a      	mov	r2, r3
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	4413      	add	r3, r2
 8000610:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8000612:	89fb      	ldrh	r3, [r7, #14]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2200      	movs	r2, #0
 8000618:	f240 6101 	movw	r1, #1537	; 0x601
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fa89 	bl	8001b34 <CODEC_IO_Write>
 8000622:	4603      	mov	r3, r0
 8000624:	461a      	mov	r2, r3
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	4413      	add	r3, r2
 800062a:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2200      	movs	r2, #0
 8000632:	f240 6102 	movw	r1, #1538	; 0x602
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fa7c 	bl	8001b34 <CODEC_IO_Write>
 800063c:	4603      	mov	r3, r0
 800063e:	461a      	mov	r2, r3
 8000640:	69fb      	ldr	r3, [r7, #28]
 8000642:	4413      	add	r3, r2
 8000644:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2202      	movs	r2, #2
 800064c:	f240 6104 	movw	r1, #1540	; 0x604
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fa6f 	bl	8001b34 <CODEC_IO_Write>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	69fb      	ldr	r3, [r7, #28]
 800065c:	4413      	add	r3, r2
 800065e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8000660:	89fb      	ldrh	r3, [r7, #14]
 8000662:	b2db      	uxtb	r3, r3
 8000664:	2202      	movs	r2, #2
 8000666:	f240 6105 	movw	r1, #1541	; 0x605
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fa62 	bl	8001b34 <CODEC_IO_Write>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	4413      	add	r3, r2
 8000678:	61fb      	str	r3, [r7, #28]
      break;
 800067a:	e110      	b.n	800089e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800067c:	89fb      	ldrh	r3, [r7, #14]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f240 3203 	movw	r2, #771	; 0x303
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fa54 	bl	8001b34 <CODEC_IO_Write>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	69fb      	ldr	r3, [r7, #28]
 8000692:	4413      	add	r3, r2
 8000694:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2201      	movs	r2, #1
 800069c:	f240 6101 	movw	r1, #1537	; 0x601
 80006a0:	4618      	mov	r0, r3
 80006a2:	f001 fa47 	bl	8001b34 <CODEC_IO_Write>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	4413      	add	r3, r2
 80006ae:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80006b0:	89fb      	ldrh	r3, [r7, #14]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2201      	movs	r2, #1
 80006b6:	f240 6102 	movw	r1, #1538	; 0x602
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fa3a 	bl	8001b34 <CODEC_IO_Write>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	4413      	add	r3, r2
 80006c8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80006ca:	89fb      	ldrh	r3, [r7, #14]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2200      	movs	r2, #0
 80006d0:	f240 6104 	movw	r1, #1540	; 0x604
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 fa2d 	bl	8001b34 <CODEC_IO_Write>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	4413      	add	r3, r2
 80006e2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80006e4:	89fb      	ldrh	r3, [r7, #14]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2200      	movs	r2, #0
 80006ea:	f240 6105 	movw	r1, #1541	; 0x605
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fa20 	bl	8001b34 <CODEC_IO_Write>
 80006f4:	4603      	mov	r3, r0
 80006f6:	461a      	mov	r2, r3
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	4413      	add	r3, r2
 80006fc:	61fb      	str	r3, [r7, #28]
      break;
 80006fe:	e0ce      	b.n	800089e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000700:	8afb      	ldrh	r3, [r7, #22]
 8000702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000706:	d141      	bne.n	800078c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8000708:	89fb      	ldrh	r3, [r7, #14]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fa0e 	bl	8001b34 <CODEC_IO_Write>
 8000718:	4603      	mov	r3, r0
 800071a:	461a      	mov	r2, r3
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	4413      	add	r3, r2
 8000720:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2203      	movs	r2, #3
 8000728:	f240 6101 	movw	r1, #1537	; 0x601
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fa01 	bl	8001b34 <CODEC_IO_Write>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	4413      	add	r3, r2
 800073a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	2203      	movs	r2, #3
 8000742:	f240 6102 	movw	r1, #1538	; 0x602
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f9f4 	bl	8001b34 <CODEC_IO_Write>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	4413      	add	r3, r2
 8000754:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8000756:	89fb      	ldrh	r3, [r7, #14]
 8000758:	b2db      	uxtb	r3, r3
 800075a:	2203      	movs	r2, #3
 800075c:	f240 6104 	movw	r1, #1540	; 0x604
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f9e7 	bl	8001b34 <CODEC_IO_Write>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	4413      	add	r3, r2
 800076e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2203      	movs	r2, #3
 8000776:	f240 6105 	movw	r1, #1541	; 0x605
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f9da 	bl	8001b34 <CODEC_IO_Write>
 8000780:	4603      	mov	r3, r0
 8000782:	461a      	mov	r2, r3
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	4413      	add	r3, r2
 8000788:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800078a:	e088      	b.n	800089e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	b2db      	uxtb	r3, r3
 8000790:	f640 720f 	movw	r2, #3855	; 0xf0f
 8000794:	2105      	movs	r1, #5
 8000796:	4618      	mov	r0, r3
 8000798:	f001 f9cc 	bl	8001b34 <CODEC_IO_Write>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	4413      	add	r3, r2
 80007a4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80007a6:	89fb      	ldrh	r3, [r7, #14]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2201      	movs	r2, #1
 80007ac:	f240 6101 	movw	r1, #1537	; 0x601
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 f9bf 	bl	8001b34 <CODEC_IO_Write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	461a      	mov	r2, r3
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80007c0:	89fb      	ldrh	r3, [r7, #14]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2201      	movs	r2, #1
 80007c6:	f240 6102 	movw	r1, #1538	; 0x602
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 f9b2 	bl	8001b34 <CODEC_IO_Write>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	4413      	add	r3, r2
 80007d8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80007da:	89fb      	ldrh	r3, [r7, #14]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2202      	movs	r2, #2
 80007e0:	f240 6104 	movw	r1, #1540	; 0x604
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 f9a5 	bl	8001b34 <CODEC_IO_Write>
 80007ea:	4603      	mov	r3, r0
 80007ec:	461a      	mov	r2, r3
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	4413      	add	r3, r2
 80007f2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	2202      	movs	r2, #2
 80007fa:	f240 6105 	movw	r1, #1541	; 0x605
 80007fe:	4618      	mov	r0, r3
 8000800:	f001 f998 	bl	8001b34 <CODEC_IO_Write>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	4413      	add	r3, r2
 800080c:	61fb      	str	r3, [r7, #28]
      break;
 800080e:	e046      	b.n	800089e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8000810:	89fb      	ldrh	r3, [r7, #14]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f240 3203 	movw	r2, #771	; 0x303
 8000818:	2105      	movs	r1, #5
 800081a:	4618      	mov	r0, r3
 800081c:	f001 f98a 	bl	8001b34 <CODEC_IO_Write>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	4413      	add	r3, r2
 8000828:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800082a:	89fb      	ldrh	r3, [r7, #14]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	2201      	movs	r2, #1
 8000830:	f240 6101 	movw	r1, #1537	; 0x601
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f97d 	bl	8001b34 <CODEC_IO_Write>
 800083a:	4603      	mov	r3, r0
 800083c:	461a      	mov	r2, r3
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	4413      	add	r3, r2
 8000842:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2201      	movs	r2, #1
 800084a:	f240 6102 	movw	r1, #1538	; 0x602
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f970 	bl	8001b34 <CODEC_IO_Write>
 8000854:	4603      	mov	r3, r0
 8000856:	461a      	mov	r2, r3
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	4413      	add	r3, r2
 800085c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2200      	movs	r2, #0
 8000864:	f240 6104 	movw	r1, #1540	; 0x604
 8000868:	4618      	mov	r0, r3
 800086a:	f001 f963 	bl	8001b34 <CODEC_IO_Write>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	4413      	add	r3, r2
 8000876:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2200      	movs	r2, #0
 800087e:	f240 6105 	movw	r1, #1541	; 0x605
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f956 	bl	8001b34 <CODEC_IO_Write>
 8000888:	4603      	mov	r3, r0
 800088a:	461a      	mov	r2, r3
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	4413      	add	r3, r2
 8000890:	61fb      	str	r3, [r7, #28]
      break;
 8000892:	e004      	b.n	800089e <wm8994_Init+0x39e>
 8000894:	20000078 	.word	0x20000078
    }
  }
  else
  {
    outputEnabled = 0;
 8000898:	4b99      	ldr	r3, [pc, #612]	; (8000b00 <wm8994_Init+0x600>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800089e:	8afb      	ldrh	r3, [r7, #22]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	f000 81ab 	beq.w	8000bfc <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80008a6:	4b97      	ldr	r3, [pc, #604]	; (8000b04 <wm8994_Init+0x604>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008b2:	f000 8129 	beq.w	8000b08 <wm8994_Init+0x608>
 80008b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80008ba:	f300 819b 	bgt.w	8000bf4 <wm8994_Init+0x6f4>
 80008be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80008c2:	d05a      	beq.n	800097a <wm8994_Init+0x47a>
 80008c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80008c8:	f300 8194 	bgt.w	8000bf4 <wm8994_Init+0x6f4>
 80008cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008d0:	f000 80c6 	beq.w	8000a60 <wm8994_Init+0x560>
 80008d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d8:	f040 818c 	bne.w	8000bf4 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80008dc:	89fb      	ldrh	r3, [r7, #14]
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80008e4:	2104      	movs	r1, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 f924 	bl	8001b34 <CODEC_IO_Write>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	4413      	add	r3, r2
 80008f4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80008f6:	89fb      	ldrh	r3, [r7, #14]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	22db      	movs	r2, #219	; 0xdb
 80008fc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000900:	4618      	mov	r0, r3
 8000902:	f001 f917 	bl	8001b34 <CODEC_IO_Write>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	4413      	add	r3, r2
 800090e:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 8000910:	89fb      	ldrh	r3, [r7, #14]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8000918:	2102      	movs	r1, #2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f90a 	bl	8001b34 <CODEC_IO_Write>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	4413      	add	r3, r2
 8000928:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 800092a:	89fb      	ldrh	r3, [r7, #14]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	2202      	movs	r2, #2
 8000930:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f8fd 	bl	8001b34 <CODEC_IO_Write>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	4413      	add	r3, r2
 8000942:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000944:	89fb      	ldrh	r3, [r7, #14]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2202      	movs	r2, #2
 800094a:	f240 6109 	movw	r1, #1545	; 0x609
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f8f0 	bl	8001b34 <CODEC_IO_Write>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	4413      	add	r3, r2
 800095c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	220e      	movs	r2, #14
 8000964:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f8e3 	bl	8001b34 <CODEC_IO_Write>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	4413      	add	r3, r2
 8000976:	61fb      	str	r3, [r7, #28]
      break;
 8000978:	e143      	b.n	8000c02 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2211      	movs	r2, #17
 8000980:	2128      	movs	r1, #40	; 0x28
 8000982:	4618      	mov	r0, r3
 8000984:	f001 f8d6 	bl	8001b34 <CODEC_IO_Write>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	4413      	add	r3, r2
 8000990:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2235      	movs	r2, #53	; 0x35
 8000998:	2129      	movs	r1, #41	; 0x29
 800099a:	4618      	mov	r0, r3
 800099c:	f001 f8ca 	bl	8001b34 <CODEC_IO_Write>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	4413      	add	r3, r2
 80009a8:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80009aa:	89fb      	ldrh	r3, [r7, #14]
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	2235      	movs	r2, #53	; 0x35
 80009b0:	212a      	movs	r1, #42	; 0x2a
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f8be 	bl	8001b34 <CODEC_IO_Write>
 80009b8:	4603      	mov	r3, r0
 80009ba:	461a      	mov	r2, r3
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	4413      	add	r3, r2
 80009c0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f240 3203 	movw	r2, #771	; 0x303
 80009ca:	2104      	movs	r1, #4
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 f8b1 	bl	8001b34 <CODEC_IO_Write>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	4413      	add	r3, r2
 80009da:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80009dc:	89fb      	ldrh	r3, [r7, #14]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	22db      	movs	r2, #219	; 0xdb
 80009e2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f8a4 	bl	8001b34 <CODEC_IO_Write>
 80009ec:	4603      	mov	r3, r0
 80009ee:	461a      	mov	r2, r3
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	4413      	add	r3, r2
 80009f4:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	f246 3250 	movw	r2, #25424	; 0x6350
 80009fe:	2102      	movs	r1, #2
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f897 	bl	8001b34 <CODEC_IO_Write>
 8000a06:	4603      	mov	r3, r0
 8000a08:	461a      	mov	r2, r3
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2202      	movs	r2, #2
 8000a16:	f240 6106 	movw	r1, #1542	; 0x606
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f88a 	bl	8001b34 <CODEC_IO_Write>
 8000a20:	4603      	mov	r3, r0
 8000a22:	461a      	mov	r2, r3
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	4413      	add	r3, r2
 8000a28:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000a2a:	89fb      	ldrh	r3, [r7, #14]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2202      	movs	r2, #2
 8000a30:	f240 6107 	movw	r1, #1543	; 0x607
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f87d 	bl	8001b34 <CODEC_IO_Write>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	4413      	add	r3, r2
 8000a42:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000a44:	89fb      	ldrh	r3, [r7, #14]
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	220d      	movs	r2, #13
 8000a4a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 f870 	bl	8001b34 <CODEC_IO_Write>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	61fb      	str	r3, [r7, #28]
      break;
 8000a5e:	e0d0      	b.n	8000c02 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8000a60:	89fb      	ldrh	r3, [r7, #14]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8000a68:	2104      	movs	r1, #4
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f001 f862 	bl	8001b34 <CODEC_IO_Write>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	4413      	add	r3, r2
 8000a78:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	22db      	movs	r2, #219	; 0xdb
 8000a80:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 f855 	bl	8001b34 <CODEC_IO_Write>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	4413      	add	r3, r2
 8000a92:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f246 3250 	movw	r2, #25424	; 0x6350
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 f848 	bl	8001b34 <CODEC_IO_Write>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	4413      	add	r3, r2
 8000aac:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000aae:	89fb      	ldrh	r3, [r7, #14]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	f240 6106 	movw	r1, #1542	; 0x606
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f001 f83b 	bl	8001b34 <CODEC_IO_Write>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2202      	movs	r2, #2
 8000ace:	f240 6107 	movw	r1, #1543	; 0x607
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f82e 	bl	8001b34 <CODEC_IO_Write>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	4413      	add	r3, r2
 8000ae0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000ae2:	89fb      	ldrh	r3, [r7, #14]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	220d      	movs	r2, #13
 8000ae8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 f821 	bl	8001b34 <CODEC_IO_Write>
 8000af2:	4603      	mov	r3, r0
 8000af4:	461a      	mov	r2, r3
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	4413      	add	r3, r2
 8000afa:	61fb      	str	r3, [r7, #28]
      break; 
 8000afc:	e081      	b.n	8000c02 <wm8994_Init+0x702>
 8000afe:	bf00      	nop
 8000b00:	20000078 	.word	0x20000078
 8000b04:	2000007c 	.word	0x2000007c
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	f640 723c 	movw	r2, #3900	; 0xf3c
 8000b10:	2104      	movs	r1, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f80e 	bl	8001b34 <CODEC_IO_Write>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	22db      	movs	r2, #219	; 0xdb
 8000b28:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 f801 	bl	8001b34 <CODEC_IO_Write>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461a      	mov	r2, r3
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	4413      	add	r3, r2
 8000b3a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8000b3c:	89fb      	ldrh	r3, [r7, #14]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	22db      	movs	r2, #219	; 0xdb
 8000b42:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000b46:	4618      	mov	r0, r3
 8000b48:	f000 fff4 	bl	8001b34 <CODEC_IO_Write>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	461a      	mov	r2, r3
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	4413      	add	r3, r2
 8000b54:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8000b56:	89fb      	ldrh	r3, [r7, #14]
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8000b5e:	2102      	movs	r1, #2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 ffe7 	bl	8001b34 <CODEC_IO_Write>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	69fb      	ldr	r3, [r7, #28]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2202      	movs	r2, #2
 8000b76:	f240 6106 	movw	r1, #1542	; 0x606
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 ffda 	bl	8001b34 <CODEC_IO_Write>
 8000b80:	4603      	mov	r3, r0
 8000b82:	461a      	mov	r2, r3
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	4413      	add	r3, r2
 8000b88:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8000b8a:	89fb      	ldrh	r3, [r7, #14]
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2202      	movs	r2, #2
 8000b90:	f240 6107 	movw	r1, #1543	; 0x607
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 ffcd 	bl	8001b34 <CODEC_IO_Write>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2202      	movs	r2, #2
 8000baa:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 ffc0 	bl	8001b34 <CODEC_IO_Write>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	4413      	add	r3, r2
 8000bbc:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f240 6109 	movw	r1, #1545	; 0x609
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 ffb3 	bl	8001b34 <CODEC_IO_Write>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8000bd8:	89fb      	ldrh	r3, [r7, #14]
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	220d      	movs	r2, #13
 8000bde:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 ffa6 	bl	8001b34 <CODEC_IO_Write>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461a      	mov	r2, r3
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	4413      	add	r3, r2
 8000bf0:	61fb      	str	r3, [r7, #28]
      break;    
 8000bf2:	e006      	b.n	8000c02 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
      break;
 8000bfa:	e002      	b.n	8000c02 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8000bfc:	4ba4      	ldr	r3, [pc, #656]	; (8000e90 <wm8994_Init+0x990>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4aa3      	ldr	r2, [pc, #652]	; (8000e94 <wm8994_Init+0x994>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d079      	beq.n	8000cfe <wm8994_Init+0x7fe>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4aa1      	ldr	r2, [pc, #644]	; (8000e94 <wm8994_Init+0x994>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	f200 80ad 	bhi.w	8000d6e <wm8994_Init+0x86e>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d061      	beq.n	8000ce2 <wm8994_Init+0x7e2>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c24:	4293      	cmp	r3, r2
 8000c26:	f200 80a2 	bhi.w	8000d6e <wm8994_Init+0x86e>
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f000 808e 	beq.w	8000d52 <wm8994_Init+0x852>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	f200 8096 	bhi.w	8000d6e <wm8994_Init+0x86e>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000c48:	d03d      	beq.n	8000cc6 <wm8994_Init+0x7c6>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000c50:	f200 808d 	bhi.w	8000d6e <wm8994_Init+0x86e>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f245 6222 	movw	r2, #22050	; 0x5622
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d06b      	beq.n	8000d36 <wm8994_Init+0x836>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f245 6222 	movw	r2, #22050	; 0x5622
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f200 8082 	bhi.w	8000d6e <wm8994_Init+0x86e>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000c70:	d01b      	beq.n	8000caa <wm8994_Init+0x7aa>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000c78:	d879      	bhi.n	8000d6e <wm8994_Init+0x86e>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000c80:	d005      	beq.n	8000c8e <wm8994_Init+0x78e>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d046      	beq.n	8000d1a <wm8994_Init+0x81a>
 8000c8c:	e06f      	b.n	8000d6e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2203      	movs	r2, #3
 8000c94:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 ff4b 	bl	8001b34 <CODEC_IO_Write>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	61fb      	str	r3, [r7, #28]
    break;
 8000ca8:	e06f      	b.n	8000d8a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8000caa:	89fb      	ldrh	r3, [r7, #14]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	2233      	movs	r2, #51	; 0x33
 8000cb0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 ff3d 	bl	8001b34 <CODEC_IO_Write>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	61fb      	str	r3, [r7, #28]
    break;
 8000cc4:	e061      	b.n	8000d8a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	2263      	movs	r2, #99	; 0x63
 8000ccc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 ff2f 	bl	8001b34 <CODEC_IO_Write>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	461a      	mov	r2, r3
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	4413      	add	r3, r2
 8000cde:	61fb      	str	r3, [r7, #28]
    break;
 8000ce0:	e053      	b.n	8000d8a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2283      	movs	r2, #131	; 0x83
 8000ce8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 ff21 	bl	8001b34 <CODEC_IO_Write>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	61fb      	str	r3, [r7, #28]
    break;
 8000cfc:	e045      	b.n	8000d8a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8000cfe:	89fb      	ldrh	r3, [r7, #14]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	22a3      	movs	r2, #163	; 0xa3
 8000d04:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 ff13 	bl	8001b34 <CODEC_IO_Write>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	461a      	mov	r2, r3
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	4413      	add	r3, r2
 8000d16:	61fb      	str	r3, [r7, #28]
    break;
 8000d18:	e037      	b.n	8000d8a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8000d1a:	89fb      	ldrh	r3, [r7, #14]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2213      	movs	r2, #19
 8000d20:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 ff05 	bl	8001b34 <CODEC_IO_Write>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	4413      	add	r3, r2
 8000d32:	61fb      	str	r3, [r7, #28]
    break;
 8000d34:	e029      	b.n	8000d8a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8000d36:	89fb      	ldrh	r3, [r7, #14]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2243      	movs	r2, #67	; 0x43
 8000d3c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d40:	4618      	mov	r0, r3
 8000d42:	f000 fef7 	bl	8001b34 <CODEC_IO_Write>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	61fb      	str	r3, [r7, #28]
    break;
 8000d50:	e01b      	b.n	8000d8a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2273      	movs	r2, #115	; 0x73
 8000d58:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fee9 	bl	8001b34 <CODEC_IO_Write>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	4413      	add	r3, r2
 8000d6a:	61fb      	str	r3, [r7, #28]
    break; 
 8000d6c:	e00d      	b.n	8000d8a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2283      	movs	r2, #131	; 0x83
 8000d74:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 fedb 	bl	8001b34 <CODEC_IO_Write>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	461a      	mov	r2, r3
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	4413      	add	r3, r2
 8000d86:	61fb      	str	r3, [r7, #28]
    break; 
 8000d88:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000d8a:	8afb      	ldrh	r3, [r7, #22]
 8000d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d90:	d10e      	bne.n	8000db0 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	f244 0218 	movw	r2, #16408	; 0x4018
 8000d9a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fec8 	bl	8001b34 <CODEC_IO_Write>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	4413      	add	r3, r2
 8000dac:	61fb      	str	r3, [r7, #28]
 8000dae:	e00d      	b.n	8000dcc <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8000db0:	89fb      	ldrh	r3, [r7, #14]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f244 0210 	movw	r2, #16400	; 0x4010
 8000db8:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 feb9 	bl	8001b34 <CODEC_IO_Write>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	4413      	add	r3, r2
 8000dca:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8000dcc:	89fb      	ldrh	r3, [r7, #14]
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f240 3102 	movw	r1, #770	; 0x302
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 feac 	bl	8001b34 <CODEC_IO_Write>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	4413      	add	r3, r2
 8000de4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8000de6:	89fb      	ldrh	r3, [r7, #14]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	220a      	movs	r2, #10
 8000dec:	f44f 7102 	mov.w	r1, #520	; 0x208
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fe9f 	bl	8001b34 <CODEC_IO_Write>
 8000df6:	4603      	mov	r3, r0
 8000df8:	461a      	mov	r2, r3
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fe92 	bl	8001b34 <CODEC_IO_Write>
 8000e10:	4603      	mov	r3, r0
 8000e12:	461a      	mov	r2, r3
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	4413      	add	r3, r2
 8000e18:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8000e1a:	8b3b      	ldrh	r3, [r7, #24]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 817b 	beq.w	8001118 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8000e22:	8b3b      	ldrh	r3, [r7, #24]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d157      	bne.n	8000ed8 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e30:	212d      	movs	r1, #45	; 0x2d
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fe7e 	bl	8001b34 <CODEC_IO_Write>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	4413      	add	r3, r2
 8000e40:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8000e42:	89fb      	ldrh	r3, [r7, #14]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4a:	212e      	movs	r1, #46	; 0x2e
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fe71 	bl	8001b34 <CODEC_IO_Write>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	4413      	add	r3, r2
 8000e5a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <wm8994_Init+0x998>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d01b      	beq.n	8000e9c <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8000e6c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fe5f 	bl	8001b34 <CODEC_IO_Write>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8000e80:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <wm8994_Init+0x998>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8000e86:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000e8a:	f001 f829 	bl	8001ee0 <AUDIO_IO_Delay>
 8000e8e:	e016      	b.n	8000ebe <wm8994_Init+0x9be>
 8000e90:	2000007c 	.word	0x2000007c
 8000e94:	00017700 	.word	0x00017700
 8000e98:	20000030 	.word	0x20000030
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	f248 1208 	movw	r2, #33032	; 0x8108
 8000ea4:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fe43 	bl	8001b34 <CODEC_IO_Write>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8000eb8:	2032      	movs	r0, #50	; 0x32
 8000eba:	f001 f811 	bl	8001ee0 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8000ebe:	89fb      	ldrh	r3, [r7, #14]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fe33 	bl	8001b34 <CODEC_IO_Write>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8000ed8:	89fb      	ldrh	r3, [r7, #14]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ee0:	2103      	movs	r1, #3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fe26 	bl	8001b34 <CODEC_IO_Write>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	4413      	add	r3, r2
 8000ef0:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8000ef2:	89fb      	ldrh	r3, [r7, #14]
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2122      	movs	r1, #34	; 0x22
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fe1a 	bl	8001b34 <CODEC_IO_Write>
 8000f00:	4603      	mov	r3, r0
 8000f02:	461a      	mov	r2, r3
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	4413      	add	r3, r2
 8000f08:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2123      	movs	r1, #35	; 0x23
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fe0e 	bl	8001b34 <CODEC_IO_Write>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	4413      	add	r3, r2
 8000f20:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8000f22:	89fb      	ldrh	r3, [r7, #14]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f2a:	2136      	movs	r1, #54	; 0x36
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 fe01 	bl	8001b34 <CODEC_IO_Write>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	4413      	add	r3, r2
 8000f3a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8000f3c:	89fb      	ldrh	r3, [r7, #14]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f243 0203 	movw	r2, #12291	; 0x3003
 8000f44:	2101      	movs	r1, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fdf4 	bl	8001b34 <CODEC_IO_Write>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	461a      	mov	r2, r3
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	4413      	add	r3, r2
 8000f54:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8000f56:	8afb      	ldrh	r3, [r7, #22]
 8000f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f5c:	d10d      	bne.n	8000f7a <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8000f5e:	89fb      	ldrh	r3, [r7, #14]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f240 2205 	movw	r2, #517	; 0x205
 8000f66:	2151      	movs	r1, #81	; 0x51
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 fde3 	bl	8001b34 <CODEC_IO_Write>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	4413      	add	r3, r2
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	e00b      	b.n	8000f92 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8000f7a:	89fb      	ldrh	r3, [r7, #14]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2205      	movs	r2, #5
 8000f80:	2151      	movs	r1, #81	; 0x51
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fdd6 	bl	8001b34 <CODEC_IO_Write>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	4413      	add	r3, r2
 8000f90:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8000f92:	8b7b      	ldrh	r3, [r7, #26]
 8000f94:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8000f98:	f043 0303 	orr.w	r3, r3, #3
 8000f9c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	8b7a      	ldrh	r2, [r7, #26]
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fdc4 	bl	8001b34 <CODEC_IO_Write>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461a      	mov	r2, r3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8000fb6:	89fb      	ldrh	r3, [r7, #14]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2222      	movs	r2, #34	; 0x22
 8000fbc:	2160      	movs	r1, #96	; 0x60
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fdb8 	bl	8001b34 <CODEC_IO_Write>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	4413      	add	r3, r2
 8000fcc:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	f649 7225 	movw	r2, #40741	; 0x9f25
 8000fd6:	214c      	movs	r1, #76	; 0x4c
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fdab 	bl	8001b34 <CODEC_IO_Write>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8000fe8:	200f      	movs	r0, #15
 8000fea:	f000 ff79 	bl	8001ee0 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	212d      	movs	r1, #45	; 0x2d
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 fd9c 	bl	8001b34 <CODEC_IO_Write>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	4413      	add	r3, r2
 8001004:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8001006:	89fb      	ldrh	r3, [r7, #14]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2201      	movs	r2, #1
 800100c:	212e      	movs	r1, #46	; 0x2e
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fd90 	bl	8001b34 <CODEC_IO_Write>
 8001014:	4603      	mov	r3, r0
 8001016:	461a      	mov	r2, r3
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	4413      	add	r3, r2
 800101c:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 800101e:	89fb      	ldrh	r3, [r7, #14]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f44f 724c 	mov.w	r2, #816	; 0x330
 8001026:	2103      	movs	r1, #3
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fd83 	bl	8001b34 <CODEC_IO_Write>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	4413      	add	r3, r2
 8001036:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2233      	movs	r2, #51	; 0x33
 800103e:	2154      	movs	r1, #84	; 0x54
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fd77 	bl	8001b34 <CODEC_IO_Write>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	4413      	add	r3, r2
 800104e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8001050:	f240 1001 	movw	r0, #257	; 0x101
 8001054:	f000 ff44 	bl	8001ee0 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8001058:	89fb      	ldrh	r3, [r7, #14]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	22ee      	movs	r2, #238	; 0xee
 800105e:	2160      	movs	r1, #96	; 0x60
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fd67 	bl	8001b34 <CODEC_IO_Write>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	4413      	add	r3, r2
 800106e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8001070:	89fb      	ldrh	r3, [r7, #14]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	22c0      	movs	r2, #192	; 0xc0
 8001076:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fd5a 	bl	8001b34 <CODEC_IO_Write>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	4413      	add	r3, r2
 8001088:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800108a:	89fb      	ldrh	r3, [r7, #14]
 800108c:	b2db      	uxtb	r3, r3
 800108e:	22c0      	movs	r2, #192	; 0xc0
 8001090:	f240 6111 	movw	r1, #1553	; 0x611
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fd4d 	bl	8001b34 <CODEC_IO_Write>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	4413      	add	r3, r2
 80010a2:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2210      	movs	r2, #16
 80010aa:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80010ae:	4618      	mov	r0, r3
 80010b0:	f000 fd40 	bl	8001b34 <CODEC_IO_Write>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	4413      	add	r3, r2
 80010bc:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 80010be:	89fb      	ldrh	r3, [r7, #14]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	22c0      	movs	r2, #192	; 0xc0
 80010c4:	f240 6112 	movw	r1, #1554	; 0x612
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 fd33 	bl	8001b34 <CODEC_IO_Write>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4413      	add	r3, r2
 80010d6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80010d8:	89fb      	ldrh	r3, [r7, #14]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	22c0      	movs	r2, #192	; 0xc0
 80010de:	f240 6113 	movw	r1, #1555	; 0x613
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 fd26 	bl	8001b34 <CODEC_IO_Write>
 80010e8:	4603      	mov	r3, r0
 80010ea:	461a      	mov	r2, r3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	4413      	add	r3, r2
 80010f0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2210      	movs	r2, #16
 80010f8:	f240 4122 	movw	r1, #1058	; 0x422
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fd19 	bl	8001b34 <CODEC_IO_Write>
 8001102:	4603      	mov	r3, r0
 8001104:	461a      	mov	r2, r3
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	4413      	add	r3, r2
 800110a:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 800110c:	7afa      	ldrb	r2, [r7, #11]
 800110e:	89fb      	ldrh	r3, [r7, #14]
 8001110:	4611      	mov	r1, r2
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f984 	bl	8001420 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8001118:	8afb      	ldrh	r3, [r7, #22]
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80a6 	beq.w	800126c <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 8001120:	8afb      	ldrh	r3, [r7, #22]
 8001122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001126:	d003      	beq.n	8001130 <wm8994_Init+0xc30>
 8001128:	8afb      	ldrh	r3, [r7, #22]
 800112a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112e:	d12b      	bne.n	8001188 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001130:	8b7b      	ldrh	r3, [r7, #26]
 8001132:	f043 0313 	orr.w	r3, r3, #19
 8001136:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001138:	89fb      	ldrh	r3, [r7, #14]
 800113a:	b2db      	uxtb	r3, r3
 800113c:	8b7a      	ldrh	r2, [r7, #26]
 800113e:	2101      	movs	r1, #1
 8001140:	4618      	mov	r0, r3
 8001142:	f000 fcf7 	bl	8001b34 <CODEC_IO_Write>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	4413      	add	r3, r2
 800114e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8001150:	89fb      	ldrh	r3, [r7, #14]
 8001152:	b2db      	uxtb	r3, r3
 8001154:	2202      	movs	r2, #2
 8001156:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fcea 	bl	8001b34 <CODEC_IO_Write>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	4413      	add	r3, r2
 8001168:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800116a:	89fb      	ldrh	r3, [r7, #14]
 800116c:	b2db      	uxtb	r3, r3
 800116e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001172:	f240 4111 	movw	r1, #1041	; 0x411
 8001176:	4618      	mov	r0, r3
 8001178:	f000 fcdc 	bl	8001b34 <CODEC_IO_Write>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	4413      	add	r3, r2
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e06b      	b.n	8001260 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8001188:	8afb      	ldrh	r3, [r7, #22]
 800118a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800118e:	d139      	bne.n	8001204 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8001190:	8b7b      	ldrh	r3, [r7, #26]
 8001192:	f043 0313 	orr.w	r3, r3, #19
 8001196:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8001198:	89fb      	ldrh	r3, [r7, #14]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	8b7a      	ldrh	r2, [r7, #26]
 800119e:	2101      	movs	r1, #1
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fcc7 	bl	8001b34 <CODEC_IO_Write>
 80011a6:	4603      	mov	r3, r0
 80011a8:	461a      	mov	r2, r3
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	4413      	add	r3, r2
 80011ae:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80011b0:	89fb      	ldrh	r3, [r7, #14]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2202      	movs	r2, #2
 80011b6:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fcba 	bl	8001b34 <CODEC_IO_Write>
 80011c0:	4603      	mov	r3, r0
 80011c2:	461a      	mov	r2, r3
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	4413      	add	r3, r2
 80011c8:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 80011ca:	89fb      	ldrh	r3, [r7, #14]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80011d2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fcac 	bl	8001b34 <CODEC_IO_Write>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	4413      	add	r3, r2
 80011e4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80011e6:	89fb      	ldrh	r3, [r7, #14]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80011ee:	f240 4111 	movw	r1, #1041	; 0x411
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fc9e 	bl	8001b34 <CODEC_IO_Write>
 80011f8:	4603      	mov	r3, r0
 80011fa:	461a      	mov	r2, r3
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	4413      	add	r3, r2
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e02d      	b.n	8001260 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8001204:	8afb      	ldrh	r3, [r7, #22]
 8001206:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800120a:	d003      	beq.n	8001214 <wm8994_Init+0xd14>
 800120c:	8afb      	ldrh	r3, [r7, #22]
 800120e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001212:	d125      	bne.n	8001260 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8001214:	89fb      	ldrh	r3, [r7, #14]
 8001216:	b2db      	uxtb	r3, r3
 8001218:	220b      	movs	r2, #11
 800121a:	2118      	movs	r1, #24
 800121c:	4618      	mov	r0, r3
 800121e:	f000 fc89 	bl	8001b34 <CODEC_IO_Write>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	4413      	add	r3, r2
 800122a:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 800122c:	89fb      	ldrh	r3, [r7, #14]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	220b      	movs	r2, #11
 8001232:	211a      	movs	r1, #26
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fc7d 	bl	8001b34 <CODEC_IO_Write>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	4413      	add	r3, r2
 8001242:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800124c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001250:	4618      	mov	r0, r3
 8001252:	f000 fc6f 	bl	8001b34 <CODEC_IO_Write>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	4413      	add	r3, r2
 800125e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8001260:	7afa      	ldrb	r2, [r7, #11]
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 f8da 	bl	8001420 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800126c:	69fb      	ldr	r3, [r7, #28]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3720      	adds	r7, #32
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop

08001278 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800127c:	f000 fdd2 	bl	8001e24 <AUDIO_IO_DeInit>
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800128e:	f000 fdbf 	bl	8001e10 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2100      	movs	r1, #0
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fdf5 	bl	8001e88 <AUDIO_IO_Read>
 800129e:	4603      	mov	r3, r0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	4613      	mov	r3, r2
 80012b6:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f9d1 	bl	8001668 <wm8994_SetMute>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  
  return counter;
 80012ce:	68fb      	ldr	r3, [r7, #12]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3710      	adds	r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	2101      	movs	r1, #1
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f9bc 	bl	8001668 <wm8994_SetMute>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4413      	add	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80012f8:	88fb      	ldrh	r3, [r7, #6]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2201      	movs	r2, #1
 80012fe:	2102      	movs	r1, #2
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fc17 	bl	8001b34 <CODEC_IO_Write>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4413      	add	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
 
  return counter;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f99b 	bl	8001668 <wm8994_SetMute>
 8001332:	4602      	mov	r2, r0
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800133a:	68fb      	ldr	r3, [r7, #12]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	6039      	str	r1, [r7, #0]
 800134e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8001354:	4b31      	ldr	r3, [pc, #196]	; (800141c <wm8994_Stop+0xd8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d05a      	beq.n	8001412 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	2101      	movs	r1, #1
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f981 	bl	8001668 <wm8994_SetMute>
 8001366:	4602      	mov	r2, r0
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4413      	add	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b02      	cmp	r3, #2
 8001372:	d04e      	beq.n	8001412 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001374:	88fb      	ldrh	r3, [r7, #6]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fbd7 	bl	8001b34 <CODEC_IO_Write>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001398:	f240 4122 	movw	r1, #1058	; 0x422
 800139c:	4618      	mov	r0, r3
 800139e:	f000 fbc9 	bl	8001b34 <CODEC_IO_Write>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2200      	movs	r2, #0
 80013b2:	212d      	movs	r1, #45	; 0x2d
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fbbd 	bl	8001b34 <CODEC_IO_Write>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4413      	add	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	212e      	movs	r1, #46	; 0x2e
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fbb1 	bl	8001b34 <CODEC_IO_Write>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4413      	add	r3, r2
 80013da:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	2200      	movs	r2, #0
 80013e2:	2105      	movs	r1, #5
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fba5 	bl	8001b34 <CODEC_IO_Write>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4413      	add	r3, r2
 80013f2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fb99 	bl	8001b34 <CODEC_IO_Write>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4413      	add	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <wm8994_Stop+0xd8>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000078 	.word	0x20000078

08001420 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	460a      	mov	r2, r1
 800142a:	80fb      	strh	r3, [r7, #6]
 800142c:	4613      	mov	r3, r2
 800142e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8001434:	797b      	ldrb	r3, [r7, #5]
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	d80b      	bhi.n	8001452 <wm8994_SetVolume+0x32>
 800143a:	797a      	ldrb	r2, [r7, #5]
 800143c:	4613      	mov	r3, r2
 800143e:	019b      	lsls	r3, r3, #6
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	4a86      	ldr	r2, [pc, #536]	; (800165c <wm8994_SetVolume+0x23c>)
 8001444:	fb82 1203 	smull	r1, r2, r2, r3
 8001448:	1152      	asrs	r2, r2, #5
 800144a:	17db      	asrs	r3, r3, #31
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	e000      	b.n	8001454 <wm8994_SetVolume+0x34>
 8001452:	2364      	movs	r3, #100	; 0x64
 8001454:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8001456:	4b82      	ldr	r3, [pc, #520]	; (8001660 <wm8994_SetVolume+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 809b 	beq.w	8001596 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8001460:	7afb      	ldrb	r3, [r7, #11]
 8001462:	2b3e      	cmp	r3, #62	; 0x3e
 8001464:	d93d      	bls.n	80014e2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f8fc 	bl	8001668 <wm8994_SetMute>
 8001470:	4602      	mov	r2, r0
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	f240 127f 	movw	r2, #383	; 0x17f
 8001480:	211c      	movs	r1, #28
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fb56 	bl	8001b34 <CODEC_IO_Write>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4413      	add	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f240 127f 	movw	r2, #383	; 0x17f
 800149a:	211d      	movs	r1, #29
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fb49 	bl	8001b34 <CODEC_IO_Write>
 80014a2:	4603      	mov	r3, r0
 80014a4:	461a      	mov	r2, r3
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4413      	add	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f240 127f 	movw	r2, #383	; 0x17f
 80014b4:	2126      	movs	r1, #38	; 0x26
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 fb3c 	bl	8001b34 <CODEC_IO_Write>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4413      	add	r3, r2
 80014c4:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	f240 127f 	movw	r2, #383	; 0x17f
 80014ce:	2127      	movs	r1, #39	; 0x27
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fb2f 	bl	8001b34 <CODEC_IO_Write>
 80014d6:	4603      	mov	r3, r0
 80014d8:	461a      	mov	r2, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4413      	add	r3, r2
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	e059      	b.n	8001596 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80014e2:	797b      	ldrb	r3, [r7, #5]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	2101      	movs	r1, #1
 80014ec:	4618      	mov	r0, r3
 80014ee:	f000 f8bb 	bl	8001668 <wm8994_SetMute>
 80014f2:	4602      	mov	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	e04c      	b.n	8001596 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f000 f8b1 	bl	8001668 <wm8994_SetMute>
 8001506:	4602      	mov	r2, r0
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4413      	add	r3, r2
 800150c:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	b2d8      	uxtb	r0, r3
 8001512:	7afb      	ldrb	r3, [r7, #11]
 8001514:	b21b      	sxth	r3, r3
 8001516:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800151a:	b21b      	sxth	r3, r3
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	211c      	movs	r1, #28
 8001522:	f000 fb07 	bl	8001b34 <CODEC_IO_Write>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	4413      	add	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	b2d8      	uxtb	r0, r3
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	b21b      	sxth	r3, r3
 8001538:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800153c:	b21b      	sxth	r3, r3
 800153e:	b29b      	uxth	r3, r3
 8001540:	461a      	mov	r2, r3
 8001542:	211d      	movs	r1, #29
 8001544:	f000 faf6 	bl	8001b34 <CODEC_IO_Write>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4413      	add	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	b21b      	sxth	r3, r3
 800155a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800155e:	b21b      	sxth	r3, r3
 8001560:	b29b      	uxth	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	2126      	movs	r1, #38	; 0x26
 8001566:	f000 fae5 	bl	8001b34 <CODEC_IO_Write>
 800156a:	4603      	mov	r3, r0
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8001574:	88fb      	ldrh	r3, [r7, #6]
 8001576:	b2d8      	uxtb	r0, r3
 8001578:	7afb      	ldrb	r3, [r7, #11]
 800157a:	b21b      	sxth	r3, r3
 800157c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8001580:	b21b      	sxth	r3, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	2127      	movs	r1, #39	; 0x27
 8001588:	f000 fad4 	bl	8001b34 <CODEC_IO_Write>
 800158c:	4603      	mov	r3, r0
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8001596:	4b33      	ldr	r3, [pc, #204]	; (8001664 <wm8994_SetVolume+0x244>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d059      	beq.n	8001652 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b63      	cmp	r3, #99	; 0x63
 80015a2:	d80c      	bhi.n	80015be <wm8994_SetVolume+0x19e>
 80015a4:	797a      	ldrb	r2, [r7, #5]
 80015a6:	4613      	mov	r3, r2
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	1a9b      	subs	r3, r3, r2
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4a2b      	ldr	r2, [pc, #172]	; (800165c <wm8994_SetVolume+0x23c>)
 80015b0:	fb82 1203 	smull	r1, r2, r2, r3
 80015b4:	1152      	asrs	r2, r2, #5
 80015b6:	17db      	asrs	r3, r3, #31
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	e000      	b.n	80015c0 <wm8994_SetVolume+0x1a0>
 80015be:	23ef      	movs	r3, #239	; 0xef
 80015c0:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	b21b      	sxth	r3, r3
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	b21b      	sxth	r3, r3
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d8:	f000 faac 	bl	8001b34 <CODEC_IO_Write>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4413      	add	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	b2d8      	uxtb	r0, r3
 80015ea:	7afb      	ldrb	r3, [r7, #11]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	f240 4101 	movw	r1, #1025	; 0x401
 80015fc:	f000 fa9a 	bl	8001b34 <CODEC_IO_Write>
 8001600:	4603      	mov	r3, r0
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	b2d8      	uxtb	r0, r3
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	b21b      	sxth	r3, r3
 8001612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001616:	b21b      	sxth	r3, r3
 8001618:	b29b      	uxth	r3, r3
 800161a:	461a      	mov	r2, r3
 800161c:	f240 4104 	movw	r1, #1028	; 0x404
 8001620:	f000 fa88 	bl	8001b34 <CODEC_IO_Write>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4413      	add	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	b2d8      	uxtb	r0, r3
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	b21b      	sxth	r3, r3
 8001636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163a:	b21b      	sxth	r3, r3
 800163c:	b29b      	uxth	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	f240 4105 	movw	r1, #1029	; 0x405
 8001644:	f000 fa76 	bl	8001b34 <CODEC_IO_Write>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4413      	add	r3, r2
 8001650:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	51eb851f 	.word	0x51eb851f
 8001660:	20000078 	.word	0x20000078
 8001664:	2000007c 	.word	0x2000007c

08001668 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <wm8994_SetMute+0x98>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d039      	beq.n	80016f4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d11c      	bne.n	80016c0 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fa4e 	bl	8001b34 <CODEC_IO_Write>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80016a2:	88fb      	ldrh	r3, [r7, #6]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016aa:	f240 4122 	movw	r1, #1058	; 0x422
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 fa40 	bl	8001b34 <CODEC_IO_Write>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e019      	b.n	80016f4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2210      	movs	r2, #16
 80016c6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fa32 	bl	8001b34 <CODEC_IO_Write>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4413      	add	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2210      	movs	r2, #16
 80016e0:	f240 4122 	movw	r1, #1058	; 0x422
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fa25 	bl	8001b34 <CODEC_IO_Write>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000078 	.word	0x20000078

08001704 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	80fb      	strh	r3, [r7, #6]
 8001710:	4613      	mov	r3, r2
 8001712:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8001718:	797b      	ldrb	r3, [r7, #5]
 800171a:	2b03      	cmp	r3, #3
 800171c:	f000 808c 	beq.w	8001838 <wm8994_SetOutputMode+0x134>
 8001720:	2b03      	cmp	r3, #3
 8001722:	f300 80cb 	bgt.w	80018bc <wm8994_SetOutputMode+0x1b8>
 8001726:	2b01      	cmp	r3, #1
 8001728:	d002      	beq.n	8001730 <wm8994_SetOutputMode+0x2c>
 800172a:	2b02      	cmp	r3, #2
 800172c:	d042      	beq.n	80017b4 <wm8994_SetOutputMode+0xb0>
 800172e:	e0c5      	b.n	80018bc <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f640 420c 	movw	r2, #3084	; 0xc0c
 8001738:	2105      	movs	r1, #5
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f9fa 	bl	8001b34 <CODEC_IO_Write>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2200      	movs	r2, #0
 8001750:	f240 6101 	movw	r1, #1537	; 0x601
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f9ed 	bl	8001b34 <CODEC_IO_Write>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4413      	add	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2200      	movs	r2, #0
 800176a:	f240 6102 	movw	r1, #1538	; 0x602
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f9e0 	bl	8001b34 <CODEC_IO_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2202      	movs	r2, #2
 8001784:	f240 6104 	movw	r1, #1540	; 0x604
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f9d3 	bl	8001b34 <CODEC_IO_Write>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2202      	movs	r2, #2
 800179e:	f240 6105 	movw	r1, #1541	; 0x605
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f9c6 	bl	8001b34 <CODEC_IO_Write>
 80017a8:	4603      	mov	r3, r0
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
    break;
 80017b2:	e0c5      	b.n	8001940 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f240 3203 	movw	r2, #771	; 0x303
 80017bc:	2105      	movs	r1, #5
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 f9b8 	bl	8001b34 <CODEC_IO_Write>
 80017c4:	4603      	mov	r3, r0
 80017c6:	461a      	mov	r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	2201      	movs	r2, #1
 80017d4:	f240 6101 	movw	r1, #1537	; 0x601
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f9ab 	bl	8001b34 <CODEC_IO_Write>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4413      	add	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	2201      	movs	r2, #1
 80017ee:	f240 6102 	movw	r1, #1538	; 0x602
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f99e 	bl	8001b34 <CODEC_IO_Write>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4413      	add	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2200      	movs	r2, #0
 8001808:	f240 6104 	movw	r1, #1540	; 0x604
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f991 	bl	8001b34 <CODEC_IO_Write>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2200      	movs	r2, #0
 8001822:	f240 6105 	movw	r1, #1541	; 0x605
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f984 	bl	8001b34 <CODEC_IO_Write>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
    break;
 8001836:	e083      	b.n	8001940 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8001838:	88fb      	ldrh	r3, [r7, #6]
 800183a:	b2db      	uxtb	r3, r3
 800183c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8001840:	2105      	movs	r1, #5
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f976 	bl	8001b34 <CODEC_IO_Write>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	b2db      	uxtb	r3, r3
 8001856:	2201      	movs	r2, #1
 8001858:	f240 6101 	movw	r1, #1537	; 0x601
 800185c:	4618      	mov	r0, r3
 800185e:	f000 f969 	bl	8001b34 <CODEC_IO_Write>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4413      	add	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	b2db      	uxtb	r3, r3
 8001870:	2201      	movs	r2, #1
 8001872:	f240 6102 	movw	r1, #1538	; 0x602
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f95c 	bl	8001b34 <CODEC_IO_Write>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	2202      	movs	r2, #2
 800188c:	f240 6104 	movw	r1, #1540	; 0x604
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f94f 	bl	8001b34 <CODEC_IO_Write>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	4413      	add	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2202      	movs	r2, #2
 80018a6:	f240 6105 	movw	r1, #1541	; 0x605
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f942 	bl	8001b34 <CODEC_IO_Write>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
    break;
 80018ba:	e041      	b.n	8001940 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	f240 3203 	movw	r2, #771	; 0x303
 80018c4:	2105      	movs	r1, #5
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f934 	bl	8001b34 <CODEC_IO_Write>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2201      	movs	r2, #1
 80018dc:	f240 6101 	movw	r1, #1537	; 0x601
 80018e0:	4618      	mov	r0, r3
 80018e2:	f000 f927 	bl	8001b34 <CODEC_IO_Write>
 80018e6:	4603      	mov	r3, r0
 80018e8:	461a      	mov	r2, r3
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	2201      	movs	r2, #1
 80018f6:	f240 6102 	movw	r1, #1538	; 0x602
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f91a 	bl	8001b34 <CODEC_IO_Write>
 8001900:	4603      	mov	r3, r0
 8001902:	461a      	mov	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2200      	movs	r2, #0
 8001910:	f240 6104 	movw	r1, #1540	; 0x604
 8001914:	4618      	mov	r0, r3
 8001916:	f000 f90d 	bl	8001b34 <CODEC_IO_Write>
 800191a:	4603      	mov	r3, r0
 800191c:	461a      	mov	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2200      	movs	r2, #0
 800192a:	f240 6105 	movw	r1, #1541	; 0x605
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f900 	bl	8001b34 <CODEC_IO_Write>
 8001934:	4603      	mov	r3, r0
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
    break;    
 800193e:	bf00      	nop
  }  
  return counter;
 8001940:	68fb      	ldr	r3, [r7, #12]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4a64      	ldr	r2, [pc, #400]	; (8001af0 <wm8994_SetFrequency+0x1a4>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d079      	beq.n	8001a58 <wm8994_SetFrequency+0x10c>
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4a62      	ldr	r2, [pc, #392]	; (8001af0 <wm8994_SetFrequency+0x1a4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	f200 80ad 	bhi.w	8001ac8 <wm8994_SetFrequency+0x17c>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001974:	4293      	cmp	r3, r2
 8001976:	d061      	beq.n	8001a3c <wm8994_SetFrequency+0xf0>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800197e:	4293      	cmp	r3, r2
 8001980:	f200 80a2 	bhi.w	8001ac8 <wm8994_SetFrequency+0x17c>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f64a 4244 	movw	r2, #44100	; 0xac44
 800198a:	4293      	cmp	r3, r2
 800198c:	f000 808e 	beq.w	8001aac <wm8994_SetFrequency+0x160>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001996:	4293      	cmp	r3, r2
 8001998:	f200 8096 	bhi.w	8001ac8 <wm8994_SetFrequency+0x17c>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80019a2:	d03d      	beq.n	8001a20 <wm8994_SetFrequency+0xd4>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80019aa:	f200 808d 	bhi.w	8001ac8 <wm8994_SetFrequency+0x17c>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f245 6222 	movw	r2, #22050	; 0x5622
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d06b      	beq.n	8001a90 <wm8994_SetFrequency+0x144>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f245 6222 	movw	r2, #22050	; 0x5622
 80019be:	4293      	cmp	r3, r2
 80019c0:	f200 8082 	bhi.w	8001ac8 <wm8994_SetFrequency+0x17c>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80019ca:	d01b      	beq.n	8001a04 <wm8994_SetFrequency+0xb8>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80019d2:	d879      	bhi.n	8001ac8 <wm8994_SetFrequency+0x17c>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80019da:	d005      	beq.n	80019e8 <wm8994_SetFrequency+0x9c>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f642 3211 	movw	r2, #11025	; 0x2b11
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d046      	beq.n	8001a74 <wm8994_SetFrequency+0x128>
 80019e6:	e06f      	b.n	8001ac8 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2203      	movs	r2, #3
 80019ee:	f44f 7104 	mov.w	r1, #528	; 0x210
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f89e 	bl	8001b34 <CODEC_IO_Write>
 80019f8:	4603      	mov	r3, r0
 80019fa:	461a      	mov	r2, r3
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4413      	add	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]
    break;
 8001a02:	e06f      	b.n	8001ae4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2233      	movs	r2, #51	; 0x33
 8001a0a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f890 	bl	8001b34 <CODEC_IO_Write>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
    break;
 8001a1e:	e061      	b.n	8001ae4 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2263      	movs	r2, #99	; 0x63
 8001a26:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f882 	bl	8001b34 <CODEC_IO_Write>
 8001a30:	4603      	mov	r3, r0
 8001a32:	461a      	mov	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
    break;
 8001a3a:	e053      	b.n	8001ae4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	2283      	movs	r2, #131	; 0x83
 8001a42:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f874 	bl	8001b34 <CODEC_IO_Write>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4413      	add	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
    break;
 8001a56:	e045      	b.n	8001ae4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	22a3      	movs	r2, #163	; 0xa3
 8001a5e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f866 	bl	8001b34 <CODEC_IO_Write>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
    break;
 8001a72:	e037      	b.n	8001ae4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2213      	movs	r2, #19
 8001a7a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f858 	bl	8001b34 <CODEC_IO_Write>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
    break;
 8001a8e:	e029      	b.n	8001ae4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2243      	movs	r2, #67	; 0x43
 8001a96:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f84a 	bl	8001b34 <CODEC_IO_Write>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	60fb      	str	r3, [r7, #12]
    break;
 8001aaa:	e01b      	b.n	8001ae4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2273      	movs	r2, #115	; 0x73
 8001ab2:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f83c 	bl	8001b34 <CODEC_IO_Write>
 8001abc:	4603      	mov	r3, r0
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]
    break; 
 8001ac6:	e00d      	b.n	8001ae4 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2283      	movs	r2, #131	; 0x83
 8001ace:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f82e 	bl	8001b34 <CODEC_IO_Write>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4413      	add	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
    break; 
 8001ae2:	bf00      	nop
  }
  return counter;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	00017700 	.word	0x00017700

08001af4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f812 	bl	8001b34 <CODEC_IO_Write>
 8001b10:	4603      	mov	r3, r0
 8001b12:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <wm8994_Reset+0x38>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8001b1a:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <wm8994_Reset+0x3c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

  return counter;
 8001b20:	68fb      	ldr	r3, [r7, #12]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000078 	.word	0x20000078
 8001b30:	2000007c 	.word	0x2000007c

08001b34 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	80bb      	strh	r3, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8001b4a:	887a      	ldrh	r2, [r7, #2]
 8001b4c:	88b9      	ldrh	r1, [r7, #4]
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 f96f 	bl	8001e34 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	b2db      	uxtb	r3, r3
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a51      	ldr	r2, [pc, #324]	; (8001cb4 <I2Cx_MspInit+0x150>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d14d      	bne.n	8001c10 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a4f      	ldr	r2, [pc, #316]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b4d      	ldr	r3, [pc, #308]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001b90:	2312      	movs	r3, #18
 8001b92:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4845      	ldr	r0, [pc, #276]	; (8001cbc <I2Cx_MspInit+0x158>)
 8001ba8:	f002 f89c 	bl	8003ce4 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001bb2:	f107 031c 	add.w	r3, r7, #28
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4840      	ldr	r0, [pc, #256]	; (8001cbc <I2Cx_MspInit+0x158>)
 8001bba:	f002 f893 	bl	8003ce4 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001bbe:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a3d      	ldr	r2, [pc, #244]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001bc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	4a37      	ldr	r2, [pc, #220]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001be0:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001be2:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	4a34      	ldr	r2, [pc, #208]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001be8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bec:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	210f      	movs	r1, #15
 8001bf2:	2048      	movs	r0, #72	; 0x48
 8001bf4:	f001 fad7 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001bf8:	2048      	movs	r0, #72	; 0x48
 8001bfa:	f001 faf0 	bl	80031de <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	210f      	movs	r1, #15
 8001c02:	2049      	movs	r0, #73	; 0x49
 8001c04:	f001 facf 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8001c08:	2049      	movs	r0, #73	; 0x49
 8001c0a:	f001 fae8 	bl	80031de <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001c0e:	e04d      	b.n	8001cac <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c16:	f043 0302 	orr.w	r3, r3, #2
 8001c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c2c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c2e:	2312      	movs	r3, #18
 8001c30:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001c36:	2302      	movs	r3, #2
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	481e      	ldr	r0, [pc, #120]	; (8001cc0 <I2Cx_MspInit+0x15c>)
 8001c46:	f002 f84d 	bl	8003ce4 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001c4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001c50:	f107 031c 	add.w	r3, r7, #28
 8001c54:	4619      	mov	r1, r3
 8001c56:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <I2Cx_MspInit+0x15c>)
 8001c58:	f002 f844 	bl	8003ce4 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001c5c:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4a0f      	ldr	r2, [pc, #60]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c7e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a0c      	ldr	r2, [pc, #48]	; (8001cb8 <I2Cx_MspInit+0x154>)
 8001c86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c8a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	210f      	movs	r1, #15
 8001c90:	201f      	movs	r0, #31
 8001c92:	f001 fa88 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001c96:	201f      	movs	r0, #31
 8001c98:	f001 faa1 	bl	80031de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	2020      	movs	r0, #32
 8001ca2:	f001 fa80 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001ca6:	2020      	movs	r0, #32
 8001ca8:	f001 fa99 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8001cac:	bf00      	nop
 8001cae:	3730      	adds	r7, #48	; 0x30
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000080 	.word	0x20000080
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40021c00 	.word	0x40021c00
 8001cc0:	40020400 	.word	0x40020400

08001cc4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f002 fde7 	bl	80048a0 <HAL_I2C_GetState>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d125      	bne.n	8001d24 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a14      	ldr	r2, [pc, #80]	; (8001d2c <I2Cx_Init+0x68>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d103      	bne.n	8001ce8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <I2Cx_Init+0x6c>)
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e002      	b.n	8001cee <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <I2Cx_Init+0x70>)
 8001cec:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <I2Cx_Init+0x74>)
 8001cf2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ff23 	bl	8001b64 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f002 fab2 	bl	8004288 <HAL_I2C_Init>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000080 	.word	0x20000080
 8001d30:	40005c00 	.word	0x40005c00
 8001d34:	40005400 	.word	0x40005400
 8001d38:	40912732 	.word	0x40912732

08001d3c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08a      	sub	sp, #40	; 0x28
 8001d40:	af04      	add	r7, sp, #16
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	72fb      	strb	r3, [r7, #11]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001d5a:	7afb      	ldrb	r3, [r7, #11]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	88f8      	ldrh	r0, [r7, #6]
 8001d60:	893a      	ldrh	r2, [r7, #8]
 8001d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4603      	mov	r3, r0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f002 fc6e 	bl	8004654 <HAL_I2C_Mem_Read>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001d82:	7afb      	ldrb	r3, [r7, #11]
 8001d84:	4619      	mov	r1, r3
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f832 	bl	8001df0 <I2Cx_Error>
  }
  return status;    
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b08a      	sub	sp, #40	; 0x28
 8001d9a:	af04      	add	r7, sp, #16
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	4608      	mov	r0, r1
 8001da0:	4611      	mov	r1, r2
 8001da2:	461a      	mov	r2, r3
 8001da4:	4603      	mov	r3, r0
 8001da6:	72fb      	strb	r3, [r7, #11]
 8001da8:	460b      	mov	r3, r1
 8001daa:	813b      	strh	r3, [r7, #8]
 8001dac:	4613      	mov	r3, r2
 8001dae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	b299      	uxth	r1, r3
 8001db8:	88f8      	ldrh	r0, [r7, #6]
 8001dba:	893a      	ldrh	r2, [r7, #8]
 8001dbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	6a3b      	ldr	r3, [r7, #32]
 8001dc8:	9300      	str	r3, [sp, #0]
 8001dca:	4603      	mov	r3, r0
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f002 fb1b 	bl	8004408 <HAL_I2C_Mem_Write>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001dd6:	7dfb      	ldrb	r3, [r7, #23]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001ddc:	7afb      	ldrb	r3, [r7, #11]
 8001dde:	4619      	mov	r1, r3
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f805 	bl	8001df0 <I2Cx_Error>
  }
  return status;
 8001de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f002 fad3 	bl	80043a8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f7ff ff5e 	bl	8001cc4 <I2Cx_Init>
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <AUDIO_IO_Init+0x10>)
 8001e16:	f7ff ff55 	bl	8001cc4 <I2Cx_Init>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000080 	.word	0x20000080

08001e24 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af02      	add	r7, sp, #8
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	80bb      	strh	r3, [r7, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	0a1b      	lsrs	r3, r3, #8
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8001e52:	89fb      	ldrh	r3, [r7, #14]
 8001e54:	021b      	lsls	r3, r3, #8
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b21a      	sxth	r2, r3
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 8001e66:	88ba      	ldrh	r2, [r7, #4]
 8001e68:	79f9      	ldrb	r1, [r7, #7]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	1cbb      	adds	r3, r7, #2
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	2302      	movs	r3, #2
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <AUDIO_IO_Write+0x50>)
 8001e76:	f7ff ff8e 	bl	8001d96 <I2Cx_WriteMultiple>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000080 	.word	0x20000080

08001e88 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460a      	mov	r2, r1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	81bb      	strh	r3, [r7, #12]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8001ea0:	88ba      	ldrh	r2, [r7, #4]
 8001ea2:	79f9      	ldrb	r1, [r7, #7]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2302      	movs	r3, #2
 8001eb0:	480a      	ldr	r0, [pc, #40]	; (8001edc <AUDIO_IO_Read+0x54>)
 8001eb2:	f7ff ff43 	bl	8001d3c <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8001eb6:	89bb      	ldrh	r3, [r7, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 8001ebc:	89bb      	ldrh	r3, [r7, #12]
 8001ebe:	021b      	lsls	r3, r3, #8
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	b21a      	sxth	r2, r3
 8001ec4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	b21b      	sxth	r3, r3
 8001ecc:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 8001ece:	89fb      	ldrh	r3, [r7, #14]
 8001ed0:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8001ed2:	89bb      	ldrh	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000080 	.word	0x20000080

08001ee0 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f001 f861 	bl	8002fb0 <HAL_Delay>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8001efc:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001efe:	2228      	movs	r2, #40	; 0x28
 8001f00:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f04:	2209      	movs	r2, #9
 8001f06:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f0a:	2235      	movs	r2, #53	; 0x35
 8001f0c:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001f0e:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f10:	220b      	movs	r2, #11
 8001f12:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f16:	f240 121b 	movw	r2, #283	; 0x11b
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8001f1c:	4b29      	ldr	r3, [pc, #164]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f1e:	f240 2215 	movw	r2, #533	; 0x215
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f26:	f240 121d 	movw	r2, #285	; 0x11d
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8001f2c:	4b25      	ldr	r3, [pc, #148]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f2e:	f240 2235 	movw	r2, #565	; 0x235
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8001f34:	2100      	movs	r1, #0
 8001f36:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f38:	f000 fcb4 	bl	80028a4 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f3e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f42:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8001f44:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f46:	f44f 7288 	mov.w	r2, #272	; 0x110
 8001f4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8001f4c:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f64:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8001f6a:	4b16      	ldr	r3, [pc, #88]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8001f70:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f76:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <BSP_LCD_Init+0xd0>)
 8001f80:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8001f82:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f84:	f003 f93e 	bl	8005204 <HAL_LTDC_GetState>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d103      	bne.n	8001f96 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f92:	f000 fbad 	bl	80026f0 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8001f96:	480b      	ldr	r0, [pc, #44]	; (8001fc4 <BSP_LCD_Init+0xcc>)
 8001f98:	f002 ff50 	bl	8004e3c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa2:	480a      	ldr	r0, [pc, #40]	; (8001fcc <BSP_LCD_Init+0xd4>)
 8001fa4:	f002 f956 	bl	8004254 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2108      	movs	r1, #8
 8001fac:	4808      	ldr	r0, [pc, #32]	; (8001fd0 <BSP_LCD_Init+0xd8>)
 8001fae:	f002 f951 	bl	8004254 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001fb2:	f000 fddb 	bl	8002b6c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001fb6:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <BSP_LCD_Init+0xdc>)
 8001fb8:	f000 f8d8 	bl	800216c <BSP_LCD_SetFont>
  
  return LCD_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	2000410c 	.word	0x2000410c
 8001fc8:	40016800 	.word	0x40016800
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	40022800 	.word	0x40022800
 8001fd4:	20000034 	.word	0x20000034

08001fd8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <BSP_LCD_GetXSize+0x20>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <BSP_LCD_GetXSize+0x24>)
 8001fe2:	2134      	movs	r1, #52	; 0x34
 8001fe4:	fb01 f303 	mul.w	r3, r1, r3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3360      	adds	r3, #96	; 0x60
 8001fec:	681b      	ldr	r3, [r3, #0]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	2000010c 	.word	0x2000010c
 8001ffc:	2000410c 	.word	0x2000410c

08002000 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <BSP_LCD_GetYSize+0x20>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a06      	ldr	r2, [pc, #24]	; (8002024 <BSP_LCD_GetYSize+0x24>)
 800200a:	2134      	movs	r1, #52	; 0x34
 800200c:	fb01 f303 	mul.w	r3, r1, r3
 8002010:	4413      	add	r3, r2
 8002012:	3364      	adds	r3, #100	; 0x64
 8002014:	681b      	ldr	r3, [r3, #0]
}
 8002016:	4618      	mov	r0, r3
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	2000010c 	.word	0x2000010c
 8002024:	2000410c 	.word	0x2000410c

08002028 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002028:	b580      	push	{r7, lr}
 800202a:	b090      	sub	sp, #64	; 0x40
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002038:	f7ff ffce 	bl	8001fd8 <BSP_LCD_GetXSize>
 800203c:	4603      	mov	r3, r0
 800203e:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002044:	f7ff ffdc 	bl	8002000 <BSP_LCD_GetYSize>
 8002048:	4603      	mov	r3, r0
 800204a:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002054:	23ff      	movs	r3, #255	; 0xff
 8002056:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002062:	2300      	movs	r3, #0
 8002064:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800206e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002074:	2307      	movs	r3, #7
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002078:	f7ff ffae 	bl	8001fd8 <BSP_LCD_GetXSize>
 800207c:	4603      	mov	r3, r0
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002080:	f7ff ffbe 	bl	8002000 <BSP_LCD_GetYSize>
 8002084:	4603      	mov	r3, r0
 8002086:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002088:	88fa      	ldrh	r2, [r7, #6]
 800208a:	f107 030c 	add.w	r3, r7, #12
 800208e:	4619      	mov	r1, r3
 8002090:	4812      	ldr	r0, [pc, #72]	; (80020dc <BSP_LCD_LayerDefaultInit+0xb4>)
 8002092:	f003 f879 	bl	8005188 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	4911      	ldr	r1, [pc, #68]	; (80020e0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3304      	adds	r3, #4
 80020a6:	f04f 32ff 	mov.w	r2, #4294967295
 80020aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80020ac:	88fa      	ldrh	r2, [r7, #6]
 80020ae:	490c      	ldr	r1, [pc, #48]	; (80020e0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	3308      	adds	r3, #8
 80020bc:	4a09      	ldr	r2, [pc, #36]	; (80020e4 <BSP_LCD_LayerDefaultInit+0xbc>)
 80020be:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	4907      	ldr	r1, [pc, #28]	; (80020e0 <BSP_LCD_LayerDefaultInit+0xb8>)
 80020c4:	4613      	mov	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	4413      	add	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80020d2:	601a      	str	r2, [r3, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3740      	adds	r7, #64	; 0x40
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	2000410c 	.word	0x2000410c
 80020e0:	20000110 	.word	0x20000110
 80020e4:	20000034 	.word	0x20000034

080020e8 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <BSP_LCD_SelectLayer+0x1c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6013      	str	r3, [r2, #0]
} 
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000010c 	.word	0x2000010c

08002108 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002110:	4b07      	ldr	r3, [pc, #28]	; (8002130 <BSP_LCD_SetTextColor+0x28>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4907      	ldr	r1, [pc, #28]	; (8002134 <BSP_LCD_SetTextColor+0x2c>)
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	2000010c 	.word	0x2000010c
 8002134:	20000110 	.word	0x20000110

08002138 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <BSP_LCD_SetBackColor+0x2c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4908      	ldr	r1, [pc, #32]	; (8002168 <BSP_LCD_SetBackColor+0x30>)
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3304      	adds	r3, #4
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	601a      	str	r2, [r3, #0]
}
 8002156:	bf00      	nop
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	2000010c 	.word	0x2000010c
 8002168:	20000110 	.word	0x20000110

0800216c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <BSP_LCD_SetFont+0x2c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4908      	ldr	r1, [pc, #32]	; (800219c <BSP_LCD_SetFont+0x30>)
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	3308      	adds	r3, #8
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000010c 	.word	0x2000010c
 800219c:	20000110 	.word	0x20000110

080021a0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80021a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <BSP_LCD_Clear+0x48>)
 80021aa:	681c      	ldr	r4, [r3, #0]
 80021ac:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <BSP_LCD_Clear+0x48>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0e      	ldr	r2, [pc, #56]	; (80021ec <BSP_LCD_Clear+0x4c>)
 80021b2:	2134      	movs	r1, #52	; 0x34
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	335c      	adds	r3, #92	; 0x5c
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	461e      	mov	r6, r3
 80021c0:	f7ff ff0a 	bl	8001fd8 <BSP_LCD_GetXSize>
 80021c4:	4605      	mov	r5, r0
 80021c6:	f7ff ff1b 	bl	8002000 <BSP_LCD_GetYSize>
 80021ca:	4602      	mov	r2, r0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2300      	movs	r3, #0
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	4613      	mov	r3, r2
 80021d6:	462a      	mov	r2, r5
 80021d8:	4631      	mov	r1, r6
 80021da:	4620      	mov	r0, r4
 80021dc:	f000 fc36 	bl	8002a4c <LL_FillBuffer>
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e8:	2000010c 	.word	0x2000010c
 80021ec:	2000410c 	.word	0x2000410c

080021f0 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
 80021fa:	460b      	mov	r3, r1
 80021fc:	80bb      	strh	r3, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002202:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <BSP_LCD_DisplayChar+0x80>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	491b      	ldr	r1, [pc, #108]	; (8002274 <BSP_LCD_DisplayChar+0x84>)
 8002208:	4613      	mov	r3, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	4413      	add	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	3308      	adds	r3, #8
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	78fb      	ldrb	r3, [r7, #3]
 800221a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <BSP_LCD_DisplayChar+0x80>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4c14      	ldr	r4, [pc, #80]	; (8002274 <BSP_LCD_DisplayChar+0x84>)
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4423      	add	r3, r4
 800222e:	3308      	adds	r3, #8
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002234:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <BSP_LCD_DisplayChar+0x80>)
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	4c0d      	ldr	r4, [pc, #52]	; (8002274 <BSP_LCD_DisplayChar+0x84>)
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4423      	add	r3, r4
 8002248:	3308      	adds	r3, #8
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	889b      	ldrh	r3, [r3, #4]
 800224e:	3307      	adds	r3, #7
 8002250:	2b00      	cmp	r3, #0
 8002252:	da00      	bge.n	8002256 <BSP_LCD_DisplayChar+0x66>
 8002254:	3307      	adds	r3, #7
 8002256:	10db      	asrs	r3, r3, #3
 8002258:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800225c:	18ca      	adds	r2, r1, r3
 800225e:	88b9      	ldrh	r1, [r7, #4]
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fb3a 	bl	80028dc <DrawChar>
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	2000010c 	.word	0x2000010c
 8002274:	20000110 	.word	0x20000110

08002278 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002278:	b5b0      	push	{r4, r5, r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	60ba      	str	r2, [r7, #8]
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	81fb      	strh	r3, [r7, #14]
 8002286:	460b      	mov	r3, r1
 8002288:	81bb      	strh	r3, [r7, #12]
 800228a:	4613      	mov	r3, r2
 800228c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 800228e:	2301      	movs	r3, #1
 8002290:	83fb      	strh	r3, [r7, #30]
 8002292:	2300      	movs	r3, #0
 8002294:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80022a2:	e002      	b.n	80022aa <BSP_LCD_DisplayStringAt+0x32>
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	3301      	adds	r3, #1
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	617a      	str	r2, [r7, #20]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f6      	bne.n	80022a4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80022b6:	f7ff fe8f 	bl	8001fd8 <BSP_LCD_GetXSize>
 80022ba:	4601      	mov	r1, r0
 80022bc:	4b50      	ldr	r3, [pc, #320]	; (8002400 <BSP_LCD_DisplayStringAt+0x188>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4850      	ldr	r0, [pc, #320]	; (8002404 <BSP_LCD_DisplayStringAt+0x18c>)
 80022c2:	4613      	mov	r3, r2
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4403      	add	r3, r0
 80022cc:	3308      	adds	r3, #8
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	889b      	ldrh	r3, [r3, #4]
 80022d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d6:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b03      	cmp	r3, #3
 80022dc:	d01c      	beq.n	8002318 <BSP_LCD_DisplayStringAt+0xa0>
 80022de:	2b03      	cmp	r3, #3
 80022e0:	dc33      	bgt.n	800234a <BSP_LCD_DisplayStringAt+0xd2>
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d002      	beq.n	80022ec <BSP_LCD_DisplayStringAt+0x74>
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d019      	beq.n	800231e <BSP_LCD_DisplayStringAt+0xa6>
 80022ea:	e02e      	b.n	800234a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	1ad1      	subs	r1, r2, r3
 80022f2:	4b43      	ldr	r3, [pc, #268]	; (8002400 <BSP_LCD_DisplayStringAt+0x188>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	4843      	ldr	r0, [pc, #268]	; (8002404 <BSP_LCD_DisplayStringAt+0x18c>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4403      	add	r3, r0
 8002302:	3308      	adds	r3, #8
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	fb03 f301 	mul.w	r3, r3, r1
 800230c:	085b      	lsrs	r3, r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	89fb      	ldrh	r3, [r7, #14]
 8002312:	4413      	add	r3, r2
 8002314:	83fb      	strh	r3, [r7, #30]
      break;
 8002316:	e01b      	b.n	8002350 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002318:	89fb      	ldrh	r3, [r7, #14]
 800231a:	83fb      	strh	r3, [r7, #30]
      break;
 800231c:	e018      	b.n	8002350 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b299      	uxth	r1, r3
 8002326:	4b36      	ldr	r3, [pc, #216]	; (8002400 <BSP_LCD_DisplayStringAt+0x188>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	4836      	ldr	r0, [pc, #216]	; (8002404 <BSP_LCD_DisplayStringAt+0x18c>)
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4403      	add	r3, r0
 8002336:	3308      	adds	r3, #8
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	889b      	ldrh	r3, [r3, #4]
 800233c:	fb11 f303 	smulbb	r3, r1, r3
 8002340:	b29a      	uxth	r2, r3
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	83fb      	strh	r3, [r7, #30]
      break;
 8002348:	e002      	b.n	8002350 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	83fb      	strh	r3, [r7, #30]
      break;
 800234e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002350:	8bfb      	ldrh	r3, [r7, #30]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <BSP_LCD_DisplayStringAt+0xe6>
 8002356:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800235a:	2b00      	cmp	r3, #0
 800235c:	da1d      	bge.n	800239a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 800235e:	2301      	movs	r3, #1
 8002360:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002362:	e01a      	b.n	800239a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	781a      	ldrb	r2, [r3, #0]
 8002368:	89b9      	ldrh	r1, [r7, #12]
 800236a:	8bfb      	ldrh	r3, [r7, #30]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff3f 	bl	80021f0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002372:	4b23      	ldr	r3, [pc, #140]	; (8002400 <BSP_LCD_DisplayStringAt+0x188>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	4923      	ldr	r1, [pc, #140]	; (8002404 <BSP_LCD_DisplayStringAt+0x18c>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3308      	adds	r3, #8
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	889a      	ldrh	r2, [r3, #4]
 8002388:	8bfb      	ldrh	r3, [r7, #30]
 800238a:	4413      	add	r3, r2
 800238c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	3301      	adds	r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
    i++;
 8002394:	8bbb      	ldrh	r3, [r7, #28]
 8002396:	3301      	adds	r3, #1
 8002398:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bf14      	ite	ne
 80023a2:	2301      	movne	r3, #1
 80023a4:	2300      	moveq	r3, #0
 80023a6:	b2dc      	uxtb	r4, r3
 80023a8:	f7ff fe16 	bl	8001fd8 <BSP_LCD_GetXSize>
 80023ac:	8bb9      	ldrh	r1, [r7, #28]
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <BSP_LCD_DisplayStringAt+0x188>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	4d14      	ldr	r5, [pc, #80]	; (8002404 <BSP_LCD_DisplayStringAt+0x18c>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	442b      	add	r3, r5
 80023be:	3308      	adds	r3, #8
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	889b      	ldrh	r3, [r3, #4]
 80023c4:	fb03 f301 	mul.w	r3, r3, r1
 80023c8:	1ac3      	subs	r3, r0, r3
 80023ca:	b299      	uxth	r1, r3
 80023cc:	4b0c      	ldr	r3, [pc, #48]	; (8002400 <BSP_LCD_DisplayStringAt+0x188>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <BSP_LCD_DisplayStringAt+0x18c>)
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4403      	add	r3, r0
 80023dc:	3308      	adds	r3, #8
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	4299      	cmp	r1, r3
 80023e4:	bf2c      	ite	cs
 80023e6:	2301      	movcs	r3, #1
 80023e8:	2300      	movcc	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4023      	ands	r3, r4
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1b7      	bne.n	8002364 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}
 80023fe:	bf00      	nop
 8002400:	2000010c 	.word	0x2000010c
 8002404:	20000110 	.word	0x20000110

08002408 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002408:	b5b0      	push	{r4, r5, r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	603a      	str	r2, [r7, #0]
 8002412:	80fb      	strh	r3, [r7, #6]
 8002414:	460b      	mov	r3, r1
 8002416:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <BSP_LCD_DrawPixel+0x88>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <BSP_LCD_DrawPixel+0x8c>)
 800241e:	2134      	movs	r1, #52	; 0x34
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	3348      	adds	r3, #72	; 0x48
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d116      	bne.n	800245c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <BSP_LCD_DrawPixel+0x88>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a18      	ldr	r2, [pc, #96]	; (8002494 <BSP_LCD_DrawPixel+0x8c>)
 8002434:	2134      	movs	r1, #52	; 0x34
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	4413      	add	r3, r2
 800243c:	335c      	adds	r3, #92	; 0x5c
 800243e:	681c      	ldr	r4, [r3, #0]
 8002440:	88bd      	ldrh	r5, [r7, #4]
 8002442:	f7ff fdc9 	bl	8001fd8 <BSP_LCD_GetXSize>
 8002446:	4603      	mov	r3, r0
 8002448:	fb03 f205 	mul.w	r2, r3, r5
 800244c:	88fb      	ldrh	r3, [r7, #6]
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4423      	add	r3, r4
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	b292      	uxth	r2, r2
 8002458:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800245a:	e015      	b.n	8002488 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <BSP_LCD_DrawPixel+0x88>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0c      	ldr	r2, [pc, #48]	; (8002494 <BSP_LCD_DrawPixel+0x8c>)
 8002462:	2134      	movs	r1, #52	; 0x34
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4413      	add	r3, r2
 800246a:	335c      	adds	r3, #92	; 0x5c
 800246c:	681c      	ldr	r4, [r3, #0]
 800246e:	88bd      	ldrh	r5, [r7, #4]
 8002470:	f7ff fdb2 	bl	8001fd8 <BSP_LCD_GetXSize>
 8002474:	4603      	mov	r3, r0
 8002476:	fb03 f205 	mul.w	r2, r3, r5
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4423      	add	r3, r4
 8002482:	461a      	mov	r2, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	6013      	str	r3, [r2, #0]
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bdb0      	pop	{r4, r5, r7, pc}
 8002490:	2000010c 	.word	0x2000010c
 8002494:	2000410c 	.word	0x2000410c

08002498 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b08b      	sub	sp, #44	; 0x2c
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	2300      	movs	r3, #0
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	330a      	adds	r3, #10
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	330b      	adds	r3, #11
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	330c      	adds	r3, #12
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	041b      	lsls	r3, r3, #16
 80024d2:	441a      	add	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	330d      	adds	r3, #13
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	061b      	lsls	r3, r3, #24
 80024dc:	4413      	add	r3, r2
 80024de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3312      	adds	r3, #18
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3313      	adds	r3, #19
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	441a      	add	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3314      	adds	r3, #20
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	441a      	add	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3315      	adds	r3, #21
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	061b      	lsls	r3, r3, #24
 8002504:	4413      	add	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3316      	adds	r3, #22
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3317      	adds	r3, #23
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	021b      	lsls	r3, r3, #8
 8002518:	441a      	add	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3318      	adds	r3, #24
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	441a      	add	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3319      	adds	r3, #25
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	061b      	lsls	r3, r3, #24
 800252c:	4413      	add	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	331c      	adds	r3, #28
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	331d      	adds	r3, #29
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	4413      	add	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <BSP_LCD_DrawBitmap+0x15c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2b      	ldr	r2, [pc, #172]	; (80025f8 <BSP_LCD_DrawBitmap+0x160>)
 800254a:	2134      	movs	r1, #52	; 0x34
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	681c      	ldr	r4, [r3, #0]
 8002556:	f7ff fd3f 	bl	8001fd8 <BSP_LCD_GetXSize>
 800255a:	4602      	mov	r2, r0
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	fb03 f202 	mul.w	r2, r3, r2
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4423      	add	r3, r4
 800256a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	3b20      	subs	r3, #32
 8002570:	2b07      	cmp	r3, #7
 8002572:	d802      	bhi.n	800257a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002574:	2300      	movs	r3, #0
 8002576:	61fb      	str	r3, [r7, #28]
 8002578:	e008      	b.n	800258c <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	3b10      	subs	r3, #16
 800257e:	2b07      	cmp	r3, #7
 8002580:	d802      	bhi.n	8002588 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002582:	2302      	movs	r3, #2
 8002584:	61fb      	str	r3, [r7, #28]
 8002586:	e001      	b.n	800258c <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002588:	2301      	movs	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3b01      	subs	r3, #1
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	08d2      	lsrs	r2, r2, #3
 800259a:	fb02 f203 	mul.w	r2, r2, r3
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	4413      	add	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	e018      	b.n	80025e0 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80025ae:	6a39      	ldr	r1, [r7, #32]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fa95 	bl	8002ae4 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80025ba:	f7ff fd0d 	bl	8001fd8 <BSP_LCD_GetXSize>
 80025be:	4603      	mov	r3, r0
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	6a3a      	ldr	r2, [r7, #32]
 80025c4:	4413      	add	r3, r2
 80025c6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	08db      	lsrs	r3, r3, #3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	fb02 f303 	mul.w	r3, r2, r3
 80025d2:	425b      	negs	r3, r3
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80025da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025dc:	3301      	adds	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d3e2      	bcc.n	80025ae <BSP_LCD_DrawBitmap+0x116>
  } 
}
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	372c      	adds	r7, #44	; 0x2c
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	2000010c 	.word	0x2000010c
 80025f8:	2000410c 	.word	0x2000410c

080025fc <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80025fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002600:	b086      	sub	sp, #24
 8002602:	af02      	add	r7, sp, #8
 8002604:	4604      	mov	r4, r0
 8002606:	4608      	mov	r0, r1
 8002608:	4611      	mov	r1, r2
 800260a:	461a      	mov	r2, r3
 800260c:	4623      	mov	r3, r4
 800260e:	80fb      	strh	r3, [r7, #6]
 8002610:	4603      	mov	r3, r0
 8002612:	80bb      	strh	r3, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
 8002618:	4613      	mov	r3, r2
 800261a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <BSP_LCD_FillRect+0xe8>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4930      	ldr	r1, [pc, #192]	; (80026e8 <BSP_LCD_FillRect+0xec>)
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fd68 	bl	8002108 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002638:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <BSP_LCD_FillRect+0xe8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <BSP_LCD_FillRect+0xf0>)
 800263e:	2134      	movs	r1, #52	; 0x34
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	4413      	add	r3, r2
 8002646:	3348      	adds	r3, #72	; 0x48
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d114      	bne.n	8002678 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800264e:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <BSP_LCD_FillRect+0xe8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a26      	ldr	r2, [pc, #152]	; (80026ec <BSP_LCD_FillRect+0xf0>)
 8002654:	2134      	movs	r1, #52	; 0x34
 8002656:	fb01 f303 	mul.w	r3, r1, r3
 800265a:	4413      	add	r3, r2
 800265c:	335c      	adds	r3, #92	; 0x5c
 800265e:	681c      	ldr	r4, [r3, #0]
 8002660:	f7ff fcba 	bl	8001fd8 <BSP_LCD_GetXSize>
 8002664:	4602      	mov	r2, r0
 8002666:	88bb      	ldrh	r3, [r7, #4]
 8002668:	fb03 f202 	mul.w	r2, r3, r2
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	4413      	add	r3, r2
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4423      	add	r3, r4
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	e013      	b.n	80026a0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <BSP_LCD_FillRect+0xe8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1b      	ldr	r2, [pc, #108]	; (80026ec <BSP_LCD_FillRect+0xf0>)
 800267e:	2134      	movs	r1, #52	; 0x34
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	4413      	add	r3, r2
 8002686:	335c      	adds	r3, #92	; 0x5c
 8002688:	681c      	ldr	r4, [r3, #0]
 800268a:	f7ff fca5 	bl	8001fd8 <BSP_LCD_GetXSize>
 800268e:	4602      	mov	r2, r0
 8002690:	88bb      	ldrh	r3, [r7, #4]
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4423      	add	r3, r4
 800269e:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <BSP_LCD_FillRect+0xe8>)
 80026a2:	681c      	ldr	r4, [r3, #0]
 80026a4:	68fd      	ldr	r5, [r7, #12]
 80026a6:	887e      	ldrh	r6, [r7, #2]
 80026a8:	f8b7 8000 	ldrh.w	r8, [r7]
 80026ac:	f7ff fc94 	bl	8001fd8 <BSP_LCD_GetXSize>
 80026b0:	4602      	mov	r2, r0
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	1ad1      	subs	r1, r2, r3
 80026b6:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <BSP_LCD_FillRect+0xe8>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	480b      	ldr	r0, [pc, #44]	; (80026e8 <BSP_LCD_FillRect+0xec>)
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4403      	add	r3, r0
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	9100      	str	r1, [sp, #0]
 80026cc:	4643      	mov	r3, r8
 80026ce:	4632      	mov	r2, r6
 80026d0:	4629      	mov	r1, r5
 80026d2:	4620      	mov	r0, r4
 80026d4:	f000 f9ba 	bl	8002a4c <LL_FillBuffer>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026e2:	bf00      	nop
 80026e4:	2000010c 	.word	0x2000010c
 80026e8:	20000110 	.word	0x20000110
 80026ec:	2000410c 	.word	0x2000410c

080026f0 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b090      	sub	sp, #64	; 0x40
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80026fa:	4b64      	ldr	r3, [pc, #400]	; (800288c <BSP_LCD_MspInit+0x19c>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fe:	4a63      	ldr	r2, [pc, #396]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002700:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002704:	6453      	str	r3, [r2, #68]	; 0x44
 8002706:	4b61      	ldr	r3, [pc, #388]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002710:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002712:	4b5e      	ldr	r3, [pc, #376]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a5d      	ldr	r2, [pc, #372]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002718:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800272a:	4b58      	ldr	r3, [pc, #352]	; (800288c <BSP_LCD_MspInit+0x19c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a57      	ldr	r2, [pc, #348]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002730:	f043 0310 	orr.w	r3, r3, #16
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b55      	ldr	r3, [pc, #340]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	623b      	str	r3, [r7, #32]
 8002740:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002742:	4b52      	ldr	r3, [pc, #328]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a51      	ldr	r2, [pc, #324]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b4f      	ldr	r3, [pc, #316]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	61fb      	str	r3, [r7, #28]
 8002758:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800275a:	4b4c      	ldr	r3, [pc, #304]	; (800288c <BSP_LCD_MspInit+0x19c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a4b      	ldr	r2, [pc, #300]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b49      	ldr	r3, [pc, #292]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002772:	4b46      	ldr	r3, [pc, #280]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a45      	ldr	r2, [pc, #276]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b43      	ldr	r3, [pc, #268]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <BSP_LCD_MspInit+0x19c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a3f      	ldr	r2, [pc, #252]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b3d      	ldr	r3, [pc, #244]	; (800288c <BSP_LCD_MspInit+0x19c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80027a2:	4b3a      	ldr	r3, [pc, #232]	; (800288c <BSP_LCD_MspInit+0x19c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a39      	ldr	r2, [pc, #228]	; (800288c <BSP_LCD_MspInit+0x19c>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <BSP_LCD_MspInit+0x19c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80027ba:	4b34      	ldr	r3, [pc, #208]	; (800288c <BSP_LCD_MspInit+0x19c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a33      	ldr	r2, [pc, #204]	; (800288c <BSP_LCD_MspInit+0x19c>)
 80027c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b31      	ldr	r3, [pc, #196]	; (800288c <BSP_LCD_MspInit+0x19c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80027d2:	2310      	movs	r3, #16
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80027de:	2302      	movs	r3, #2
 80027e0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80027e2:	230e      	movs	r3, #14
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80027e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ea:	4619      	mov	r1, r3
 80027ec:	4828      	ldr	r0, [pc, #160]	; (8002890 <BSP_LCD_MspInit+0x1a0>)
 80027ee:	f001 fa79 	bl	8003ce4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80027f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80027f8:	2302      	movs	r3, #2
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80027fc:	2309      	movs	r3, #9
 80027fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002804:	4619      	mov	r1, r3
 8002806:	4823      	ldr	r0, [pc, #140]	; (8002894 <BSP_LCD_MspInit+0x1a4>)
 8002808:	f001 fa6c 	bl	8003ce4 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 800280c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002816:	230e      	movs	r3, #14
 8002818:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800281a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800281e:	4619      	mov	r1, r3
 8002820:	481d      	ldr	r0, [pc, #116]	; (8002898 <BSP_LCD_MspInit+0x1a8>)
 8002822:	f001 fa5f 	bl	8003ce4 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002826:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002830:	230e      	movs	r3, #14
 8002832:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002834:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002838:	4619      	mov	r1, r3
 800283a:	4818      	ldr	r0, [pc, #96]	; (800289c <BSP_LCD_MspInit+0x1ac>)
 800283c:	f001 fa52 	bl	8003ce4 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002840:	23f7      	movs	r3, #247	; 0xf7
 8002842:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002848:	230e      	movs	r3, #14
 800284a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 800284c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002850:	4619      	mov	r1, r3
 8002852:	4813      	ldr	r0, [pc, #76]	; (80028a0 <BSP_LCD_MspInit+0x1b0>)
 8002854:	f001 fa46 	bl	8003ce4 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800285e:	2301      	movs	r3, #1
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002866:	4619      	mov	r1, r3
 8002868:	480b      	ldr	r0, [pc, #44]	; (8002898 <BSP_LCD_MspInit+0x1a8>)
 800286a:	f001 fa3b 	bl	8003ce4 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800286e:	2308      	movs	r3, #8
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002872:	2301      	movs	r3, #1
 8002874:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800287a:	4619      	mov	r1, r3
 800287c:	4808      	ldr	r0, [pc, #32]	; (80028a0 <BSP_LCD_MspInit+0x1b0>)
 800287e:	f001 fa31 	bl	8003ce4 <HAL_GPIO_Init>
}
 8002882:	bf00      	nop
 8002884:	3740      	adds	r7, #64	; 0x40
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40021000 	.word	0x40021000
 8002894:	40021800 	.word	0x40021800
 8002898:	40022000 	.word	0x40022000
 800289c:	40022400 	.word	0x40022400
 80028a0:	40022800 	.word	0x40022800

080028a4 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <BSP_LCD_ClockConfig+0x34>)
 80028b0:	2208      	movs	r2, #8
 80028b2:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <BSP_LCD_ClockConfig+0x34>)
 80028b6:	22c0      	movs	r2, #192	; 0xc0
 80028b8:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <BSP_LCD_ClockConfig+0x34>)
 80028bc:	2205      	movs	r2, #5
 80028be:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <BSP_LCD_ClockConfig+0x34>)
 80028c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80028c8:	4803      	ldr	r0, [pc, #12]	; (80028d8 <BSP_LCD_ClockConfig+0x34>)
 80028ca:	f003 faeb 	bl	8005ea4 <HAL_RCCEx_PeriphCLKConfig>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000128 	.word	0x20000128

080028dc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	603a      	str	r2, [r7, #0]
 80028e6:	80fb      	strh	r3, [r7, #6]
 80028e8:	460b      	mov	r3, r1
 80028ea:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	2300      	movs	r3, #0
 80028f2:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80028f4:	4b53      	ldr	r3, [pc, #332]	; (8002a44 <DrawChar+0x168>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4953      	ldr	r1, [pc, #332]	; (8002a48 <DrawChar+0x16c>)
 80028fa:	4613      	mov	r3, r2
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3308      	adds	r3, #8
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	88db      	ldrh	r3, [r3, #6]
 800290a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 800290c:	4b4d      	ldr	r3, [pc, #308]	; (8002a44 <DrawChar+0x168>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	494d      	ldr	r1, [pc, #308]	; (8002a48 <DrawChar+0x16c>)
 8002912:	4613      	mov	r3, r2
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3308      	adds	r3, #8
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	889b      	ldrh	r3, [r3, #4]
 8002922:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002924:	8a3b      	ldrh	r3, [r7, #16]
 8002926:	3307      	adds	r3, #7
 8002928:	2b00      	cmp	r3, #0
 800292a:	da00      	bge.n	800292e <DrawChar+0x52>
 800292c:	3307      	adds	r3, #7
 800292e:	10db      	asrs	r3, r3, #3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	b2da      	uxtb	r2, r3
 8002936:	8a3b      	ldrh	r3, [r7, #16]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	e076      	b.n	8002a32 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002944:	8a3b      	ldrh	r3, [r7, #16]
 8002946:	3307      	adds	r3, #7
 8002948:	2b00      	cmp	r3, #0
 800294a:	da00      	bge.n	800294e <DrawChar+0x72>
 800294c:	3307      	adds	r3, #7
 800294e:	10db      	asrs	r3, r3, #3
 8002950:	461a      	mov	r2, r3
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fb03 f302 	mul.w	r3, r3, r2
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4413      	add	r3, r2
 800295c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800295e:	8a3b      	ldrh	r3, [r7, #16]
 8002960:	3307      	adds	r3, #7
 8002962:	2b00      	cmp	r3, #0
 8002964:	da00      	bge.n	8002968 <DrawChar+0x8c>
 8002966:	3307      	adds	r3, #7
 8002968:	10db      	asrs	r3, r3, #3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d002      	beq.n	8002974 <DrawChar+0x98>
 800296e:	2b02      	cmp	r3, #2
 8002970:	d004      	beq.n	800297c <DrawChar+0xa0>
 8002972:	e00c      	b.n	800298e <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	617b      	str	r3, [r7, #20]
      break;
 800297a:	e016      	b.n	80029aa <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	021b      	lsls	r3, r3, #8
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	3201      	adds	r2, #1
 8002986:	7812      	ldrb	r2, [r2, #0]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
      break;
 800298c:	e00d      	b.n	80029aa <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	041a      	lsls	r2, r3, #16
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3301      	adds	r3, #1
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	4313      	orrs	r3, r2
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	3202      	adds	r2, #2
 80029a2:	7812      	ldrb	r2, [r2, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
      break;
 80029a8:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	e036      	b.n	8002a1e <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80029b0:	8a3a      	ldrh	r2, [r7, #16]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	1ad2      	subs	r2, r2, r3
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	4413      	add	r3, r2
 80029ba:	3b01      	subs	r3, #1
 80029bc:	2201      	movs	r2, #1
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d012      	beq.n	80029f2 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	4413      	add	r3, r2
 80029d4:	b298      	uxth	r0, r3
 80029d6:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <DrawChar+0x168>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	491b      	ldr	r1, [pc, #108]	; (8002a48 <DrawChar+0x16c>)
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	88bb      	ldrh	r3, [r7, #4]
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7ff fd0c 	bl	8002408 <BSP_LCD_DrawPixel>
 80029f0:	e012      	b.n	8002a18 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	4413      	add	r3, r2
 80029fa:	b298      	uxth	r0, r3
 80029fc:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <DrawChar+0x168>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4911      	ldr	r1, [pc, #68]	; (8002a48 <DrawChar+0x16c>)
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	88bb      	ldrh	r3, [r7, #4]
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7ff fcf8 	bl	8002408 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	8a3b      	ldrh	r3, [r7, #16]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3c4      	bcc.n	80029b0 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8002a26:	88bb      	ldrh	r3, [r7, #4]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	8a7b      	ldrh	r3, [r7, #18]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d384      	bcc.n	8002944 <DrawChar+0x68>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	3720      	adds	r7, #32
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000010c 	.word	0x2000010c
 8002a48:	20000110 	.word	0x20000110

08002a4c <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002a5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a60:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <LL_FillBuffer+0x8c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1d      	ldr	r2, [pc, #116]	; (8002adc <LL_FillBuffer+0x90>)
 8002a68:	2134      	movs	r1, #52	; 0x34
 8002a6a:	fb01 f303 	mul.w	r3, r1, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	3348      	adds	r3, #72	; 0x48
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d103      	bne.n	8002a80 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	e002      	b.n	8002a86 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002a80:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8002a86:	4a13      	ldr	r2, [pc, #76]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002a8e:	4a14      	ldr	r2, [pc, #80]	; (8002ae0 <LL_FillBuffer+0x94>)
 8002a90:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002a92:	4810      	ldr	r0, [pc, #64]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002a94:	f000 fd7c 	bl	8003590 <HAL_DMA2D_Init>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d115      	bne.n	8002aca <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8002a9e:	68f9      	ldr	r1, [r7, #12]
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002aa2:	f000 ffe3 	bl	8003a6c <HAL_DMA2D_ConfigLayer>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10e      	bne.n	8002aca <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002aac:	68ba      	ldr	r2, [r7, #8]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69f9      	ldr	r1, [r7, #28]
 8002ab6:	4807      	ldr	r0, [pc, #28]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002ab8:	f000 fdb4 	bl	8003624 <HAL_DMA2D_Start>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002ac2:	210a      	movs	r1, #10
 8002ac4:	4803      	ldr	r0, [pc, #12]	; (8002ad4 <LL_FillBuffer+0x88>)
 8002ac6:	f000 fdd8 	bl	800367a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200000cc 	.word	0x200000cc
 8002ad8:	2000010c 	.word	0x2000010c
 8002adc:	2000410c 	.word	0x2000410c
 8002ae0:	4002b000 	.word	0x4002b000

08002ae4 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af02      	add	r7, sp, #8
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
 8002af0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002af4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002af8:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8002b06:	4b17      	ldr	r3, [pc, #92]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b0e:	22ff      	movs	r2, #255	; 0xff
 8002b10:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8002b12:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8002b18:	4b12      	ldr	r3, [pc, #72]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b20:	4a11      	ldr	r2, [pc, #68]	; (8002b68 <LL_ConvertLineToARGB8888+0x84>)
 8002b22:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8002b24:	480f      	ldr	r0, [pc, #60]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b26:	f000 fd33 	bl	8003590 <HAL_DMA2D_Init>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d115      	bne.n	8002b5c <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8002b30:	2101      	movs	r1, #1
 8002b32:	480c      	ldr	r0, [pc, #48]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b34:	f000 ff9a 	bl	8003a6c <HAL_DMA2D_ConfigLayer>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10e      	bne.n	8002b5c <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8002b3e:	68f9      	ldr	r1, [r7, #12]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	2301      	movs	r3, #1
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4806      	ldr	r0, [pc, #24]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b4a:	f000 fd6b 	bl	8003624 <HAL_DMA2D_Start>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d103      	bne.n	8002b5c <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8002b54:	210a      	movs	r1, #10
 8002b56:	4803      	ldr	r0, [pc, #12]	; (8002b64 <LL_ConvertLineToARGB8888+0x80>)
 8002b58:	f000 fd8f 	bl	800367a <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200000cc 	.word	0x200000cc
 8002b68:	4002b000 	.word	0x4002b000

08002b6c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b70:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002b72:	4a2a      	ldr	r2, [pc, #168]	; (8002c1c <BSP_SDRAM_Init+0xb0>)
 8002b74:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002b76:	4b2a      	ldr	r3, [pc, #168]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002b78:	2202      	movs	r2, #2
 8002b7a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002b7c:	4b28      	ldr	r3, [pc, #160]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002b7e:	2207      	movs	r2, #7
 8002b80:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002b82:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002b84:	2204      	movs	r2, #4
 8002b86:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002b8a:	2207      	movs	r2, #7
 8002b8c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002b8e:	4b24      	ldr	r3, [pc, #144]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002b90:	2202      	movs	r2, #2
 8002b92:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002b96:	2202      	movs	r2, #2
 8002b98:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002ba0:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bae:	2204      	movs	r2, #4
 8002bb0:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002bb2:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bb4:	2210      	movs	r2, #16
 8002bb6:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bba:	2240      	movs	r2, #64	; 0x40
 8002bbc:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8002bbe:	4b16      	ldr	r3, [pc, #88]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bc4:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bd2:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002bd4:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002bdc:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002be2:	2100      	movs	r1, #0
 8002be4:	480c      	ldr	r0, [pc, #48]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002be6:	f000 f87f 	bl	8002ce8 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002bea:	490d      	ldr	r1, [pc, #52]	; (8002c20 <BSP_SDRAM_Init+0xb4>)
 8002bec:	480a      	ldr	r0, [pc, #40]	; (8002c18 <BSP_SDRAM_Init+0xac>)
 8002bee:	f004 fa1f 	bl	8007030 <HAL_SDRAM_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <BSP_SDRAM_Init+0xb8>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	e002      	b.n	8002c06 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <BSP_SDRAM_Init+0xb8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002c06:	f240 6003 	movw	r0, #1539	; 0x603
 8002c0a:	f000 f80d 	bl	8002c28 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002c0e:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <BSP_SDRAM_Init+0xb8>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200041b4 	.word	0x200041b4
 8002c1c:	a0000140 	.word	0xa0000140
 8002c20:	200001ac 	.word	0x200001ac
 8002c24:	2000004c 	.word	0x2000004c

08002c28 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c3a:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c40:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c50:	4923      	ldr	r1, [pc, #140]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c52:	4824      	ldr	r0, [pc, #144]	; (8002ce4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c54:	f004 fa20 	bl	8007098 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f000 f9a9 	bl	8002fb0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002c5e:	4b20      	ldr	r3, [pc, #128]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c60:	2202      	movs	r2, #2
 8002c62:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c64:	4b1e      	ldr	r3, [pc, #120]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c66:	2210      	movs	r2, #16
 8002c68:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c70:	4b1b      	ldr	r3, [pc, #108]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c7a:	4919      	ldr	r1, [pc, #100]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c7c:	4819      	ldr	r0, [pc, #100]	; (8002ce4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c7e:	f004 fa0b 	bl	8007098 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c82:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c84:	2203      	movs	r2, #3
 8002c86:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c88:	4b15      	ldr	r3, [pc, #84]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002c8e:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c90:	2208      	movs	r2, #8
 8002c92:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c94:	4b12      	ldr	r3, [pc, #72]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9e:	4910      	ldr	r1, [pc, #64]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ca0:	4810      	ldr	r0, [pc, #64]	; (8002ce4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ca2:	f004 f9f9 	bl	8007098 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002ca6:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002caa:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cae:	2204      	movs	r2, #4
 8002cb0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cb4:	2210      	movs	r2, #16
 8002cb6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002cb8:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a07      	ldr	r2, [pc, #28]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cc2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cc8:	4905      	ldr	r1, [pc, #20]	; (8002ce0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002cca:	4806      	ldr	r0, [pc, #24]	; (8002ce4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ccc:	f004 f9e4 	bl	8007098 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4804      	ldr	r0, [pc, #16]	; (8002ce4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002cd4:	f004 fa0b 	bl	80070ee <HAL_SDRAM_ProgramRefreshRate>
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	200001c8 	.word	0x200001c8
 8002ce4:	200041b4 	.word	0x200041b4

08002ce8 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b090      	sub	sp, #64	; 0x40
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002cf2:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf6:	4a6f      	ldr	r2, [pc, #444]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6393      	str	r3, [r2, #56]	; 0x38
 8002cfe:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d14:	6313      	str	r3, [r2, #48]	; 0x30
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d22:	4b64      	ldr	r3, [pc, #400]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a63      	ldr	r2, [pc, #396]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d28:	f043 0304 	orr.w	r3, r3, #4
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b61      	ldr	r3, [pc, #388]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	623b      	str	r3, [r7, #32]
 8002d38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d3a:	4b5e      	ldr	r3, [pc, #376]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4a5d      	ldr	r2, [pc, #372]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6313      	str	r3, [r2, #48]	; 0x30
 8002d46:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d52:	4b58      	ldr	r3, [pc, #352]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	4a57      	ldr	r2, [pc, #348]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d58:	f043 0310 	orr.w	r3, r3, #16
 8002d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5e:	4b55      	ldr	r3, [pc, #340]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d6a:	4b52      	ldr	r3, [pc, #328]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	4a51      	ldr	r2, [pc, #324]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d70:	f043 0320 	orr.w	r3, r3, #32
 8002d74:	6313      	str	r3, [r2, #48]	; 0x30
 8002d76:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	617b      	str	r3, [r7, #20]
 8002d80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d82:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	4a4b      	ldr	r2, [pc, #300]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d8e:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	4a45      	ldr	r2, [pc, #276]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da4:	6313      	str	r3, [r2, #48]	; 0x30
 8002da6:	4b43      	ldr	r3, [pc, #268]	; (8002eb4 <BSP_SDRAM_MspInit+0x1cc>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002db2:	2302      	movs	r3, #2
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002dbe:	230c      	movs	r3, #12
 8002dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8002dc2:	2308      	movs	r3, #8
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8002dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dca:	4619      	mov	r1, r3
 8002dcc:	483a      	ldr	r0, [pc, #232]	; (8002eb8 <BSP_SDRAM_MspInit+0x1d0>)
 8002dce:	f000 ff89 	bl	8003ce4 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8002dd2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4837      	ldr	r0, [pc, #220]	; (8002ebc <BSP_SDRAM_MspInit+0x1d4>)
 8002de0:	f000 ff80 	bl	8003ce4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002de4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002de8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002dea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dee:	4619      	mov	r1, r3
 8002df0:	4833      	ldr	r0, [pc, #204]	; (8002ec0 <BSP_SDRAM_MspInit+0x1d8>)
 8002df2:	f000 ff77 	bl	8003ce4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002df6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e00:	4619      	mov	r1, r3
 8002e02:	4830      	ldr	r0, [pc, #192]	; (8002ec4 <BSP_SDRAM_MspInit+0x1dc>)
 8002e04:	f000 ff6e 	bl	8003ce4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8002e08:	f248 1333 	movw	r3, #33075	; 0x8133
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002e0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e12:	4619      	mov	r1, r3
 8002e14:	482c      	ldr	r0, [pc, #176]	; (8002ec8 <BSP_SDRAM_MspInit+0x1e0>)
 8002e16:	f000 ff65 	bl	8003ce4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8002e1a:	2328      	movs	r3, #40	; 0x28
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002e1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002e22:	4619      	mov	r1, r3
 8002e24:	4829      	ldr	r0, [pc, #164]	; (8002ecc <BSP_SDRAM_MspInit+0x1e4>)
 8002e26:	f000 ff5d 	bl	8003ce4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e32:	2280      	movs	r2, #128	; 0x80
 8002e34:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002e36:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e3c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002e3e:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e44:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e4c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e54:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002e56:	4b1e      	ldr	r3, [pc, #120]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e5c:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e62:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <BSP_SDRAM_MspInit+0x1ec>)
 8002e80:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e86:	631a      	str	r2, [r3, #48]	; 0x30
 8002e88:	4a11      	ldr	r2, [pc, #68]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002e8e:	4810      	ldr	r0, [pc, #64]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e90:	f000 fa6e 	bl	8003370 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002e94:	480e      	ldr	r0, [pc, #56]	; (8002ed0 <BSP_SDRAM_MspInit+0x1e8>)
 8002e96:	f000 f9bd 	bl	8003214 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	210f      	movs	r1, #15
 8002e9e:	2038      	movs	r0, #56	; 0x38
 8002ea0:	f000 f981 	bl	80031a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002ea4:	2038      	movs	r0, #56	; 0x38
 8002ea6:	f000 f99a 	bl	80031de <HAL_NVIC_EnableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3740      	adds	r7, #64	; 0x40
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	40020800 	.word	0x40020800
 8002ebc:	40020c00 	.word	0x40020c00
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40021400 	.word	0x40021400
 8002ec8:	40021800 	.word	0x40021800
 8002ecc:	40021c00 	.word	0x40021c00
 8002ed0:	200001d8 	.word	0x200001d8
 8002ed4:	40026410 	.word	0x40026410

08002ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_Init+0x34>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <HAL_Init+0x34>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ee6:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee8:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_Init+0x34>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a07      	ldr	r2, [pc, #28]	; (8002f0c <HAL_Init+0x34>)
 8002eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef4:	2003      	movs	r0, #3
 8002ef6:	f000 f94b 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002efa:	200f      	movs	r0, #15
 8002efc:	f000 f808 	bl	8002f10 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002f00:	f006 ff10 	bl	8009d24 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023c00 	.word	0x40023c00

08002f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f18:	4b12      	ldr	r3, [pc, #72]	; (8002f64 <HAL_InitTick+0x54>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b12      	ldr	r3, [pc, #72]	; (8002f68 <HAL_InitTick+0x58>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f963 	bl	80031fa <HAL_SYSTICK_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00e      	b.n	8002f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0f      	cmp	r3, #15
 8002f42:	d80a      	bhi.n	8002f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f44:	2200      	movs	r2, #0
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f000 f92b 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f50:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <HAL_InitTick+0x5c>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	20000058 	.word	0x20000058
 8002f68:	20000054 	.word	0x20000054
 8002f6c:	20000050 	.word	0x20000050

08002f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_IncTick+0x20>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x24>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_IncTick+0x24>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000054 	.word	0x20000054
 8002f94:	200041e8 	.word	0x200041e8

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_GetTick+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	200041e8 	.word	0x200041e8

08002fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff ffee 	bl	8002f98 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d005      	beq.n	8002fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_Delay+0x44>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd6:	bf00      	nop
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d8f7      	bhi.n	8002fd8 <HAL_Delay+0x28>
  {
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000054 	.word	0x20000054

08002ff8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <NVIC_SetPriorityGrouping+0x40>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003014:	4013      	ands	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003020:	4b06      	ldr	r3, [pc, #24]	; (800303c <NVIC_SetPriorityGrouping+0x44>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <NVIC_SetPriorityGrouping+0x40>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00
 800303c:	05fa0000 	.word	0x05fa0000

08003040 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003044:	4b04      	ldr	r3, [pc, #16]	; (8003058 <NVIC_GetPriorityGrouping+0x18>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	0a1b      	lsrs	r3, r3, #8
 800304a:	f003 0307 	and.w	r3, r3, #7
}
 800304e:	4618      	mov	r0, r3
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000ed00 	.word	0xe000ed00

0800305c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	; (800308c <NVIC_EnableIRQ+0x30>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	da0b      	bge.n	80030bc <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	; (80030dc <NVIC_SetPriority+0x4c>)
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	3b04      	subs	r3, #4
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ba:	e009      	b.n	80030d0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4907      	ldr	r1, [pc, #28]	; (80030e0 <NVIC_SetPriority+0x50>)
 80030c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	b2d2      	uxtb	r2, r2
 80030ca:	440b      	add	r3, r1
 80030cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00
 80030e0:	e000e100 	.word	0xe000e100

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	; 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	; (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff2d 	bl	8002ff8 <NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff42 	bl	8003040 <NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff35 	bl	800305c <NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff feba 	bl	8002f98 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e099      	b.n	8003364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003250:	e00f      	b.n	8003272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003252:	f7ff fea1 	bl	8002f98 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b05      	cmp	r3, #5
 800325e:	d908      	bls.n	8003272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2203      	movs	r2, #3
 800326a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e078      	b.n	8003364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e8      	bne.n	8003252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4b38      	ldr	r3, [pc, #224]	; (800336c <HAL_DMA_Init+0x158>)
 800328c:	4013      	ands	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800329e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d107      	bne.n	80032dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f023 0307 	bic.w	r3, r3, #7
 80032f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	2b04      	cmp	r3, #4
 8003304:	d117      	bne.n	8003336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8bd 	bl	8003498 <DMA_CheckFifoParam>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2240      	movs	r2, #64	; 0x40
 8003328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003332:	2301      	movs	r3, #1
 8003334:	e016      	b.n	8003364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f874 	bl	800342c <DMA_CalcBaseAndBitshift>
 8003344:	4603      	mov	r3, r0
 8003346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	223f      	movs	r2, #63	; 0x3f
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	f010803f 	.word	0xf010803f

08003370 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e050      	b.n	8003424 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d101      	bne.n	8003392 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
 8003390:	e048      	b.n	8003424 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0201 	bic.w	r2, r2, #1
 80033a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2200      	movs	r2, #0
 80033b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2221      	movs	r2, #33	; 0x21
 80033d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 f82a 	bl	800342c <DMA_CalcBaseAndBitshift>
 80033d8:	4603      	mov	r3, r0
 80033da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e0:	223f      	movs	r2, #63	; 0x3f
 80033e2:	409a      	lsls	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	3b10      	subs	r3, #16
 800343c:	4a13      	ldr	r2, [pc, #76]	; (800348c <DMA_CalcBaseAndBitshift+0x60>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	091b      	lsrs	r3, r3, #4
 8003444:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <DMA_CalcBaseAndBitshift+0x64>)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4413      	add	r3, r2
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d908      	bls.n	800346c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <DMA_CalcBaseAndBitshift+0x68>)
 8003462:	4013      	ands	r3, r2
 8003464:	1d1a      	adds	r2, r3, #4
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	659a      	str	r2, [r3, #88]	; 0x58
 800346a:	e006      	b.n	800347a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <DMA_CalcBaseAndBitshift+0x68>)
 8003474:	4013      	ands	r3, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	aaaaaaab 	.word	0xaaaaaaab
 8003490:	0800d2c0 	.word	0x0800d2c0
 8003494:	fffffc00 	.word	0xfffffc00

08003498 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a0:	2300      	movs	r3, #0
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11f      	bne.n	80034f2 <DMA_CheckFifoParam+0x5a>
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	2b03      	cmp	r3, #3
 80034b6:	d856      	bhi.n	8003566 <DMA_CheckFifoParam+0xce>
 80034b8:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <DMA_CheckFifoParam+0x28>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034d1 	.word	0x080034d1
 80034c4:	080034e3 	.word	0x080034e3
 80034c8:	080034d1 	.word	0x080034d1
 80034cc:	08003567 	.word	0x08003567
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d046      	beq.n	800356a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034e0:	e043      	b.n	800356a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80034ea:	d140      	bne.n	800356e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f0:	e03d      	b.n	800356e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fa:	d121      	bne.n	8003540 <DMA_CheckFifoParam+0xa8>
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	2b03      	cmp	r3, #3
 8003500:	d837      	bhi.n	8003572 <DMA_CheckFifoParam+0xda>
 8003502:	a201      	add	r2, pc, #4	; (adr r2, 8003508 <DMA_CheckFifoParam+0x70>)
 8003504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003508:	08003519 	.word	0x08003519
 800350c:	0800351f 	.word	0x0800351f
 8003510:	08003519 	.word	0x08003519
 8003514:	08003531 	.word	0x08003531
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e030      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d025      	beq.n	8003576 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800352e:	e022      	b.n	8003576 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003538:	d11f      	bne.n	800357a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800353e:	e01c      	b.n	800357a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b02      	cmp	r3, #2
 8003544:	d903      	bls.n	800354e <DMA_CheckFifoParam+0xb6>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b03      	cmp	r3, #3
 800354a:	d003      	beq.n	8003554 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800354c:	e018      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
      break;
 8003552:	e015      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00e      	beq.n	800357e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e00b      	b.n	800357e <DMA_CheckFifoParam+0xe6>
      break;
 8003566:	bf00      	nop
 8003568:	e00a      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 800356a:	bf00      	nop
 800356c:	e008      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 800356e:	bf00      	nop
 8003570:	e006      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;   
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <DMA_CheckFifoParam+0xe8>
      break;
 800357e:	bf00      	nop
    }
  } 
  
  return status; 
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop

08003590 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{ 
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e039      	b.n	8003616 <HAL_DMA2D_Init+0x86>
  assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));
  assert_param(IS_DMA2D_MODE(hdma2d->Init.Mode));
  assert_param(IS_DMA2D_CMODE(hdma2d->Init.ColorMode));
  assert_param(IS_DMA2D_OFFSET(hdma2d->Init.OutputOffset));

  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f006 fbd8 	bl	8009d6c <HAL_DMA2D_MspInit>
  }
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	f023 0107 	bic.w	r1, r3, #7
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/  
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <HAL_DMA2D_Init+0x90>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68d1      	ldr	r1, [r2, #12]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6812      	ldr	r2, [r2, #0]
 8003602:	430b      	orrs	r3, r1
 8003604:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_RBS,(hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos));
#endif /* DMA2D_OPFCCR_RBS */
  

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	ffffc000 	.word	0xffffc000

08003624 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));
  
  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003638:	2b01      	cmp	r3, #1
 800363a:	d101      	bne.n	8003640 <HAL_DMA2D_Start+0x1c>
 800363c:	2302      	movs	r3, #2
 800363e:	e018      	b.n	8003672 <HAL_DMA2D_Start+0x4e>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 fa9c 	bl	8003b98 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D. 
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
  __IO uint32_t isrflags = 0x0;  
 8003688:	2300      	movs	r3, #0
 800368a:	60bb      	str	r3, [r7, #8]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d056      	beq.n	8003748 <HAL_DMA2D_PollForTransfer+0xce>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800369a:	f7ff fc7d 	bl	8002f98 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 80036a0:	e04b      	b.n	800373a <HAL_DMA2D_PollForTransfer+0xc0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d023      	beq.n	80036fc <HAL_DMA2D_PollForTransfer+0x82>
      {
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <HAL_DMA2D_PollForTransfer+0x50>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_DMA2D_PollForTransfer+0x66>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	f043 0201 	orr.w	r2, r3, #1
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2204      	movs	r2, #4
 80036ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0a2      	b.n	8003842 <HAL_DMA2D_PollForTransfer+0x1c8>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003702:	d01a      	beq.n	800373a <HAL_DMA2D_PollForTransfer+0xc0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d007      	beq.n	800371a <HAL_DMA2D_PollForTransfer+0xa0>
 800370a:	f7ff fc45 	bl	8002f98 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d20f      	bcs.n	800373a <HAL_DMA2D_PollForTransfer+0xc0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2203      	movs	r2, #3
 800372a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
         
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
           
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e083      	b.n	8003842 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d0ac      	beq.n	80036a2 <HAL_DMA2D_PollForTransfer+0x28>
        }
      }        
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_DMA2D_PollForTransfer+0xea>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f003 0320 	and.w	r3, r3, #32
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8003760:	2b00      	cmp	r3, #0
 8003762:	d061      	beq.n	8003828 <HAL_DMA2D_PollForTransfer+0x1ae>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003764:	f7ff fc18 	bl	8002f98 <HAL_GetTick>
 8003768:	60f8      	str	r0, [r7, #12]
   
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800376a:	e056      	b.n	800381a <HAL_DMA2D_PollForTransfer+0x1a0>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	60bb      	str	r3, [r7, #8]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800377a:	2b00      	cmp	r3, #0
 800377c:	d02e      	beq.n	80037dc <HAL_DMA2D_PollForTransfer+0x162>
      {      
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_DMA2D_PollForTransfer+0x11a>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378c:	f043 0204 	orr.w	r2, r3, #4
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	63da      	str	r2, [r3, #60]	; 0x3c
        }   
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <HAL_DMA2D_PollForTransfer+0x130>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a2:	f043 0202 	orr.w	r2, r3, #2
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_DMA2D_PollForTransfer+0x146>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	f043 0201 	orr.w	r2, r3, #1
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2229      	movs	r2, #41	; 0x29
 80037c6:	609a      	str	r2, [r3, #8]
        
        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2204      	movs	r2, #4
 80037cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          
        return HAL_ERROR;      
 80037d8:	2301      	movs	r3, #1
 80037da:	e032      	b.n	8003842 <HAL_DMA2D_PollForTransfer+0x1c8>
      }      
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d01a      	beq.n	800381a <HAL_DMA2D_PollForTransfer+0x1a0>
      {
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_DMA2D_PollForTransfer+0x180>
 80037ea:	f7ff fbd5 	bl	8002f98 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d20f      	bcs.n	800381a <HAL_DMA2D_PollForTransfer+0x1a0>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	63da      	str	r2, [r3, #60]	; 0x3c
    
          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2203      	movs	r2, #3
 800380a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        
          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                    
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e013      	b.n	8003842 <HAL_DMA2D_PollForTransfer+0x1c8>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0310 	and.w	r3, r3, #16
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0a1      	beq.n	800376c <HAL_DMA2D_PollForTransfer+0xf2>
      }      
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2212      	movs	r2, #18
 800382e:	609a      	str	r2, [r3, #8]
  
  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.  
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b084      	sub	sp, #16
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60bb      	str	r3, [r7, #8]
        
  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != RESET)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d026      	beq.n	80038ba <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != RESET)    
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d021      	beq.n	80038ba <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);  
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003884:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2201      	movs	r2, #1
 8003898:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2204      	movs	r2, #4
 800389e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != RESET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 0320 	and.w	r3, r3, #32
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d026      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != RESET)    
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d021      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0xc8>
    {  
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038dc:	601a      	str	r2, [r3, #0]
  
      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;    
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d026      	beq.n	800396a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != RESET)    
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003922:	2b00      	cmp	r3, #0
 8003924:	d021      	beq.n	800396a <HAL_DMA2D_IRQHandler+0x120>
    {    
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003934:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2208      	movs	r2, #8
 800393c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;    
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2204      	movs	r2, #4
 800394e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferErrorCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
      }
    }
  }  
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != RESET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d013      	beq.n	800399c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != RESET)    
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00e      	beq.n	800399c <HAL_DMA2D_IRQHandler+0x152>
    {    
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398c:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer watermark flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2204      	movs	r2, #4
 8003994:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f853 	bl	8003a42 <HAL_DMA2D_LineEventCallback>
    }
  }  
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != RESET)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d024      	beq.n	80039f0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != RESET)    
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01f      	beq.n	80039f0 <HAL_DMA2D_IRQHandler+0x1a6>
    {   
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039be:	601a      	str	r2, [r3, #0]
  
      /* Clear the transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2202      	movs	r2, #2
 80039c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      if(hdma2d->XferCpltCallback != NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4798      	blx	r3
      }         
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != RESET)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01f      	beq.n	8003a3a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != RESET)    
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <HAL_DMA2D_IRQHandler+0x1f0>
    {    
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a12:	601a      	str	r2, [r3, #0]
  
      /* Clear the CLUT transfer complete flag */  
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;    
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c
    
      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);       
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      
      /* CLUT Transfer complete Callback */
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);         
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f80e 	bl	8003a56 <HAL_DMA2D_CLUTLoadingCpltCallback>
    }
  }  
  
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);
  
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
} 
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   0(background) / 1(foreground)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{ 
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  DMA2D_LayerCfgTypeDef *pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
  
  uint32_t regMask = 0, regValue = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));  
  assert_param(IS_DMA2D_OFFSET(pLayerCfg->InputOffset));  
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(pLayerCfg->AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_DMA2D_ConfigLayer+0x34>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e073      	b.n	8003b88 <HAL_DMA2D_ConfigLayer+0x11c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D BGPFCR register configuration -----------------------------------*/
  /* Prepare the value to be written to the BGPFCCR register */
  
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	685a      	ldr	r2, [r3, #4]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	041b      	lsls	r3, r3, #16
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003abe:	4b35      	ldr	r3, [pc, #212]	; (8003b94 <HAL_DMA2D_ConfigLayer+0x128>)
 8003ac0:	60fb      	str	r3, [r7, #12]
#if defined (DMA2D_FGPFCCR_RBS) && defined (DMA2D_BGPFCCR_RBS)
  regValue |= (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  |= DMA2D_BGPFCCR_RBS;  
#endif  
  
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b0a      	cmp	r3, #10
 8003ac8:	d003      	beq.n	8003ad2 <HAL_DMA2D_ConfigLayer+0x66>
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b09      	cmp	r3, #9
 8003ad0:	d107      	bne.n	8003ae2 <HAL_DMA2D_ConfigLayer+0x76>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	e005      	b.n	8003aee <HAL_DMA2D_ConfigLayer+0x82>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	061b      	lsls	r3, r3, #24
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	617b      	str	r3, [r7, #20]
  }
  
  /* Configure the background DMA2D layer */
  if(LayerIdx == 0)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d120      	bne.n	8003b36 <HAL_DMA2D_ConfigLayer+0xca>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	43db      	mvns	r3, r3
 8003afe:	ea02 0103 	and.w	r1, r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	625a      	str	r2, [r3, #36]	; 0x24
              
    /* DMA2D BGOR register configuration -------------------------------------*/  
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	6812      	ldr	r2, [r2, #0]
 8003b14:	619a      	str	r2, [r3, #24]
    
    /* DMA2D BGCOLR register configuration -------------------------------------*/ 
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b0a      	cmp	r3, #10
 8003b1c:	d003      	beq.n	8003b26 <HAL_DMA2D_ConfigLayer+0xba>
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b09      	cmp	r3, #9
 8003b24:	d127      	bne.n	8003b76 <HAL_DMA2D_ConfigLayer+0x10a>
    {    
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
 8003b34:	e01f      	b.n	8003b76 <HAL_DMA2D_ConfigLayer+0x10a>
  }
  /* Configure the foreground DMA2D layer */
  else
  {
     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	ea02 0103 	and.w	r1, r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	61da      	str	r2, [r3, #28]
    
    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);      
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	611a      	str	r2, [r3, #16]
   
    /* DMA2D FGCOLR register configuration -------------------------------------*/   
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b0a      	cmp	r3, #10
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA2D_ConfigLayer+0xfc>
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b09      	cmp	r3, #9
 8003b66:	d106      	bne.n	8003b76 <HAL_DMA2D_ConfigLayer+0x10a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b74:	621a      	str	r2, [r3, #32]
    }   
  }   
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);  
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	ff03000f 	.word	0xff03000f

08003b98 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8003b98:	b480      	push	{r7}
 8003b9a:	b08b      	sub	sp, #44	; 0x2c
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp1 = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	623b      	str	r3, [r7, #32]
  uint32_t tmp2 = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp3 = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp4 = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos))); 
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	041a      	lsls	r2, r3, #16
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	63da      	str	r2, [r3, #60]	; 0x3c
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003be4:	d174      	bne.n	8003cd0 <DMA2D_SetConfig+0x138>
  {    
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bec:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bf4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bfc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	617b      	str	r3, [r7, #20]
    
    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d108      	bne.n	8003c1e <DMA2D_SetConfig+0x86>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	431a      	orrs	r2, r3
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1c:	e053      	b.n	8003cc6 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d106      	bne.n	8003c34 <DMA2D_SetConfig+0x9c>
    {
      tmp = (tmp3 | tmp2 | tmp4);  
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	e048      	b.n	8003cc6 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d111      	bne.n	8003c60 <DMA2D_SetConfig+0xc8>
    {
      tmp2 = (tmp2 >> 19);
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	0cdb      	lsrs	r3, r3, #19
 8003c40:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	0a9b      	lsrs	r3, r3, #10
 8003c46:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	08db      	lsrs	r3, r3, #3
 8003c4c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 11) | tmp4); 
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	02db      	lsls	r3, r3, #11
 8003c56:	4313      	orrs	r3, r2
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5e:	e032      	b.n	8003cc6 <DMA2D_SetConfig+0x12e>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	d117      	bne.n	8003c98 <DMA2D_SetConfig+0x100>
    { 
      tmp1 = (tmp1 >> 31);
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	0fdb      	lsrs	r3, r3, #31
 8003c6c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19);
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	0cdb      	lsrs	r3, r3, #19
 8003c72:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	0adb      	lsrs	r3, r3, #11
 8003c78:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3 );      
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	08db      	lsrs	r3, r3, #3
 8003c7e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5) | (tmp2 << 10) | (tmp1 << 15) | tmp4);    
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	029b      	lsls	r3, r3, #10
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	03db      	lsls	r3, r3, #15
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	e016      	b.n	8003cc6 <DMA2D_SetConfig+0x12e>
    } 
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	0f1b      	lsrs	r3, r3, #28
 8003c9c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20);
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	0d1b      	lsrs	r3, r3, #20
 8003ca2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12);
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	0b1b      	lsrs	r3, r3, #12
 8003ca8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4 );
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	011a      	lsls	r2, r3, #4
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	031b      	lsls	r3, r3, #12
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	627b      	str	r3, [r7, #36]	; 0x24
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);    
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003cce:	e003      	b.n	8003cd8 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	60da      	str	r2, [r3, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	372c      	adds	r7, #44	; 0x2c
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b089      	sub	sp, #36	; 0x24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
 8003d02:	e175      	b.n	8003ff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d04:	2201      	movs	r2, #1
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4013      	ands	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	f040 8164 	bne.w	8003fea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d003      	beq.n	8003d32 <HAL_GPIO_Init+0x4e>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b12      	cmp	r3, #18
 8003d30:	d123      	bne.n	8003d7a <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	08da      	lsrs	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3208      	adds	r2, #8
 8003d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	220f      	movs	r2, #15
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691a      	ldr	r2, [r3, #16]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	08da      	lsrs	r2, r3, #3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3208      	adds	r2, #8
 8003d74:	69b9      	ldr	r1, [r7, #24]
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	2203      	movs	r2, #3
 8003d86:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d00b      	beq.n	8003dce <HAL_GPIO_Init+0xea>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d007      	beq.n	8003dce <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003dc2:	2b11      	cmp	r3, #17
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2b12      	cmp	r3, #18
 8003dcc:	d130      	bne.n	8003e30 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	2203      	movs	r2, #3
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68da      	ldr	r2, [r3, #12]
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e04:	2201      	movs	r2, #1
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	091b      	lsrs	r3, r3, #4
 8003e1a:	f003 0201 	and.w	r2, r3, #1
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80be 	beq.w	8003fea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e6e:	4b66      	ldr	r3, [pc, #408]	; (8004008 <HAL_GPIO_Init+0x324>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	4a65      	ldr	r2, [pc, #404]	; (8004008 <HAL_GPIO_Init+0x324>)
 8003e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e78:	6453      	str	r3, [r2, #68]	; 0x44
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_GPIO_Init+0x324>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e86:	4a61      	ldr	r2, [pc, #388]	; (800400c <HAL_GPIO_Init+0x328>)
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	089b      	lsrs	r3, r3, #2
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	220f      	movs	r2, #15
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	43db      	mvns	r3, r3
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a58      	ldr	r2, [pc, #352]	; (8004010 <HAL_GPIO_Init+0x32c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d037      	beq.n	8003f22 <HAL_GPIO_Init+0x23e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a57      	ldr	r2, [pc, #348]	; (8004014 <HAL_GPIO_Init+0x330>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_GPIO_Init+0x23a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a56      	ldr	r2, [pc, #344]	; (8004018 <HAL_GPIO_Init+0x334>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02b      	beq.n	8003f1a <HAL_GPIO_Init+0x236>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a55      	ldr	r2, [pc, #340]	; (800401c <HAL_GPIO_Init+0x338>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d025      	beq.n	8003f16 <HAL_GPIO_Init+0x232>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a54      	ldr	r2, [pc, #336]	; (8004020 <HAL_GPIO_Init+0x33c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01f      	beq.n	8003f12 <HAL_GPIO_Init+0x22e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a53      	ldr	r2, [pc, #332]	; (8004024 <HAL_GPIO_Init+0x340>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d019      	beq.n	8003f0e <HAL_GPIO_Init+0x22a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a52      	ldr	r2, [pc, #328]	; (8004028 <HAL_GPIO_Init+0x344>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <HAL_GPIO_Init+0x226>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a51      	ldr	r2, [pc, #324]	; (800402c <HAL_GPIO_Init+0x348>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00d      	beq.n	8003f06 <HAL_GPIO_Init+0x222>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a50      	ldr	r2, [pc, #320]	; (8004030 <HAL_GPIO_Init+0x34c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <HAL_GPIO_Init+0x21e>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a4f      	ldr	r2, [pc, #316]	; (8004034 <HAL_GPIO_Init+0x350>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <HAL_GPIO_Init+0x21a>
 8003efa:	2309      	movs	r3, #9
 8003efc:	e012      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003efe:	230a      	movs	r3, #10
 8003f00:	e010      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f02:	2308      	movs	r3, #8
 8003f04:	e00e      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f06:	2307      	movs	r3, #7
 8003f08:	e00c      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f0a:	2306      	movs	r3, #6
 8003f0c:	e00a      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f0e:	2305      	movs	r3, #5
 8003f10:	e008      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e006      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e004      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e002      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_GPIO_Init+0x240>
 8003f22:	2300      	movs	r3, #0
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	f002 0203 	and.w	r2, r2, #3
 8003f2a:	0092      	lsls	r2, r2, #2
 8003f2c:	4093      	lsls	r3, r2
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f34:	4935      	ldr	r1, [pc, #212]	; (800400c <HAL_GPIO_Init+0x328>)
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	089b      	lsrs	r3, r3, #2
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f42:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	43db      	mvns	r3, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f66:	4a34      	ldr	r2, [pc, #208]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f6c:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f90:	4a29      	ldr	r2, [pc, #164]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f96:	4b28      	ldr	r3, [pc, #160]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fba:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fc0:	4b1d      	ldr	r3, [pc, #116]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <HAL_GPIO_Init+0x354>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	3301      	adds	r3, #1
 8003fee:	61fb      	str	r3, [r7, #28]
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	2b0f      	cmp	r3, #15
 8003ff4:	f67f ae86 	bls.w	8003d04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	bf00      	nop
 8003ffc:	3724      	adds	r7, #36	; 0x24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800
 800400c:	40013800 	.word	0x40013800
 8004010:	40020000 	.word	0x40020000
 8004014:	40020400 	.word	0x40020400
 8004018:	40020800 	.word	0x40020800
 800401c:	40020c00 	.word	0x40020c00
 8004020:	40021000 	.word	0x40021000
 8004024:	40021400 	.word	0x40021400
 8004028:	40021800 	.word	0x40021800
 800402c:	40021c00 	.word	0x40021c00
 8004030:	40022000 	.word	0x40022000
 8004034:	40022400 	.word	0x40022400
 8004038:	40013c00 	.word	0x40013c00

0800403c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e0d9      	b.n	800420c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004058:	2201      	movs	r2, #1
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4013      	ands	r3, r2
 8004068:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	429a      	cmp	r2, r3
 8004070:	f040 80c9 	bne.w	8004206 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	2103      	movs	r1, #3
 800407e:	fa01 f303 	lsl.w	r3, r1, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	401a      	ands	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	08da      	lsrs	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	3208      	adds	r2, #8
 8004092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	08d2      	lsrs	r2, r2, #3
 80040aa:	4019      	ands	r1, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3208      	adds	r2, #8
 80040b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	2103      	movs	r1, #3
 80040be:	fa01 f303 	lsl.w	r3, r1, r3
 80040c2:	43db      	mvns	r3, r3
 80040c4:	401a      	ands	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	2101      	movs	r1, #1
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	43db      	mvns	r3, r3
 80040d8:	401a      	ands	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	2103      	movs	r1, #3
 80040e8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	401a      	ands	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80040f4:	4a4b      	ldr	r2, [pc, #300]	; (8004224 <HAL_GPIO_DeInit+0x1e8>)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	089b      	lsrs	r3, r3, #2
 80040fa:	3302      	adds	r3, #2
 80040fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004100:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f003 0303 	and.w	r3, r3, #3
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	220f      	movs	r2, #15
 800410c:	fa02 f303 	lsl.w	r3, r2, r3
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	4013      	ands	r3, r2
 8004114:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a43      	ldr	r2, [pc, #268]	; (8004228 <HAL_GPIO_DeInit+0x1ec>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d037      	beq.n	800418e <HAL_GPIO_DeInit+0x152>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a42      	ldr	r2, [pc, #264]	; (800422c <HAL_GPIO_DeInit+0x1f0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_GPIO_DeInit+0x14e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a41      	ldr	r2, [pc, #260]	; (8004230 <HAL_GPIO_DeInit+0x1f4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02b      	beq.n	8004186 <HAL_GPIO_DeInit+0x14a>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a40      	ldr	r2, [pc, #256]	; (8004234 <HAL_GPIO_DeInit+0x1f8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d025      	beq.n	8004182 <HAL_GPIO_DeInit+0x146>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a3f      	ldr	r2, [pc, #252]	; (8004238 <HAL_GPIO_DeInit+0x1fc>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01f      	beq.n	800417e <HAL_GPIO_DeInit+0x142>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a3e      	ldr	r2, [pc, #248]	; (800423c <HAL_GPIO_DeInit+0x200>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d019      	beq.n	800417a <HAL_GPIO_DeInit+0x13e>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a3d      	ldr	r2, [pc, #244]	; (8004240 <HAL_GPIO_DeInit+0x204>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_GPIO_DeInit+0x13a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a3c      	ldr	r2, [pc, #240]	; (8004244 <HAL_GPIO_DeInit+0x208>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00d      	beq.n	8004172 <HAL_GPIO_DeInit+0x136>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <HAL_GPIO_DeInit+0x20c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <HAL_GPIO_DeInit+0x132>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a3a      	ldr	r2, [pc, #232]	; (800424c <HAL_GPIO_DeInit+0x210>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_GPIO_DeInit+0x12e>
 8004166:	2309      	movs	r3, #9
 8004168:	e012      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 800416a:	230a      	movs	r3, #10
 800416c:	e010      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 800416e:	2308      	movs	r3, #8
 8004170:	e00e      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 8004172:	2307      	movs	r3, #7
 8004174:	e00c      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 8004176:	2306      	movs	r3, #6
 8004178:	e00a      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 800417a:	2305      	movs	r3, #5
 800417c:	e008      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 800417e:	2304      	movs	r3, #4
 8004180:	e006      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 8004182:	2303      	movs	r3, #3
 8004184:	e004      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 8004186:	2302      	movs	r3, #2
 8004188:	e002      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_GPIO_DeInit+0x154>
 800418e:	2300      	movs	r3, #0
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	f002 0203 	and.w	r2, r2, #3
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	4093      	lsls	r3, r2
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	429a      	cmp	r2, r3
 800419e:	d132      	bne.n	8004206 <HAL_GPIO_DeInit+0x1ca>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	220f      	movs	r2, #15
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_GPIO_DeInit+0x1e8>)
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	3302      	adds	r3, #2
 80041b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	43da      	mvns	r2, r3
 80041c0:	4818      	ldr	r0, [pc, #96]	; (8004224 <HAL_GPIO_DeInit+0x1e8>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	089b      	lsrs	r3, r3, #2
 80041c6:	400a      	ands	r2, r1
 80041c8:	3302      	adds	r3, #2
 80041ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80041ce:	4b20      	ldr	r3, [pc, #128]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	491e      	ldr	r1, [pc, #120]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 80041d8:	4013      	ands	r3, r2
 80041da:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	43db      	mvns	r3, r3
 80041e4:	491a      	ldr	r1, [pc, #104]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 80041e6:	4013      	ands	r3, r2
 80041e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	4917      	ldr	r1, [pc, #92]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	43db      	mvns	r3, r3
 8004200:	4913      	ldr	r1, [pc, #76]	; (8004250 <HAL_GPIO_DeInit+0x214>)
 8004202:	4013      	ands	r3, r2
 8004204:	60cb      	str	r3, [r1, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	3301      	adds	r3, #1
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	f67f af22 	bls.w	8004058 <HAL_GPIO_DeInit+0x1c>
	  }
    }
  }
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	371c      	adds	r7, #28
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40013800 	.word	0x40013800
 8004228:	40020000 	.word	0x40020000
 800422c:	40020400 	.word	0x40020400
 8004230:	40020800 	.word	0x40020800
 8004234:	40020c00 	.word	0x40020c00
 8004238:	40021000 	.word	0x40021000
 800423c:	40021400 	.word	0x40021400
 8004240:	40021800 	.word	0x40021800
 8004244:	40021c00 	.word	0x40021c00
 8004248:	40022000 	.word	0x40022000
 800424c:	40022400 	.word	0x40022400
 8004250:	40013c00 	.word	0x40013c00

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004270:	e003      	b.n	800427a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	041a      	lsls	r2, r3, #16
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	619a      	str	r2, [r3, #24]
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e07f      	b.n	800439a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d106      	bne.n	80042b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f005 fd82 	bl	8009db8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2224      	movs	r2, #36	; 0x24
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d107      	bne.n	8004302 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	e006      	b.n	8004310 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800430e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d104      	bne.n	8004322 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004320:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <HAL_I2C_Init+0x11c>)
 800432e:	430b      	orrs	r3, r1
 8004330:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004340:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691a      	ldr	r2, [r3, #16]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	ea42 0103 	orr.w	r1, r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	021a      	lsls	r2, r3, #8
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a1a      	ldr	r2, [r3, #32]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2220      	movs	r2, #32
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	02008000 	.word	0x02008000

080043a8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e021      	b.n	80043fe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2224      	movs	r2, #36	; 0x24
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f005 fd34 	bl	8009e40 <HAL_I2C_MspDeInit>

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b088      	sub	sp, #32
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	4608      	mov	r0, r1
 8004412:	4611      	mov	r1, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4603      	mov	r3, r0
 8004418:	817b      	strh	r3, [r7, #10]
 800441a:	460b      	mov	r3, r1
 800441c:	813b      	strh	r3, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b20      	cmp	r3, #32
 8004430:	f040 8109 	bne.w	8004646 <HAL_I2C_Mem_Write+0x23e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_I2C_Mem_Write+0x38>
 800443a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_I2C_Mem_Write+0x3c>
    {
      return  HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e101      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_I2C_Mem_Write+0x4a>
 800444e:	2302      	movs	r3, #2
 8004450:	e0fa      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800445a:	f7fe fd9d 	bl	8002f98 <HAL_GetTick>
 800445e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	2319      	movs	r3, #25
 8004466:	2201      	movs	r2, #1
 8004468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fb09 	bl	8004a84 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_I2C_Mem_Write+0x74>
    {
      return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e0e5      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2221      	movs	r2, #33	; 0x21
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2240      	movs	r2, #64	; 0x40
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a3a      	ldr	r2, [r7, #32]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800449c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044a4:	88f8      	ldrh	r0, [r7, #6]
 80044a6:	893a      	ldrh	r2, [r7, #8]
 80044a8:	8979      	ldrh	r1, [r7, #10]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4603      	mov	r3, r0
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fa01 	bl	80048bc <I2C_RequestMemoryWrite>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00f      	beq.n	80044e0 <HAL_I2C_Mem_Write+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d105      	bne.n	80044d4 <HAL_I2C_Mem_Write+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0b9      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0b3      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	2bff      	cmp	r3, #255	; 0xff
 80044e8:	d90e      	bls.n	8004508 <HAL_I2C_Mem_Write+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	8979      	ldrh	r1, [r7, #10]
 80044f8:	2300      	movs	r3, #0
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fbd3 	bl	8004cac <I2C_TransferConfig>
 8004506:	e00f      	b.n	8004528 <HAL_I2C_Mem_Write+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450c:	b29a      	uxth	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004516:	b2da      	uxtb	r2, r3
 8004518:	8979      	ldrh	r1, [r7, #10]
 800451a:	2300      	movs	r3, #0
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 fbc2 	bl	8004cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 fae3 	bl	8004af8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d007      	beq.n	8004548 <HAL_I2C_Mem_Write+0x140>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800453c:	2b04      	cmp	r3, #4
 800453e:	d101      	bne.n	8004544 <HAL_I2C_Mem_Write+0x13c>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e081      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
        }
        else
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e07f      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	1c59      	adds	r1, r3, #1
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	6251      	str	r1, [r2, #36]	; 0x24
 8004552:	781a      	ldrb	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d135      	bne.n	80045e8 <HAL_I2C_Mem_Write+0x1e0>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004580:	b29b      	uxth	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d030      	beq.n	80045e8 <HAL_I2C_Mem_Write+0x1e0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800458c:	2200      	movs	r2, #0
 800458e:	2180      	movs	r1, #128	; 0x80
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 fa77 	bl	8004a84 <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Mem_Write+0x198>
        {
          return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e053      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	2bff      	cmp	r3, #255	; 0xff
 80045a8:	d90e      	bls.n	80045c8 <HAL_I2C_Mem_Write+0x1c0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	22ff      	movs	r2, #255	; 0xff
 80045ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	8979      	ldrh	r1, [r7, #10]
 80045b8:	2300      	movs	r3, #0
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fb73 	bl	8004cac <I2C_TransferConfig>
 80045c6:	e00f      	b.n	80045e8 <HAL_I2C_Mem_Write+0x1e0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	8979      	ldrh	r1, [r7, #10]
 80045da:	2300      	movs	r3, #0
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 fb62 	bl	8004cac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d19a      	bne.n	8004528 <HAL_I2C_Mem_Write+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f000 fabe 	bl	8004b78 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d007      	beq.n	8004612 <HAL_I2C_Mem_Write+0x20a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	2b04      	cmp	r3, #4
 8004608:	d101      	bne.n	800460e <HAL_I2C_Mem_Write+0x206>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e01c      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
      }
      else
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e01a      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2220      	movs	r2, #32
 8004618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <HAL_I2C_Mem_Write+0x248>)
 8004626:	400b      	ands	r3, r1
 8004628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	e000      	b.n	8004648 <HAL_I2C_Mem_Write+0x240>
  }
  else
  {
    return HAL_BUSY;
 8004646:	2302      	movs	r3, #2
  }
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	fe00e800 	.word	0xfe00e800

08004654 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b088      	sub	sp, #32
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4603      	mov	r3, r0
 8004664:	817b      	strh	r3, [r7, #10]
 8004666:	460b      	mov	r3, r1
 8004668:	813b      	strh	r3, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b20      	cmp	r3, #32
 800467c:	f040 8107 	bne.w	800488e <HAL_I2C_Mem_Read+0x23a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d002      	beq.n	800468c <HAL_I2C_Mem_Read+0x38>
 8004686:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <HAL_I2C_Mem_Read+0x3c>
    {
      return  HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0ff      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_I2C_Mem_Read+0x4a>
 800469a:	2302      	movs	r3, #2
 800469c:	e0f8      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046a6:	f7fe fc77 	bl	8002f98 <HAL_GetTick>
 80046aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2319      	movs	r3, #25
 80046b2:	2201      	movs	r2, #1
 80046b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f9e3 	bl	8004a84 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Mem_Read+0x74>
    {
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0e3      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2222      	movs	r2, #34	; 0x22
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2240      	movs	r2, #64	; 0x40
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80046e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f0:	88f8      	ldrh	r0, [r7, #6]
 80046f2:	893a      	ldrh	r2, [r7, #8]
 80046f4:	8979      	ldrh	r1, [r7, #10]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	4603      	mov	r3, r0
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f93b 	bl	800497c <I2C_RequestMemoryRead>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00f      	beq.n	800472c <HAL_I2C_Mem_Read+0xd8>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004710:	2b04      	cmp	r3, #4
 8004712:	d105      	bne.n	8004720 <HAL_I2C_Mem_Read+0xcc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e0b7      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0b1      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2bff      	cmp	r3, #255	; 0xff
 8004734:	d90e      	bls.n	8004754 <HAL_I2C_Mem_Read+0x100>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	22ff      	movs	r2, #255	; 0xff
 800473a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	b2da      	uxtb	r2, r3
 8004742:	8979      	ldrh	r1, [r7, #10]
 8004744:	4b54      	ldr	r3, [pc, #336]	; (8004898 <HAL_I2C_Mem_Read+0x244>)
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 faad 	bl	8004cac <I2C_TransferConfig>
 8004752:	e00f      	b.n	8004774 <HAL_I2C_Mem_Read+0x120>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004762:	b2da      	uxtb	r2, r3
 8004764:	8979      	ldrh	r1, [r7, #10]
 8004766:	4b4c      	ldr	r3, [pc, #304]	; (8004898 <HAL_I2C_Mem_Read+0x244>)
 8004768:	9300      	str	r3, [sp, #0]
 800476a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fa9c 	bl	8004cac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	2200      	movs	r2, #0
 800477c:	2104      	movs	r1, #4
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f980 	bl	8004a84 <I2C_WaitOnFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <HAL_I2C_Mem_Read+0x13a>
      {
        return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e080      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	1c59      	adds	r1, r3, #1
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6251      	str	r1, [r2, #36]	; 0x24
 800479e:	b2c2      	uxtb	r2, r0
 80047a0:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d135      	bne.n	8004830 <HAL_I2C_Mem_Read+0x1dc>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d030      	beq.n	8004830 <HAL_I2C_Mem_Read+0x1dc>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d4:	2200      	movs	r2, #0
 80047d6:	2180      	movs	r1, #128	; 0x80
 80047d8:	68f8      	ldr	r0, [r7, #12]
 80047da:	f000 f953 	bl	8004a84 <I2C_WaitOnFlagUntilTimeout>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <HAL_I2C_Mem_Read+0x194>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e053      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	2bff      	cmp	r3, #255	; 0xff
 80047f0:	d90e      	bls.n	8004810 <HAL_I2C_Mem_Read+0x1bc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	22ff      	movs	r2, #255	; 0xff
 80047f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	8979      	ldrh	r1, [r7, #10]
 8004800:	2300      	movs	r3, #0
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 fa4f 	bl	8004cac <I2C_TransferConfig>
 800480e:	e00f      	b.n	8004830 <HAL_I2C_Mem_Read+0x1dc>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	b2da      	uxtb	r2, r3
 8004820:	8979      	ldrh	r1, [r7, #10]
 8004822:	2300      	movs	r3, #0
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fa3e 	bl	8004cac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004834:	b29b      	uxth	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d19c      	bne.n	8004774 <HAL_I2C_Mem_Read+0x120>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 f99a 	bl	8004b78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_I2C_Mem_Read+0x206>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	2b04      	cmp	r3, #4
 8004850:	d101      	bne.n	8004856 <HAL_I2C_Mem_Read+0x202>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e01c      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
      }
      else
      {
        return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e01a      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2220      	movs	r2, #32
 8004860:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b0b      	ldr	r3, [pc, #44]	; (800489c <HAL_I2C_Mem_Read+0x248>)
 800486e:	400b      	ands	r3, r1
 8004870:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	e000      	b.n	8004890 <HAL_I2C_Mem_Read+0x23c>
  }
  else
  {
    return HAL_BUSY;
 800488e:	2302      	movs	r3, #2
  }
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	80002400 	.word	0x80002400
 800489c:	fe00e800 	.word	0xfe00e800

080048a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ae:	b2db      	uxtb	r3, r3
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	461a      	mov	r2, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	817b      	strh	r3, [r7, #10]
 80048ce:	460b      	mov	r3, r1
 80048d0:	813b      	strh	r3, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80048d6:	88fb      	ldrh	r3, [r7, #6]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	8979      	ldrh	r1, [r7, #10]
 80048dc:	4b26      	ldr	r3, [pc, #152]	; (8004978 <I2C_RequestMemoryWrite+0xbc>)
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 f9e1 	bl	8004cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	69fa      	ldr	r2, [r7, #28]
 80048ec:	69b9      	ldr	r1, [r7, #24]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f902 	bl	8004af8 <I2C_WaitOnTXISFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <I2C_RequestMemoryWrite+0x4e>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d101      	bne.n	8004906 <I2C_RequestMemoryWrite+0x4a>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e034      	b.n	8004970 <I2C_RequestMemoryWrite+0xb4>
    }
    else
    {
      return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e032      	b.n	8004970 <I2C_RequestMemoryWrite+0xb4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800490a:	88fb      	ldrh	r3, [r7, #6]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d105      	bne.n	800491c <I2C_RequestMemoryWrite+0x60>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004910:	893b      	ldrh	r3, [r7, #8]
 8004912:	b2da      	uxtb	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	629a      	str	r2, [r3, #40]	; 0x28
 800491a:	e01b      	b.n	8004954 <I2C_RequestMemoryWrite+0x98>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800491c:	893b      	ldrh	r3, [r7, #8]
 800491e:	0a1b      	lsrs	r3, r3, #8
 8004920:	b29b      	uxth	r3, r3
 8004922:	b2da      	uxtb	r2, r3
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800492a:	69fa      	ldr	r2, [r7, #28]
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 f8e2 	bl	8004af8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <I2C_RequestMemoryWrite+0x8e>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	2b04      	cmp	r3, #4
 8004940:	d101      	bne.n	8004946 <I2C_RequestMemoryWrite+0x8a>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e014      	b.n	8004970 <I2C_RequestMemoryWrite+0xb4>
      }
      else
      {
        return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e012      	b.n	8004970 <I2C_RequestMemoryWrite+0xb4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800494a:	893b      	ldrh	r3, [r7, #8]
 800494c:	b2da      	uxtb	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2200      	movs	r2, #0
 800495c:	2180      	movs	r1, #128	; 0x80
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f890 	bl	8004a84 <I2C_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_RequestMemoryWrite+0xb2>
  {
    return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e000      	b.n	8004970 <I2C_RequestMemoryWrite+0xb4>
  }

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3710      	adds	r7, #16
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	80002000 	.word	0x80002000

0800497c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	4603      	mov	r3, r0
 800498c:	817b      	strh	r3, [r7, #10]
 800498e:	460b      	mov	r3, r1
 8004990:	813b      	strh	r3, [r7, #8]
 8004992:	4613      	mov	r3, r2
 8004994:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	b2da      	uxtb	r2, r3
 800499a:	8979      	ldrh	r1, [r7, #10]
 800499c:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <I2C_RequestMemoryRead+0xbc>)
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2300      	movs	r3, #0
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f982 	bl	8004cac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	69b9      	ldr	r1, [r7, #24]
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f8a3 	bl	8004af8 <I2C_WaitOnTXISFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <I2C_RequestMemoryRead+0x4c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d101      	bne.n	80049c4 <I2C_RequestMemoryRead+0x48>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e034      	b.n	8004a2e <I2C_RequestMemoryRead+0xb2>
    }
    else
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e032      	b.n	8004a2e <I2C_RequestMemoryRead+0xb2>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d105      	bne.n	80049da <I2C_RequestMemoryRead+0x5e>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80049ce:	893b      	ldrh	r3, [r7, #8]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	629a      	str	r2, [r3, #40]	; 0x28
 80049d8:	e01b      	b.n	8004a12 <I2C_RequestMemoryRead+0x96>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80049da:	893b      	ldrh	r3, [r7, #8]
 80049dc:	0a1b      	lsrs	r3, r3, #8
 80049de:	b29b      	uxth	r3, r3
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e8:	69fa      	ldr	r2, [r7, #28]
 80049ea:	69b9      	ldr	r1, [r7, #24]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f883 	bl	8004af8 <I2C_WaitOnTXISFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d007      	beq.n	8004a08 <I2C_RequestMemoryRead+0x8c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d101      	bne.n	8004a04 <I2C_RequestMemoryRead+0x88>
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e014      	b.n	8004a2e <I2C_RequestMemoryRead+0xb2>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e012      	b.n	8004a2e <I2C_RequestMemoryRead+0xb2>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a08:	893b      	ldrh	r3, [r7, #8]
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2140      	movs	r1, #64	; 0x40
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f831 	bl	8004a84 <I2C_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <I2C_RequestMemoryRead+0xb0>
  {
    return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e000      	b.n	8004a2e <I2C_RequestMemoryRead+0xb2>
  }

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	80002000 	.word	0x80002000

08004a3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d103      	bne.n	8004a5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2200      	movs	r2, #0
 8004a58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d007      	beq.n	8004a78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	619a      	str	r2, [r3, #24]
  }
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	4613      	mov	r3, r2
 8004a92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a94:	e01c      	b.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9c:	d018      	beq.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004aa4:	f7fe fa78 	bl	8002f98 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d20d      	bcs.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e00f      	b.n	8004af0 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	4013      	ands	r3, r2
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d0d3      	beq.n	8004a96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b04:	e02c      	b.n	8004b60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68b9      	ldr	r1, [r7, #8]
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 f870 	bl	8004bf0 <I2C_IsAcknowledgeFailed>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e02a      	b.n	8004b70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d01e      	beq.n	8004b60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b28:	f7fe fa36 	bl	8002f98 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d213      	bcs.n	8004b60 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	f043 0220 	orr.w	r2, r3, #32
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e007      	b.n	8004b70 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d1cb      	bne.n	8004b06 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b84:	e028      	b.n	8004bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	68b9      	ldr	r1, [r7, #8]
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f830 	bl	8004bf0 <I2C_IsAcknowledgeFailed>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e026      	b.n	8004be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d007      	beq.n	8004bb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004ba0:	f7fe f9fa 	bl	8002f98 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d213      	bcs.n	8004bd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb4:	f043 0220 	orr.w	r2, r3, #32
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e007      	b.n	8004be8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	699b      	ldr	r3, [r3, #24]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d1cf      	bne.n	8004b86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d148      	bne.n	8004c9c <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c0a:	e01c      	b.n	8004c46 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c12:	d018      	beq.n	8004c46 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d007      	beq.n	8004c2a <I2C_IsAcknowledgeFailed+0x3a>
 8004c1a:	f7fe f9bd 	bl	8002f98 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d20d      	bcs.n	8004c46 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e02b      	b.n	8004c9e <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b20      	cmp	r3, #32
 8004c52:	d1db      	bne.n	8004c0c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2220      	movs	r2, #32
 8004c62:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f7ff fee9 	bl	8004a3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6859      	ldr	r1, [r3, #4]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <I2C_IsAcknowledgeFailed+0xb8>)
 8004c76:	400b      	ands	r3, r1
 8004c78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2204      	movs	r2, #4
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	fe00e800 	.word	0xfe00e800

08004cac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	607b      	str	r3, [r7, #4]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	817b      	strh	r3, [r7, #10]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	0d5b      	lsrs	r3, r3, #21
 8004cc8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004ccc:	4b0d      	ldr	r3, [pc, #52]	; (8004d04 <I2C_TransferConfig+0x58>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	ea02 0103 	and.w	r1, r2, r3
 8004cd6:	897b      	ldrh	r3, [r7, #10]
 8004cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cdc:	7a7b      	ldrb	r3, [r7, #9]
 8004cde:	041b      	lsls	r3, r3, #16
 8004ce0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	03ff63ff 	.word	0x03ff63ff

08004d08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d138      	bne.n	8004d90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e032      	b.n	8004d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2224      	movs	r2, #36	; 0x24
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0201 	bic.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6819      	ldr	r1, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0201 	orr.w	r2, r2, #1
 8004d7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e000      	b.n	8004d92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
  }
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b20      	cmp	r3, #32
 8004db6:	d139      	bne.n	8004e2c <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e033      	b.n	8004e2e <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2224      	movs	r2, #36	; 0x24
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 0201 	bic.w	r2, r2, #1
 8004de4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004df4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	021b      	lsls	r3, r3, #8
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 0201 	orr.w	r2, r2, #1
 8004e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	e000      	b.n	8004e2e <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8004e2c:	2302      	movs	r3, #2
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
	...

08004e3c <HAL_LTDC_Init>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, tmp1 = 0;
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e0c7      	b.n	8004fe6 <HAL_LTDC_Init+0x1aa>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f005 f806 	bl	8009e7c <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configures the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8004e86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6999      	ldr	r1, [r3, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e9c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	619a      	str	r2, [r3, #24]

  /* Sets Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6899      	ldr	r1, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	4b4e      	ldr	r3, [pc, #312]	; (8004ff0 <HAL_LTDC_Init+0x1b4>)
 8004eb8:	400b      	ands	r3, r1
 8004eba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	695b      	ldr	r3, [r3, #20]
 8004ec0:	041b      	lsls	r3, r3, #16
 8004ec2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6899      	ldr	r1, [r3, #8]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	609a      	str	r2, [r3, #8]

  /* Sets Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68d9      	ldr	r1, [r3, #12]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <HAL_LTDC_Init+0x1b4>)
 8004ee6:	400b      	ands	r3, r1
 8004ee8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68d9      	ldr	r1, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	60da      	str	r2, [r3, #12]

  /* Sets Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6919      	ldr	r1, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4b37      	ldr	r3, [pc, #220]	; (8004ff0 <HAL_LTDC_Init+0x1b4>)
 8004f14:	400b      	ands	r3, r1
 8004f16:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	041b      	lsls	r3, r3, #16
 8004f1e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6919      	ldr	r1, [r3, #16]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	611a      	str	r2, [r3, #16]

  /* Sets Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6959      	ldr	r1, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <HAL_LTDC_Init+0x1b4>)
 8004f42:	400b      	ands	r3, r1
 8004f44:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6959      	ldr	r1, [r3, #20]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	615a      	str	r2, [r3, #20]

  /* Sets the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the transfer Error interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0204 	orr.w	r2, r2, #4
 8004fb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the FIFO underrun interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_FU);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0202 	orr.w	r2, r2, #2
 8004fc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699a      	ldr	r2, [r3, #24]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	f000f800 	.word	0xf000f800

08004ff4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.  
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_TE) != RESET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d025      	beq.n	8005056 <HAL_LTDC_IRQHandler+0x62>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_TE) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01e      	beq.n	8005056 <HAL_LTDC_IRQHandler+0x62>
    {
      /* Disable the transfer Error interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the transfer error flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2204      	movs	r2, #4
 800502e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2204      	movs	r2, #4
 8005044:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f000 f87b 	bl	800514c <HAL_LTDC_ErrorCallback>
    }
  }
  /* FIFO underrun Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_FU) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b00      	cmp	r3, #0
 8005062:	d025      	beq.n	80050b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_FU) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01e      	beq.n	80050b0 <HAL_LTDC_IRQHandler+0xbc>
    {
      /* Disable the FIFO underrun interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0202 	bic.w	r2, r2, #2
 8005080:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the FIFO underrun flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2202      	movs	r2, #2
 8005088:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Update error code */
      hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005090:	f043 0202 	orr.w	r2, r3, #2
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_ERROR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2204      	movs	r2, #4
 800509e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Transfer error Callback */
      HAL_LTDC_ErrorCallback(hltdc);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f84e 	bl	800514c <HAL_LTDC_ErrorCallback>
    }
  }
  /* Line Interrupt management ************************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_LI) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01d      	beq.n	80050fa <HAL_LTDC_IRQHandler+0x106>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_LI) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d016      	beq.n	80050fa <HAL_LTDC_IRQHandler+0x106>
    {
      /* Disable the Line interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 0201 	bic.w	r2, r2, #1
 80050da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Clear the Line interrupt flag */  
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2201      	movs	r2, #1
 80050e2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

      /* Line interrupt Callback */
      HAL_LTDC_LineEventCallback(hltdc);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 f833 	bl	8005160 <HAL_LTDC_LineEventCallback>
    }
  }
  /* Register reload Interrupt management ***************************************/
  if(__HAL_LTDC_GET_FLAG(hltdc, LTDC_FLAG_RR) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01d      	beq.n	8005144 <HAL_LTDC_IRQHandler+0x150>
  {
    if(__HAL_LTDC_GET_IT_SOURCE(hltdc, LTDC_IT_RR) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d016      	beq.n	8005144 <HAL_LTDC_IRQHandler+0x150>
    {
      /* Disable the register reload interrupt */
      __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0208 	bic.w	r2, r2, #8
 8005124:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Clear the register reload flag */
      __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2208      	movs	r2, #8
 800512c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Change LTDC state */
      hltdc->State = HAL_LTDC_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      
      /* Process unlocked */
      __HAL_UNLOCK(hltdc);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      
      /* Register reload interrupt Callback */
      HAL_LTDC_ReloadEventCallback(hltdc);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f818 	bl	8005174 <HAL_LTDC_ReloadEventCallback>
    }
  }  
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    0 or 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800519a:	2b01      	cmp	r3, #1
 800519c:	d101      	bne.n	80051a2 <HAL_LTDC_ConfigLayer+0x1a>
 800519e:	2302      	movs	r3, #2
 80051a0:	e02c      	b.n	80051fc <HAL_LTDC_ConfigLayer+0x74>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2202      	movs	r2, #2
 80051ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2134      	movs	r1, #52	; 0x34
 80051b8:	fb01 f303 	mul.w	r3, r1, r3
 80051bc:	4413      	add	r3, r2
 80051be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4614      	mov	r4, r2
 80051c6:	461d      	mov	r5, r3
 80051c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80051d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80051d4:	682b      	ldr	r3, [r5, #0]
 80051d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	68b9      	ldr	r1, [r7, #8]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f81f 	bl	8005220 <LTDC_SetConfig>

  /* Sets the Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2201      	movs	r2, #1
 80051e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bdb0      	pop	{r4, r5, r7, pc}

08005204 <HAL_LTDC_GetState>:
  * @param  hltdc pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005212:	b2db      	uxtb	r3, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                    This parameter can be one of the following values: 0 or 1
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	; 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0;
 8005234:	2300      	movs	r3, #0
 8005236:	617b      	str	r3, [r7, #20]

  /* Configures the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005248:	4413      	add	r3, r2
 800524a:	041b      	lsls	r3, r3, #16
 800524c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	01db      	lsls	r3, r3, #7
 8005258:	4413      	add	r3, r2
 800525a:	3384      	adds	r3, #132	; 0x84
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	4611      	mov	r1, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	01d2      	lsls	r2, r2, #7
 8005268:	440a      	add	r2, r1
 800526a:	3284      	adds	r2, #132	; 0x84
 800526c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005270:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005282:	4413      	add	r3, r2
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4619      	mov	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	01db      	lsls	r3, r3, #7
 8005290:	440b      	add	r3, r1
 8005292:	3384      	adds	r3, #132	; 0x84
 8005294:	4619      	mov	r1, r3
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4313      	orrs	r3, r2
 800529a:	604b      	str	r3, [r1, #4]

  /* Configures the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	68da      	ldr	r2, [r3, #12]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052aa:	4413      	add	r3, r2
 80052ac:	041b      	lsls	r3, r3, #16
 80052ae:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	01db      	lsls	r3, r3, #7
 80052ba:	4413      	add	r3, r2
 80052bc:	3384      	adds	r3, #132	; 0x84
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	6812      	ldr	r2, [r2, #0]
 80052c4:	4611      	mov	r1, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	01d2      	lsls	r2, r2, #7
 80052ca:	440a      	add	r2, r1
 80052cc:	3284      	adds	r2, #132	; 0x84
 80052ce:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80052d2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052e2:	4413      	add	r3, r2
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	01db      	lsls	r3, r3, #7
 80052f0:	440b      	add	r3, r1
 80052f2:	3384      	adds	r3, #132	; 0x84
 80052f4:	4619      	mov	r1, r3
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	01db      	lsls	r3, r3, #7
 8005306:	4413      	add	r3, r2
 8005308:	3384      	adds	r3, #132	; 0x84
 800530a:	691b      	ldr	r3, [r3, #16]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	4611      	mov	r1, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	01d2      	lsls	r2, r2, #7
 8005316:	440a      	add	r2, r1
 8005318:	3284      	adds	r2, #132	; 0x84
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	01db      	lsls	r3, r3, #7
 800532a:	4413      	add	r3, r2
 800532c:	3384      	adds	r3, #132	; 0x84
 800532e:	461a      	mov	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	6113      	str	r3, [r2, #16]

  /* Configures the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800533c:	021b      	lsls	r3, r3, #8
 800533e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005346:	041b      	lsls	r3, r3, #16
 8005348:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	061b      	lsls	r3, r3, #24
 8005350:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	461a      	mov	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	01db      	lsls	r3, r3, #7
 800535c:	4413      	add	r3, r2
 800535e:	3384      	adds	r3, #132	; 0x84
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	01db      	lsls	r3, r3, #7
 800536c:	4413      	add	r3, r2
 800536e:	3384      	adds	r3, #132	; 0x84
 8005370:	461a      	mov	r2, r3
 8005372:	2300      	movs	r3, #0
 8005374:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800537c:	461a      	mov	r2, r3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	431a      	orrs	r2, r3
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	01db      	lsls	r3, r3, #7
 8005390:	440b      	add	r3, r1
 8005392:	3384      	adds	r3, #132	; 0x84
 8005394:	4619      	mov	r1, r3
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	01db      	lsls	r3, r3, #7
 80053a6:	4413      	add	r3, r2
 80053a8:	3384      	adds	r3, #132	; 0x84
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	4611      	mov	r1, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	01d2      	lsls	r2, r2, #7
 80053b6:	440a      	add	r2, r1
 80053b8:	3284      	adds	r2, #132	; 0x84
 80053ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053be:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	461a      	mov	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	01db      	lsls	r3, r3, #7
 80053ca:	4413      	add	r3, r2
 80053cc:	3384      	adds	r3, #132	; 0x84
 80053ce:	461a      	mov	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	01db      	lsls	r3, r3, #7
 80053e0:	4413      	add	r3, r2
 80053e2:	3384      	adds	r3, #132	; 0x84
 80053e4:	69da      	ldr	r2, [r3, #28]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4619      	mov	r1, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	01db      	lsls	r3, r3, #7
 80053f0:	440b      	add	r3, r1
 80053f2:	3384      	adds	r3, #132	; 0x84
 80053f4:	4619      	mov	r1, r3
 80053f6:	4b58      	ldr	r3, [pc, #352]	; (8005558 <LTDC_SetConfig+0x338>)
 80053f8:	4013      	ands	r3, r2
 80053fa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	68f9      	ldr	r1, [r7, #12]
 8005406:	6809      	ldr	r1, [r1, #0]
 8005408:	4608      	mov	r0, r1
 800540a:	6879      	ldr	r1, [r7, #4]
 800540c:	01c9      	lsls	r1, r1, #7
 800540e:	4401      	add	r1, r0
 8005410:	3184      	adds	r1, #132	; 0x84
 8005412:	4313      	orrs	r3, r2
 8005414:	61cb      	str	r3, [r1, #28]

  /* Configures the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	01db      	lsls	r3, r3, #7
 8005420:	4413      	add	r3, r2
 8005422:	3384      	adds	r3, #132	; 0x84
 8005424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	01db      	lsls	r3, r3, #7
 8005430:	4413      	add	r3, r2
 8005432:	3384      	adds	r3, #132	; 0x84
 8005434:	461a      	mov	r2, r3
 8005436:	2300      	movs	r3, #0
 8005438:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	01db      	lsls	r3, r3, #7
 8005444:	4413      	add	r3, r2
 8005446:	3384      	adds	r3, #132	; 0x84
 8005448:	461a      	mov	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <LTDC_SetConfig+0x23e>
  {
    tmp = 4;
 8005458:	2304      	movs	r3, #4
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e01b      	b.n	8005496 <LTDC_SetConfig+0x276>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d102      	bne.n	800546c <LTDC_SetConfig+0x24c>
  {
    tmp = 3;
 8005466:	2303      	movs	r3, #3
 8005468:	61fb      	str	r3, [r7, #28]
 800546a:	e014      	b.n	8005496 <LTDC_SetConfig+0x276>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b04      	cmp	r3, #4
 8005472:	d00b      	beq.n	800548c <LTDC_SetConfig+0x26c>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005478:	2b02      	cmp	r3, #2
 800547a:	d007      	beq.n	800548c <LTDC_SetConfig+0x26c>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005480:	2b03      	cmp	r3, #3
 8005482:	d003      	beq.n	800548c <LTDC_SetConfig+0x26c>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005488:	2b07      	cmp	r3, #7
 800548a:	d102      	bne.n	8005492 <LTDC_SetConfig+0x272>
  {
    tmp = 2;
 800548c:	2302      	movs	r3, #2
 800548e:	61fb      	str	r3, [r7, #28]
 8005490:	e001      	b.n	8005496 <LTDC_SetConfig+0x276>
  }
  else
  {
    tmp = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
  }

  /* Configures the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	01db      	lsls	r3, r3, #7
 80054a0:	4413      	add	r3, r2
 80054a2:	3384      	adds	r3, #132	; 0x84
 80054a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	4611      	mov	r1, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	01d2      	lsls	r2, r2, #7
 80054b0:	440a      	add	r2, r1
 80054b2:	3284      	adds	r2, #132	; 0x84
 80054b4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80054b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	fb02 f303 	mul.w	r3, r2, r3
 80054c4:	041a      	lsls	r2, r3, #16
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6859      	ldr	r1, [r3, #4]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	1acb      	subs	r3, r1, r3
 80054d0:	69f9      	ldr	r1, [r7, #28]
 80054d2:	fb01 f303 	mul.w	r3, r1, r3
 80054d6:	3303      	adds	r3, #3
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	6809      	ldr	r1, [r1, #0]
 80054dc:	4608      	mov	r0, r1
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	01c9      	lsls	r1, r1, #7
 80054e2:	4401      	add	r1, r0
 80054e4:	3184      	adds	r1, #132	; 0x84
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configures the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	01db      	lsls	r3, r3, #7
 80054f4:	4413      	add	r3, r2
 80054f6:	3384      	adds	r3, #132	; 0x84
 80054f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4619      	mov	r1, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	01db      	lsls	r3, r3, #7
 8005504:	440b      	add	r3, r1
 8005506:	3384      	adds	r3, #132	; 0x84
 8005508:	4619      	mov	r1, r3
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <LTDC_SetConfig+0x33c>)
 800550c:	4013      	ands	r3, r2
 800550e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	01db      	lsls	r3, r3, #7
 800551a:	4413      	add	r3, r2
 800551c:	3384      	adds	r3, #132	; 0x84
 800551e:	461a      	mov	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005524:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	01db      	lsls	r3, r3, #7
 8005530:	4413      	add	r3, r2
 8005532:	3384      	adds	r3, #132	; 0x84
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	4611      	mov	r1, r2
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	01d2      	lsls	r2, r2, #7
 8005540:	440a      	add	r2, r1
 8005542:	3284      	adds	r2, #132	; 0x84
 8005544:	f043 0301 	orr.w	r3, r3, #1
 8005548:	6013      	str	r3, [r2, #0]
}
 800554a:	bf00      	nop
 800554c:	3724      	adds	r7, #36	; 0x24
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	fffff8f8 	.word	0xfffff8f8
 800555c:	fffff800 	.word	0xfffff800

08005560 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800556a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40007000 	.word	0x40007000

08005580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800558a:	4b23      	ldr	r3, [pc, #140]	; (8005618 <HAL_PWREx_EnableOverDrive+0x98>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a22      	ldr	r2, [pc, #136]	; (8005618 <HAL_PWREx_EnableOverDrive+0x98>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_PWREx_EnableOverDrive+0x98>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055a2:	4b1e      	ldr	r3, [pc, #120]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1d      	ldr	r2, [pc, #116]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055ae:	f7fd fcf3 	bl	8002f98 <HAL_GetTick>
 80055b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055b4:	e009      	b.n	80055ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055b6:	f7fd fcef 	bl	8002f98 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c4:	d901      	bls.n	80055ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e022      	b.n	8005610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d6:	d1ee      	bne.n	80055b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055d8:	4b10      	ldr	r3, [pc, #64]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0f      	ldr	r2, [pc, #60]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055e4:	f7fd fcd8 	bl	8002f98 <HAL_GetTick>
 80055e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055ea:	e009      	b.n	8005600 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055ec:	f7fd fcd4 	bl	8002f98 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055fa:	d901      	bls.n	8005600 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e007      	b.n	8005610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560c:	d1ee      	bne.n	80055ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40023800 	.word	0x40023800
 800561c:	40007000 	.word	0x40007000

08005620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e25c      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8087 	beq.w	8005752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005644:	4b96      	ldr	r3, [pc, #600]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b04      	cmp	r3, #4
 800564e:	d00c      	beq.n	800566a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005650:	4b93      	ldr	r3, [pc, #588]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 030c 	and.w	r3, r3, #12
 8005658:	2b08      	cmp	r3, #8
 800565a:	d112      	bne.n	8005682 <HAL_RCC_OscConfig+0x62>
 800565c:	4b90      	ldr	r3, [pc, #576]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005668:	d10b      	bne.n	8005682 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566a:	4b8d      	ldr	r3, [pc, #564]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d06c      	beq.n	8005750 <HAL_RCC_OscConfig+0x130>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d168      	bne.n	8005750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e236      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x7a>
 800568c:	4b84      	ldr	r3, [pc, #528]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a83      	ldr	r2, [pc, #524]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e02e      	b.n	80056f8 <HAL_RCC_OscConfig+0xd8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0x9c>
 80056a2:	4b7f      	ldr	r3, [pc, #508]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a7e      	ldr	r2, [pc, #504]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b7c      	ldr	r3, [pc, #496]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a7b      	ldr	r2, [pc, #492]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e01d      	b.n	80056f8 <HAL_RCC_OscConfig+0xd8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0xc0>
 80056c6:	4b76      	ldr	r3, [pc, #472]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a75      	ldr	r2, [pc, #468]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a72      	ldr	r2, [pc, #456]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e00b      	b.n	80056f8 <HAL_RCC_OscConfig+0xd8>
 80056e0:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6e      	ldr	r2, [pc, #440]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	4b6c      	ldr	r3, [pc, #432]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6b      	ldr	r2, [pc, #428]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d013      	beq.n	8005728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fd fc4a 	bl	8002f98 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005708:	f7fd fc46 	bl	8002f98 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e1ea      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571a:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0xe8>
 8005726:	e014      	b.n	8005752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fd fc36 	bl	8002f98 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005730:	f7fd fc32 	bl	8002f98 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e1d6      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005742:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x110>
 800574e:	e000      	b.n	8005752 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d069      	beq.n	8005832 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800575e:	4b50      	ldr	r3, [pc, #320]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576a:	4b4d      	ldr	r3, [pc, #308]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b08      	cmp	r3, #8
 8005774:	d11c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x190>
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d116      	bne.n	80057b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_RCC_OscConfig+0x17a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d001      	beq.n	800579a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e1aa      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	493d      	ldr	r1, [pc, #244]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ae:	e040      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d023      	beq.n	8005800 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b8:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fd fbe8 	bl	8002f98 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057cc:	f7fd fbe4 	bl	8002f98 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e188      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057de:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ea:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4929      	ldr	r1, [pc, #164]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]
 80057fe:	e018      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005800:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a26      	ldr	r2, [pc, #152]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fd fbc4 	bl	8002f98 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005814:	f7fd fbc0 	bl	8002f98 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e164      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005826:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d038      	beq.n	80058b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d019      	beq.n	800587a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fd fba1 	bl	8002f98 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800585a:	f7fd fb9d 	bl	8002f98 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e141      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x23a>
 8005878:	e01a      	b.n	80058b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800587c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fd fb87 	bl	8002f98 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800588e:	f7fd fb83 	bl	8002f98 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d903      	bls.n	80058a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e127      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
 80058a0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	4b94      	ldr	r3, [pc, #592]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80058a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ee      	bne.n	800588e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80a4 	beq.w	8005a06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058be:	4b8e      	ldr	r3, [pc, #568]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ca:	4b8b      	ldr	r3, [pc, #556]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4a8a      	ldr	r2, [pc, #552]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d4:	6413      	str	r3, [r2, #64]	; 0x40
 80058d6:	4b88      	ldr	r3, [pc, #544]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058de:	60fb      	str	r3, [r7, #12]
 80058e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e6:	4b85      	ldr	r3, [pc, #532]	; (8005afc <HAL_RCC_OscConfig+0x4dc>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d118      	bne.n	8005924 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058f2:	4b82      	ldr	r3, [pc, #520]	; (8005afc <HAL_RCC_OscConfig+0x4dc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a81      	ldr	r2, [pc, #516]	; (8005afc <HAL_RCC_OscConfig+0x4dc>)
 80058f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058fe:	f7fd fb4b 	bl	8002f98 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005906:	f7fd fb47 	bl	8002f98 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b64      	cmp	r3, #100	; 0x64
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e0eb      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005918:	4b78      	ldr	r3, [pc, #480]	; (8005afc <HAL_RCC_OscConfig+0x4dc>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x31a>
 800592c:	4b72      	ldr	r3, [pc, #456]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4a71      	ldr	r2, [pc, #452]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	; 0x70
 8005938:	e02d      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x33c>
 8005942:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a6c      	ldr	r2, [pc, #432]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	4b6a      	ldr	r3, [pc, #424]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a69      	ldr	r2, [pc, #420]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005954:	f023 0304 	bic.w	r3, r3, #4
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	e01c      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b05      	cmp	r3, #5
 8005962:	d10c      	bne.n	800597e <HAL_RCC_OscConfig+0x35e>
 8005964:	4b64      	ldr	r3, [pc, #400]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a63      	ldr	r2, [pc, #396]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	4b61      	ldr	r3, [pc, #388]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a60      	ldr	r2, [pc, #384]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	e00b      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
 800597e:	4b5e      	ldr	r3, [pc, #376]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a5d      	ldr	r2, [pc, #372]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a5a      	ldr	r2, [pc, #360]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fd fafb 	bl	8002f98 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a4:	e00a      	b.n	80059bc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f7fd faf7 	bl	8002f98 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e099      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059bc:	4b4e      	ldr	r3, [pc, #312]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ee      	beq.n	80059a6 <HAL_RCC_OscConfig+0x386>
 80059c8:	e014      	b.n	80059f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ca:	f7fd fae5 	bl	8002f98 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d0:	e00a      	b.n	80059e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fd fae1 	bl	8002f98 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e083      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e8:	4b43      	ldr	r3, [pc, #268]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ee      	bne.n	80059d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	4a3e      	ldr	r2, [pc, #248]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d06f      	beq.n	8005aee <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a0e:	4b3a      	ldr	r3, [pc, #232]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 030c 	and.w	r3, r3, #12
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d067      	beq.n	8005aea <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d149      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a22:	4b35      	ldr	r3, [pc, #212]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a34      	ldr	r2, [pc, #208]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2e:	f7fd fab3 	bl	8002f98 <HAL_GetTick>
 8005a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a34:	e008      	b.n	8005a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a36:	f7fd faaf 	bl	8002f98 <HAL_GetTick>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d901      	bls.n	8005a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e053      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a48:	4b2b      	ldr	r3, [pc, #172]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f0      	bne.n	8005a36 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	019b      	lsls	r3, r3, #6
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	041b      	lsls	r3, r3, #16
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a76:	061b      	lsls	r3, r3, #24
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	4a1f      	ldr	r2, [pc, #124]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a80:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a82:	4b1d      	ldr	r3, [pc, #116]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1c      	ldr	r2, [pc, #112]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005a88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fd fa83 	bl	8002f98 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a96:	f7fd fa7f 	bl	8002f98 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e023      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aa8:	4b13      	ldr	r3, [pc, #76]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d0f0      	beq.n	8005a96 <HAL_RCC_OscConfig+0x476>
 8005ab4:	e01b      	b.n	8005aee <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab6:	4b10      	ldr	r3, [pc, #64]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a0f      	ldr	r2, [pc, #60]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005abc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ac0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac2:	f7fd fa69 	bl	8002f98 <HAL_GetTick>
 8005ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ac8:	e008      	b.n	8005adc <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005aca:	f7fd fa65 	bl	8002f98 <HAL_GetTick>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e009      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_RCC_OscConfig+0x4d8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1f0      	bne.n	8005aca <HAL_RCC_OscConfig+0x4aa>
 8005ae8:	e001      	b.n	8005aee <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e000      	b.n	8005af0 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8005aee:	2300      	movs	r3, #0
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40023800 	.word	0x40023800
 8005afc:	40007000 	.word	0x40007000

08005b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0ce      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b18:	4b69      	ldr	r3, [pc, #420]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d910      	bls.n	8005b48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b26:	4b66      	ldr	r3, [pc, #408]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f023 020f 	bic.w	r2, r3, #15
 8005b2e:	4964      	ldr	r1, [pc, #400]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b62      	ldr	r3, [pc, #392]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e0b6      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d020      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b60:	4b58      	ldr	r3, [pc, #352]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	4a57      	ldr	r2, [pc, #348]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d005      	beq.n	8005b84 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b78:	4b52      	ldr	r3, [pc, #328]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	4a51      	ldr	r2, [pc, #324]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b82:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b84:	4b4f      	ldr	r3, [pc, #316]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	494c      	ldr	r1, [pc, #304]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d040      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d107      	bne.n	8005bba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005baa:	4b46      	ldr	r3, [pc, #280]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d115      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e07d      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc2:	4b40      	ldr	r3, [pc, #256]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e071      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd2:	4b3c      	ldr	r3, [pc, #240]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e069      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005be2:	4b38      	ldr	r3, [pc, #224]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f023 0203 	bic.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	4935      	ldr	r1, [pc, #212]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf4:	f7fd f9d0 	bl	8002f98 <HAL_GetTick>
 8005bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bfa:	e00a      	b.n	8005c12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bfc:	f7fd f9cc 	bl	8002f98 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e051      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c12:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 020c 	and.w	r2, r3, #12
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d1eb      	bne.n	8005bfc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c24:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	683a      	ldr	r2, [r7, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d210      	bcs.n	8005c54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c32:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 020f 	bic.w	r2, r3, #15
 8005c3a:	4921      	ldr	r1, [pc, #132]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c42:	4b1f      	ldr	r3, [pc, #124]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d001      	beq.n	8005c54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e030      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 0304 	and.w	r3, r3, #4
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d008      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c60:	4b18      	ldr	r3, [pc, #96]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	4915      	ldr	r1, [pc, #84]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d009      	beq.n	8005c92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c7e:	4b11      	ldr	r3, [pc, #68]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	490d      	ldr	r1, [pc, #52]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c92:	f000 f81d 	bl	8005cd0 <HAL_RCC_GetSysClockFreq>
 8005c96:	4602      	mov	r2, r0
 8005c98:	4b0a      	ldr	r3, [pc, #40]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	091b      	lsrs	r3, r3, #4
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	4909      	ldr	r1, [pc, #36]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	5ccb      	ldrb	r3, [r1, r3]
 8005ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8005caa:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <HAL_RCC_ClockConfig+0x1cc>)
 8005cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005cae:	200f      	movs	r0, #15
 8005cb0:	f7fd f92e 	bl	8002f10 <HAL_InitTick>

  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	40023c00 	.word	0x40023c00
 8005cc4:	40023800 	.word	0x40023800
 8005cc8:	0800f6a0 	.word	0x0800f6a0
 8005ccc:	20000058 	.word	0x20000058

08005cd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cd0:	b5b0      	push	{r4, r5, r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	6079      	str	r1, [r7, #4]
 8005cda:	2100      	movs	r1, #0
 8005cdc:	60f9      	str	r1, [r7, #12]
 8005cde:	2100      	movs	r1, #0
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ce6:	4952      	ldr	r1, [pc, #328]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ce8:	6889      	ldr	r1, [r1, #8]
 8005cea:	f001 010c 	and.w	r1, r1, #12
 8005cee:	2908      	cmp	r1, #8
 8005cf0:	d00d      	beq.n	8005d0e <HAL_RCC_GetSysClockFreq+0x3e>
 8005cf2:	2908      	cmp	r1, #8
 8005cf4:	f200 8094 	bhi.w	8005e20 <HAL_RCC_GetSysClockFreq+0x150>
 8005cf8:	2900      	cmp	r1, #0
 8005cfa:	d002      	beq.n	8005d02 <HAL_RCC_GetSysClockFreq+0x32>
 8005cfc:	2904      	cmp	r1, #4
 8005cfe:	d003      	beq.n	8005d08 <HAL_RCC_GetSysClockFreq+0x38>
 8005d00:	e08e      	b.n	8005e20 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d02:	4b4c      	ldr	r3, [pc, #304]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x164>)
 8005d04:	60bb      	str	r3, [r7, #8]
       break;
 8005d06:	e08e      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d08:	4b4b      	ldr	r3, [pc, #300]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d0a:	60bb      	str	r3, [r7, #8]
      break;
 8005d0c:	e08b      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d0e:	4948      	ldr	r1, [pc, #288]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d10:	6849      	ldr	r1, [r1, #4]
 8005d12:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005d16:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d18:	4945      	ldr	r1, [pc, #276]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d1a:	6849      	ldr	r1, [r1, #4]
 8005d1c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005d20:	2900      	cmp	r1, #0
 8005d22:	d024      	beq.n	8005d6e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d24:	4942      	ldr	r1, [pc, #264]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d26:	6849      	ldr	r1, [r1, #4]
 8005d28:	0989      	lsrs	r1, r1, #6
 8005d2a:	4608      	mov	r0, r1
 8005d2c:	f04f 0100 	mov.w	r1, #0
 8005d30:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005d34:	f04f 0500 	mov.w	r5, #0
 8005d38:	ea00 0204 	and.w	r2, r0, r4
 8005d3c:	ea01 0305 	and.w	r3, r1, r5
 8005d40:	493d      	ldr	r1, [pc, #244]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d42:	fb01 f003 	mul.w	r0, r1, r3
 8005d46:	2100      	movs	r1, #0
 8005d48:	fb01 f102 	mul.w	r1, r1, r2
 8005d4c:	1844      	adds	r4, r0, r1
 8005d4e:	493a      	ldr	r1, [pc, #232]	; (8005e38 <HAL_RCC_GetSysClockFreq+0x168>)
 8005d50:	fba2 0101 	umull	r0, r1, r2, r1
 8005d54:	1863      	adds	r3, r4, r1
 8005d56:	4619      	mov	r1, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	f7fa fa52 	bl	8000208 <__aeabi_uldivmod>
 8005d64:	4602      	mov	r2, r0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4613      	mov	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e04a      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d6e:	4b30      	ldr	r3, [pc, #192]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	099b      	lsrs	r3, r3, #6
 8005d74:	461a      	mov	r2, r3
 8005d76:	f04f 0300 	mov.w	r3, #0
 8005d7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d7e:	f04f 0100 	mov.w	r1, #0
 8005d82:	ea02 0400 	and.w	r4, r2, r0
 8005d86:	ea03 0501 	and.w	r5, r3, r1
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	4629      	mov	r1, r5
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	014b      	lsls	r3, r1, #5
 8005d98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d9c:	0142      	lsls	r2, r0, #5
 8005d9e:	4610      	mov	r0, r2
 8005da0:	4619      	mov	r1, r3
 8005da2:	1b00      	subs	r0, r0, r4
 8005da4:	eb61 0105 	sbc.w	r1, r1, r5
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	018b      	lsls	r3, r1, #6
 8005db2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005db6:	0182      	lsls	r2, r0, #6
 8005db8:	1a12      	subs	r2, r2, r0
 8005dba:	eb63 0301 	sbc.w	r3, r3, r1
 8005dbe:	f04f 0000 	mov.w	r0, #0
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	00d9      	lsls	r1, r3, #3
 8005dc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005dcc:	00d0      	lsls	r0, r2, #3
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	1912      	adds	r2, r2, r4
 8005dd4:	eb45 0303 	adc.w	r3, r5, r3
 8005dd8:	f04f 0000 	mov.w	r0, #0
 8005ddc:	f04f 0100 	mov.w	r1, #0
 8005de0:	0299      	lsls	r1, r3, #10
 8005de2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005de6:	0290      	lsls	r0, r2, #10
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	f7fa fa06 	bl	8000208 <__aeabi_uldivmod>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	460b      	mov	r3, r1
 8005e00:	4613      	mov	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	005b      	lsls	r3, r3, #1
 8005e12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1c:	60bb      	str	r3, [r7, #8]
      break;
 8005e1e:	e002      	b.n	8005e26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e20:	4b04      	ldr	r3, [pc, #16]	; (8005e34 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e22:	60bb      	str	r3, [r7, #8]
      break;
 8005e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e26:	68bb      	ldr	r3, [r7, #8]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005e30:	40023800 	.word	0x40023800
 8005e34:	00f42400 	.word	0x00f42400
 8005e38:	017d7840 	.word	0x017d7840

08005e3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e40:	4b03      	ldr	r3, [pc, #12]	; (8005e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e42:	681b      	ldr	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	20000058 	.word	0x20000058

08005e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005e58:	f7ff fff0 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	0a9b      	lsrs	r3, r3, #10
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	4903      	ldr	r1, [pc, #12]	; (8005e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6a:	5ccb      	ldrb	r3, [r1, r3]
 8005e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	40023800 	.word	0x40023800
 8005e78:	0800f6b0 	.word	0x0800f6b0

08005e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005e80:	f7ff ffdc 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005e84:	4602      	mov	r2, r0
 8005e86:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	0b5b      	lsrs	r3, r3, #13
 8005e8c:	f003 0307 	and.w	r3, r3, #7
 8005e90:	4903      	ldr	r1, [pc, #12]	; (8005ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e92:	5ccb      	ldrb	r3, [r1, r3]
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	40023800 	.word	0x40023800
 8005ea0:	0800f6b0 	.word	0x0800f6b0

08005ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d012      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ecc:	4b69      	ldr	r3, [pc, #420]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4a68      	ldr	r2, [pc, #416]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ed2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005ed6:	6093      	str	r3, [r2, #8]
 8005ed8:	4b66      	ldr	r3, [pc, #408]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee0:	4964      	ldr	r1, [pc, #400]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d017      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005efe:	4b5d      	ldr	r3, [pc, #372]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0c:	4959      	ldr	r1, [pc, #356]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f1c:	d101      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d017      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005f3a:	4b4e      	ldr	r3, [pc, #312]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f48:	494a      	ldr	r1, [pc, #296]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f58:	d101      	bne.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005f66:	2301      	movs	r3, #1
 8005f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005f76:	2301      	movs	r3, #1
 8005f78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0320 	and.w	r3, r3, #32
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f000 808b 	beq.w	800609e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f88:	4b3a      	ldr	r3, [pc, #232]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f8c:	4a39      	ldr	r2, [pc, #228]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f92:	6413      	str	r3, [r2, #64]	; 0x40
 8005f94:	4b37      	ldr	r3, [pc, #220]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005fa0:	4b35      	ldr	r3, [pc, #212]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a34      	ldr	r2, [pc, #208]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fac:	f7fc fff4 	bl	8002f98 <HAL_GetTick>
 8005fb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb4:	f7fc fff0 	bl	8002f98 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b64      	cmp	r3, #100	; 0x64
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e355      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005fc6:	4b2c      	ldr	r3, [pc, #176]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0f0      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005fd2:	4b28      	ldr	r3, [pc, #160]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d035      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d02e      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ff0:	4b20      	ldr	r3, [pc, #128]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	4a1d      	ldr	r2, [pc, #116]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006004:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006006:	4b1b      	ldr	r3, [pc, #108]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800600c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006010:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006012:	4a18      	ldr	r2, [pc, #96]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006018:	4b16      	ldr	r3, [pc, #88]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d014      	beq.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fc ffb8 	bl	8002f98 <HAL_GetTick>
 8006028:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800602a:	e00a      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800602c:	f7fc ffb4 	bl	8002f98 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	f241 3288 	movw	r2, #5000	; 0x1388
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e317      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006042:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0ee      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006056:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800605a:	d111      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800605c:	4b05      	ldr	r3, [pc, #20]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800606a:	400b      	ands	r3, r1
 800606c:	4901      	ldr	r1, [pc, #4]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]
 8006072:	e00b      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006074:	40023800 	.word	0x40023800
 8006078:	40007000 	.word	0x40007000
 800607c:	0ffffcff 	.word	0x0ffffcff
 8006080:	4bb0      	ldr	r3, [pc, #704]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	4aaf      	ldr	r2, [pc, #700]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006086:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800608a:	6093      	str	r3, [r2, #8]
 800608c:	4bad      	ldr	r3, [pc, #692]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800608e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006098:	49aa      	ldr	r1, [pc, #680]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800609a:	4313      	orrs	r3, r2
 800609c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d010      	beq.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80060aa:	4ba6      	ldr	r3, [pc, #664]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b0:	4aa4      	ldr	r2, [pc, #656]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80060ba:	4ba2      	ldr	r3, [pc, #648]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c4:	499f      	ldr	r1, [pc, #636]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00a      	beq.n	80060ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060d8:	4b9a      	ldr	r3, [pc, #616]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060e6:	4997      	ldr	r1, [pc, #604]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060fa:	4b92      	ldr	r3, [pc, #584]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006108:	498e      	ldr	r1, [pc, #568]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800611c:	4b89      	ldr	r3, [pc, #548]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800612a:	4986      	ldr	r1, [pc, #536]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800612c:	4313      	orrs	r3, r2
 800612e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00a      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800613e:	4b81      	ldr	r3, [pc, #516]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006144:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614c:	497d      	ldr	r1, [pc, #500]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800614e:	4313      	orrs	r3, r2
 8006150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00a      	beq.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006160:	4b78      	ldr	r3, [pc, #480]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006166:	f023 0203 	bic.w	r2, r3, #3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616e:	4975      	ldr	r1, [pc, #468]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006170:	4313      	orrs	r3, r2
 8006172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00a      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006182:	4b70      	ldr	r3, [pc, #448]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006188:	f023 020c 	bic.w	r2, r3, #12
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006190:	496c      	ldr	r1, [pc, #432]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006192:	4313      	orrs	r3, r2
 8006194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80061a4:	4b67      	ldr	r3, [pc, #412]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061b2:	4964      	ldr	r1, [pc, #400]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061c6:	4b5f      	ldr	r3, [pc, #380]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d4:	495b      	ldr	r1, [pc, #364]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061e8:	4b56      	ldr	r3, [pc, #344]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f6:	4953      	ldr	r1, [pc, #332]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800620a:	4b4e      	ldr	r3, [pc, #312]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800620c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006210:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006218:	494a      	ldr	r1, [pc, #296]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800621a:	4313      	orrs	r3, r2
 800621c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00a      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800622c:	4b45      	ldr	r3, [pc, #276]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800622e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006232:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623a:	4942      	ldr	r1, [pc, #264]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800624e:	4b3d      	ldr	r3, [pc, #244]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800625c:	4939      	ldr	r1, [pc, #228]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800625e:	4313      	orrs	r3, r2
 8006260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006270:	4b34      	ldr	r3, [pc, #208]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800627e:	4931      	ldr	r1, [pc, #196]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006280:	4313      	orrs	r3, r2
 8006282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d011      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006292:	4b2c      	ldr	r3, [pc, #176]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006298:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062a0:	4928      	ldr	r1, [pc, #160]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062b0:	d101      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80062b2:	2301      	movs	r3, #1
 80062b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 0308 	and.w	r3, r3, #8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d001      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80062c2:	2301      	movs	r3, #1
 80062c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e0:	4918      	ldr	r1, [pc, #96]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00b      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80062f4:	4b13      	ldr	r3, [pc, #76]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006304:	490f      	ldr	r1, [pc, #60]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d005      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800631a:	f040 80d8 	bne.w	80064ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a08      	ldr	r2, [pc, #32]	; (8006344 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006324:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800632a:	f7fc fe35 	bl	8002f98 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006330:	e00a      	b.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006332:	f7fc fe31 	bl	8002f98 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b64      	cmp	r3, #100	; 0x64
 800633e:	d903      	bls.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e196      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006344:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006348:	4b6c      	ldr	r3, [pc, #432]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ee      	bne.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b00      	cmp	r3, #0
 800635e:	d021      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	d11d      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006368:	4b64      	ldr	r3, [pc, #400]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800636a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800636e:	0c1b      	lsrs	r3, r3, #16
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006376:	4b61      	ldr	r3, [pc, #388]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637c:	0e1b      	lsrs	r3, r3, #24
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	019a      	lsls	r2, r3, #6
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	041b      	lsls	r3, r3, #16
 800638e:	431a      	orrs	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	061b      	lsls	r3, r3, #24
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	071b      	lsls	r3, r3, #28
 800639c:	4957      	ldr	r1, [pc, #348]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x516>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b8:	d00a      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d02e      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063ce:	d129      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80063d0:	4b4a      	ldr	r3, [pc, #296]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063d6:	0c1b      	lsrs	r3, r3, #16
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80063de:	4b47      	ldr	r3, [pc, #284]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80063e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063e4:	0f1b      	lsrs	r3, r3, #28
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	019a      	lsls	r2, r3, #6
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	431a      	orrs	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	061b      	lsls	r3, r3, #24
 80063fe:	431a      	orrs	r2, r3
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	071b      	lsls	r3, r3, #28
 8006404:	493d      	ldr	r1, [pc, #244]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006406:	4313      	orrs	r3, r2
 8006408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800640c:	4b3b      	ldr	r3, [pc, #236]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800640e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006412:	f023 021f 	bic.w	r2, r3, #31
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641a:	3b01      	subs	r3, #1
 800641c:	4937      	ldr	r1, [pc, #220]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800641e:	4313      	orrs	r3, r2
 8006420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800642c:	2b00      	cmp	r3, #0
 800642e:	d01d      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006430:	4b32      	ldr	r3, [pc, #200]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006436:	0e1b      	lsrs	r3, r3, #24
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800643e:	4b2f      	ldr	r3, [pc, #188]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006444:	0f1b      	lsrs	r3, r3, #28
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	019a      	lsls	r2, r3, #6
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	041b      	lsls	r3, r3, #16
 8006458:	431a      	orrs	r2, r3
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	061b      	lsls	r3, r3, #24
 800645e:	431a      	orrs	r2, r3
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	071b      	lsls	r3, r3, #28
 8006464:	4925      	ldr	r1, [pc, #148]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006466:	4313      	orrs	r3, r2
 8006468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006474:	2b00      	cmp	r3, #0
 8006476:	d011      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	019a      	lsls	r2, r3, #6
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	061b      	lsls	r3, r3, #24
 800648c:	431a      	orrs	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	071b      	lsls	r3, r3, #28
 8006494:	4919      	ldr	r1, [pc, #100]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800649c:	4b17      	ldr	r3, [pc, #92]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a16      	ldr	r2, [pc, #88]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a8:	f7fc fd76 	bl	8002f98 <HAL_GetTick>
 80064ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064ae:	e008      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064b0:	f7fc fd72 	bl	8002f98 <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b64      	cmp	r3, #100	; 0x64
 80064bc:	d901      	bls.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e0d7      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064c2:	4b0e      	ldr	r3, [pc, #56]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	f040 80cd 	bne.w	8006670 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80064d6:	4b09      	ldr	r3, [pc, #36]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a08      	ldr	r2, [pc, #32]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80064dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064e2:	f7fc fd59 	bl	8002f98 <HAL_GetTick>
 80064e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80064e8:	e00a      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064ea:	f7fc fd55 	bl	8002f98 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	2b64      	cmp	r3, #100	; 0x64
 80064f6:	d903      	bls.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e0ba      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80064fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006500:	4b5e      	ldr	r3, [pc, #376]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800650c:	d0ed      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800652a:	2b00      	cmp	r3, #0
 800652c:	d02e      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	2b00      	cmp	r3, #0
 8006534:	d12a      	bne.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006536:	4b51      	ldr	r3, [pc, #324]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006544:	4b4d      	ldr	r3, [pc, #308]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654a:	0f1b      	lsrs	r3, r3, #28
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	019a      	lsls	r2, r3, #6
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	061b      	lsls	r3, r3, #24
 8006564:	431a      	orrs	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	071b      	lsls	r3, r3, #28
 800656a:	4944      	ldr	r1, [pc, #272]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800656c:	4313      	orrs	r3, r2
 800656e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006572:	4b42      	ldr	r3, [pc, #264]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006578:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	3b01      	subs	r3, #1
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	493d      	ldr	r1, [pc, #244]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d022      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800659c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065a0:	d11d      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065a2:	4b36      	ldr	r3, [pc, #216]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a8:	0e1b      	lsrs	r3, r3, #24
 80065aa:	f003 030f 	and.w	r3, r3, #15
 80065ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80065b0:	4b32      	ldr	r3, [pc, #200]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065b6:	0f1b      	lsrs	r3, r3, #28
 80065b8:	f003 0307 	and.w	r3, r3, #7
 80065bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	019a      	lsls	r2, r3, #6
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1b      	ldr	r3, [r3, #32]
 80065c8:	041b      	lsls	r3, r3, #16
 80065ca:	431a      	orrs	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	061b      	lsls	r3, r3, #24
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	071b      	lsls	r3, r3, #28
 80065d6:	4929      	ldr	r1, [pc, #164]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d028      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80065ea:	4b24      	ldr	r3, [pc, #144]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	0e1b      	lsrs	r3, r3, #24
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80065fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065fe:	0c1b      	lsrs	r3, r3, #16
 8006600:	f003 0303 	and.w	r3, r3, #3
 8006604:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	019a      	lsls	r2, r3, #6
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	041b      	lsls	r3, r3, #16
 8006610:	431a      	orrs	r2, r3
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	061b      	lsls	r3, r3, #24
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	071b      	lsls	r3, r3, #28
 800661e:	4917      	ldr	r1, [pc, #92]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006626:	4b15      	ldr	r3, [pc, #84]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	4911      	ldr	r1, [pc, #68]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006636:	4313      	orrs	r3, r2
 8006638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800663c:	4b0f      	ldr	r3, [pc, #60]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0e      	ldr	r2, [pc, #56]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006648:	f7fc fca6 	bl	8002f98 <HAL_GetTick>
 800664c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006650:	f7fc fca2 	bl	8002f98 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b64      	cmp	r3, #100	; 0x64
 800665c:	d901      	bls.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e007      	b.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006662:	4b06      	ldr	r3, [pc, #24]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800666a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666e:	d1ef      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40023800 	.word	0x40023800

08006680 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800669e:	f040 808c 	bne.w	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80066a2:	4b95      	ldr	r3, [pc, #596]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80066a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066a8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80066b0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066b8:	d07c      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066c0:	d87d      	bhi.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d004      	beq.n	80066d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ce:	d039      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80066d0:	e075      	b.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80066d2:	4b89      	ldr	r3, [pc, #548]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d108      	bne.n	80066f0 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80066de:	4b86      	ldr	r3, [pc, #536]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066e6:	4a85      	ldr	r2, [pc, #532]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	e007      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80066f0:	4b81      	ldr	r3, [pc, #516]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066f8:	4a81      	ldr	r2, [pc, #516]	; (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80066fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fe:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006700:	4b7d      	ldr	r3, [pc, #500]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006706:	0e1b      	lsrs	r3, r3, #24
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800670e:	4b7a      	ldr	r3, [pc, #488]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006714:	099b      	lsrs	r3, r3, #6
 8006716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	fb02 f203 	mul.w	r2, r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	fbb2 f3f3 	udiv	r3, r2, r3
 8006726:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006728:	4b73      	ldr	r3, [pc, #460]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	f003 031f 	and.w	r3, r3, #31
 8006734:	3301      	adds	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	617b      	str	r3, [r7, #20]
        break;
 8006742:	e03d      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006744:	4b6c      	ldr	r3, [pc, #432]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d108      	bne.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006750:	4b69      	ldr	r3, [pc, #420]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006758:	4a68      	ldr	r2, [pc, #416]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800675a:	fbb2 f3f3 	udiv	r3, r2, r3
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	e007      	b.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006762:	4b65      	ldr	r3, [pc, #404]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800676a:	4a65      	ldr	r2, [pc, #404]	; (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800676c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006770:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006772:	4b61      	ldr	r3, [pc, #388]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006778:	0e1b      	lsrs	r3, r3, #24
 800677a:	f003 030f 	and.w	r3, r3, #15
 800677e:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006780:	4b5d      	ldr	r3, [pc, #372]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006786:	099b      	lsrs	r3, r3, #6
 8006788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	fb02 f203 	mul.w	r2, r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	fbb2 f3f3 	udiv	r3, r2, r3
 8006798:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800679a:	4b57      	ldr	r3, [pc, #348]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800679c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a0:	f003 031f 	and.w	r3, r3, #31
 80067a4:	3301      	adds	r3, #1
 80067a6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
        break;
 80067b2:	e005      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80067b4:	4b53      	ldr	r3, [pc, #332]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80067b6:	617b      	str	r3, [r7, #20]
        break;
 80067b8:	e002      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 80067ba:	bf00      	nop
 80067bc:	e000      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 80067be:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c6:	f040 808c 	bne.w	80068e2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 80067ca:	4b4b      	ldr	r3, [pc, #300]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067d0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80067d8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067e0:	d07c      	beq.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067e8:	d87d      	bhi.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067f6:	d039      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80067f8:	e075      	b.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80067fa:	4b3f      	ldr	r3, [pc, #252]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d108      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006806:	4b3c      	ldr	r3, [pc, #240]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800680e:	4a3b      	ldr	r2, [pc, #236]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	613b      	str	r3, [r7, #16]
 8006816:	e007      	b.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006818:	4b37      	ldr	r3, [pc, #220]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006820:	4a37      	ldr	r2, [pc, #220]	; (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006822:	fbb2 f3f3 	udiv	r3, r2, r3
 8006826:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006828:	4b33      	ldr	r3, [pc, #204]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800682a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800682e:	0e1b      	lsrs	r3, r3, #24
 8006830:	f003 030f 	and.w	r3, r3, #15
 8006834:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006836:	4b30      	ldr	r3, [pc, #192]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	099b      	lsrs	r3, r3, #6
 800683e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	fb02 f203 	mul.w	r2, r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	fbb2 f3f3 	udiv	r3, r2, r3
 800684e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006850:	4b29      	ldr	r3, [pc, #164]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	3301      	adds	r3, #1
 800685e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	fbb2 f3f3 	udiv	r3, r2, r3
 8006868:	617b      	str	r3, [r7, #20]
        break;
 800686a:	e03d      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800686c:	4b22      	ldr	r3, [pc, #136]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d108      	bne.n	800688a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006878:	4b1f      	ldr	r3, [pc, #124]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006880:	4a1e      	ldr	r2, [pc, #120]	; (80068fc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006882:	fbb2 f3f3 	udiv	r3, r2, r3
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	e007      	b.n	800689a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800688a:	4b1b      	ldr	r3, [pc, #108]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006892:	4a1b      	ldr	r2, [pc, #108]	; (8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800689a:	4b17      	ldr	r3, [pc, #92]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800689c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a0:	0e1b      	lsrs	r3, r3, #24
 80068a2:	f003 030f 	and.w	r3, r3, #15
 80068a6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80068a8:	4b13      	ldr	r3, [pc, #76]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068ae:	099b      	lsrs	r3, r3, #6
 80068b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	fb02 f203 	mul.w	r2, r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80068c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	3301      	adds	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d8:	617b      	str	r3, [r7, #20]
        break;
 80068da:	e005      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80068dc:	4b09      	ldr	r3, [pc, #36]	; (8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80068de:	617b      	str	r3, [r7, #20]
        break;
 80068e0:	e002      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80068e2:	bf00      	nop
 80068e4:	e000      	b.n	80068e8 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80068e6:	bf00      	nop

  return frequency;
 80068e8:	697b      	ldr	r3, [r7, #20]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40023800 	.word	0x40023800
 80068fc:	00f42400 	.word	0x00f42400
 8006900:	017d7840 	.word	0x017d7840
 8006904:	00bb8000 	.word	0x00bb8000

08006908 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e14d      	b.n	8006bc2 <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));
  
  if(hsai->State == HAL_SAI_STATE_RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f003 fdda 	bl	800a4f4 <HAL_SAI_MspInit>
  }
  
  hsai->State = HAL_SAI_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb3b 	bl	8006fc4 <SAI_Disable>
  
  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d00c      	beq.n	8006970 <HAL_SAI_Init+0x68>
 8006956:	2b02      	cmp	r3, #2
 8006958:	d80d      	bhi.n	8006976 <HAL_SAI_Init+0x6e>
 800695a:	2b00      	cmp	r3, #0
 800695c:	d002      	beq.n	8006964 <HAL_SAI_Init+0x5c>
 800695e:	2b01      	cmp	r3, #1
 8006960:	d003      	beq.n	800696a <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 8006962:	e008      	b.n	8006976 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
      break;
 8006968:	e006      	b.n	8006978 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800696a:	2310      	movs	r3, #16
 800696c:	61fb      	str	r3, [r7, #28]
      break;
 800696e:	e003      	b.n	8006978 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8006970:	2320      	movs	r3, #32
 8006972:	61fb      	str	r3, [r7, #28]
      break;
 8006974:	e000      	b.n	8006978 <HAL_SAI_Init+0x70>
    break;
 8006976:	bf00      	nop
  }
  
  switch(hsai->Init.Synchro)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b03      	cmp	r3, #3
 800697e:	d81e      	bhi.n	80069be <HAL_SAI_Init+0xb6>
 8006980:	a201      	add	r2, pc, #4	; (adr r2, 8006988 <HAL_SAI_Init+0x80>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	08006999 	.word	0x08006999
 800698c:	0800699f 	.word	0x0800699f
 8006990:	080069a7 	.word	0x080069a7
 8006994:	080069af 	.word	0x080069af
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	617b      	str	r3, [r7, #20]
      }
      break;
 800699c:	e010      	b.n	80069c0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800699e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a2:	617b      	str	r3, [r7, #20]
      }
      break;
 80069a4:	e00c      	b.n	80069c0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80069a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069aa:	617b      	str	r3, [r7, #20]
      }
      break;
 80069ac:	e008      	b.n	80069c0 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80069ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069b2:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f043 0301 	orr.w	r3, r3, #1
 80069ba:	61fb      	str	r3, [r7, #28]
      }
      break;
 80069bc:	e000      	b.n	80069c0 <HAL_SAI_Init+0xb8>
  default:
    break;      
 80069be:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a81      	ldr	r2, [pc, #516]	; (8006bcc <HAL_SAI_Init+0x2c4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d004      	beq.n	80069d4 <HAL_SAI_Init+0xcc>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a80      	ldr	r2, [pc, #512]	; (8006bd0 <HAL_SAI_Init+0x2c8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d103      	bne.n	80069dc <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80069d4:	4a7f      	ldr	r2, [pc, #508]	; (8006bd4 <HAL_SAI_Init+0x2cc>)
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	e002      	b.n	80069e2 <HAL_SAI_Init+0xda>
  }
  else 
  {
    SAI2->GCR = tmpregisterGCR;
 80069dc:	4a7e      	ldr	r2, [pc, #504]	; (8006bd8 <HAL_SAI_Init+0x2d0>)
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d043      	beq.n	8006a72 <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a76      	ldr	r2, [pc, #472]	; (8006bcc <HAL_SAI_Init+0x2c4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d004      	beq.n	8006a02 <HAL_SAI_Init+0xfa>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a74      	ldr	r2, [pc, #464]	; (8006bd0 <HAL_SAI_Init+0x2c8>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d104      	bne.n	8006a0c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8006a02:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006a06:	f7ff fe3b 	bl	8006680 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a0a:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a72      	ldr	r2, [pc, #456]	; (8006bdc <HAL_SAI_Init+0x2d4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d004      	beq.n	8006a20 <HAL_SAI_Init+0x118>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a71      	ldr	r2, [pc, #452]	; (8006be0 <HAL_SAI_Init+0x2d8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d104      	bne.n	8006a2a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8006a20:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006a24:	f7ff fe2c 	bl	8006680 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a28:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4613      	mov	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4413      	add	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	461a      	mov	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	69db      	ldr	r3, [r3, #28]
 8006a3a:	025b      	lsls	r3, r3, #9
 8006a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a40:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a67      	ldr	r2, [pc, #412]	; (8006be4 <HAL_SAI_Init+0x2dc>)
 8006a46:	fba2 2303 	umull	r2, r3, r2, r3
 8006a4a:	08da      	lsrs	r2, r3, #3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	621a      	str	r2, [r3, #32]
    
    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 8006a50:	68f9      	ldr	r1, [r7, #12]
 8006a52:	4b64      	ldr	r3, [pc, #400]	; (8006be4 <HAL_SAI_Init+0x2dc>)
 8006a54:	fba3 2301 	umull	r2, r3, r3, r1
 8006a58:	08da      	lsrs	r2, r3, #3
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	1aca      	subs	r2, r1, r3
 8006a64:	2a08      	cmp	r2, #8
 8006a66:	d904      	bls.n	8006a72 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	621a      	str	r2, [r3, #32]
    }
  }
  
  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_SAI_Init+0x17a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d109      	bne.n	8006a96 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d101      	bne.n	8006a8e <HAL_SAI_Init+0x186>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	e001      	b.n	8006a92 <HAL_SAI_Init+0x18a>
 8006a8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	e008      	b.n	8006aa8 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d102      	bne.n	8006aa4 <HAL_SAI_Init+0x19c>
 8006a9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa2:	e000      	b.n	8006aa6 <HAL_SAI_Init+0x19e>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61bb      	str	r3, [r7, #24]
  }
  
  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b4d      	ldr	r3, [pc, #308]	; (8006be8 <HAL_SAI_Init+0x2e0>)
 8006ab4:	400b      	ands	r3, r1
 8006ab6:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);
  
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6819      	ldr	r1, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006acc:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	431a      	orrs	r2, r3
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8006ae0:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006aec:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	051b      	lsls	r3, r3, #20
 8006af4:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	601a      	str	r2, [r3, #0]
  
  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6859      	ldr	r1, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	4b38      	ldr	r3, [pc, #224]	; (8006bec <HAL_SAI_Init+0x2e4>)
 8006b0a:	400b      	ands	r3, r1
 8006b0c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6859      	ldr	r1, [r3, #4]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	431a      	orrs	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	605a      	str	r2, [r3, #4]
  
  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	4b2e      	ldr	r3, [pc, #184]	; (8006bf0 <HAL_SAI_Init+0x2e8>)
 8006b38:	400b      	ands	r3, r1
 8006b3a:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6899      	ldr	r1, [r3, #8]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b46:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006b4c:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 8006b52:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8006b58:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 8006b62:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	609a      	str	r2, [r3, #8]
  
  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68d9      	ldr	r1, [r3, #12]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	f24f 0320 	movw	r3, #61472	; 0xf020
 8006b7a:	400b      	ands	r3, r1
 8006b7c:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));
  
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68d9      	ldr	r1, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8c:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	021b      	lsls	r3, r3, #8
 8006b9e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  
  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
  
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3720      	adds	r7, #32
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	40015804 	.word	0x40015804
 8006bd0:	40015824 	.word	0x40015824
 8006bd4:	40015800 	.word	0x40015800
 8006bd8:	40015c00 	.word	0x40015c00
 8006bdc:	40015c04 	.word	0x40015c04
 8006be0:	40015c24 	.word	0x40015c24
 8006be4:	cccccccd 	.word	0xcccccccd
 8006be8:	ff05c010 	.word	0xff05c010
 8006bec:	ffff1ff0 	.word	0xffff1ff0
 8006bf0:	fff88000 	.word	0xfff88000

08006bf4 <HAL_SAI_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit(SAI_HandleTypeDef *hsai, uint8_t* pData, uint16_t Size, uint32_t Timeout)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8006c04:	f7fc f9c8 	bl	8002f98 <HAL_GetTick>
 8006c08:	6178      	str	r0, [r7, #20]

  if((pData == NULL ) || (Size == 0))
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <HAL_SAI_Transmit+0x22>
 8006c10:	88fb      	ldrh	r3, [r7, #6]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d101      	bne.n	8006c1a <HAL_SAI_Transmit+0x26>
  {
    return  HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e0b6      	b.n	8006d88 <HAL_SAI_Transmit+0x194>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	f040 80af 	bne.w	8006d86 <HAL_SAI_Transmit+0x192>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_SAI_Transmit+0x42>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e0a8      	b.n	8006d88 <HAL_SAI_Transmit+0x194>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->XferSize = Size;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	88fa      	ldrh	r2, [r7, #6]
 8006c42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	88fa      	ldrh	r2, [r7, #6]
 8006c4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->pBuffPtr = pData;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2212      	movs	r2, #18
 8006c58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d17a      	bne.n	8006d68 <HAL_SAI_Transmit+0x174>
    {
      /* fill the fifo with data before to enabled the SAI */
      SAI_FillFifo(hsai);
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 f958 	bl	8006f28 <SAI_FillFifo>
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006c86:	601a      	str	r2, [r3, #0]
    }

    while(hsai->XferCount > 0)
 8006c88:	e06e      	b.n	8006d68 <HAL_SAI_Transmit+0x174>
    {
      /* Write data if the FIFO is not full */
      if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c98:	d035      	beq.n	8006d06 <HAL_SAI_Transmit+0x112>
      {
        if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d10d      	bne.n	8006cbe <HAL_SAI_Transmit+0xca>
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <HAL_SAI_Transmit+0xca>
        {
          hsai->Instance->DR = (*hsai->pBuffPtr++);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cae:	1c59      	adds	r1, r3, #1
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	6651      	str	r1, [r2, #100]	; 0x64
 8006cb4:	781a      	ldrb	r2, [r3, #0]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	61da      	str	r2, [r3, #28]
 8006cbc:	e01a      	b.n	8006cf4 <HAL_SAI_Transmit+0x100>
        }
        else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cc2:	2b80      	cmp	r3, #128	; 0x80
 8006cc4:	d80b      	bhi.n	8006cde <HAL_SAI_Transmit+0xea>
        {
          hsai->Instance->DR = *((uint16_t *)hsai->pBuffPtr);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cca:	881a      	ldrh	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 2;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd6:	1c9a      	adds	r2, r3, #2
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	665a      	str	r2, [r3, #100]	; 0x64
 8006cdc:	e00a      	b.n	8006cf4 <HAL_SAI_Transmit+0x100>
        }
        else
        {
          hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	61da      	str	r2, [r3, #28]
          hsai->pBuffPtr+= 4;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cee:	1d1a      	adds	r2, r3, #4
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006d04:	e030      	b.n	8006d68 <HAL_SAI_Transmit+0x174>
      }
      else
      {
        /* Check for the Timeout */
        if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0c:	d02c      	beq.n	8006d68 <HAL_SAI_Transmit+0x174>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d007      	beq.n	8006d24 <HAL_SAI_Transmit+0x130>
 8006d14:	f7fc f940 	bl	8002f98 <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d221      	bcs.n	8006d68 <HAL_SAI_Transmit+0x174>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f04f 32ff 	mov.w	r2, #4294967295
 8006d3c:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f940 	bl	8006fc4 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f042 0208 	orr.w	r2, r2, #8
 8006d52:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e00f      	b.n	8006d88 <HAL_SAI_Transmit+0x194>
    while(hsai->XferCount > 0)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d18b      	bne.n	8006c8a <HAL_SAI_Transmit+0x96>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	e000      	b.n	8006d88 <HAL_SAI_Transmit+0x194>
  }
  else
  {
    return HAL_BUSY;
 8006d86:	2302      	movs	r3, #2
  }
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <HAL_SAI_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8006da0:	f7fc f8fa 	bl	8002f98 <HAL_GetTick>
 8006da4:	6178      	str	r0, [r7, #20]

  if((pData == NULL ) || (Size == 0))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_SAI_Receive+0x22>
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_SAI_Receive+0x26>
  {
    return  HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e0b4      	b.n	8006f20 <HAL_SAI_Receive+0x190>
  }

  if(hsai->State == HAL_SAI_STATE_READY)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	f040 80ad 	bne.w	8006f1e <HAL_SAI_Receive+0x18e>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_SAI_Receive+0x42>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e0a6      	b.n	8006f20 <HAL_SAI_Receive+0x190>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	88fa      	ldrh	r2, [r7, #6]
 8006de4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	88fa      	ldrh	r2, [r7, #6]
 8006dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2222      	movs	r2, #34	; 0x22
 8006df4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Check if the SAI is already enabled */
    if((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d178      	bne.n	8006f00 <HAL_SAI_Receive+0x170>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e1c:	601a      	str	r2, [r3, #0]
    }

    /* Receive data */
    while(hsai->XferCount > 0)
 8006e1e:	e06f      	b.n	8006f00 <HAL_SAI_Receive+0x170>
    {
      if((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_EMPTY)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	695b      	ldr	r3, [r3, #20]
 8006e26:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d037      	beq.n	8006e9e <HAL_SAI_Receive+0x10e>
      {
        if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	2b40      	cmp	r3, #64	; 0x40
 8006e34:	d10e      	bne.n	8006e54 <HAL_SAI_Receive+0xc4>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <HAL_SAI_Receive+0xc4>
        {
          (*hsai->pBuffPtr++) = hsai->Instance->DR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69d8      	ldr	r0, [r3, #28]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e48:	1c59      	adds	r1, r3, #1
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	6651      	str	r1, [r2, #100]	; 0x64
 8006e4e:	b2c2      	uxtb	r2, r0
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	e01b      	b.n	8006e8c <HAL_SAI_Receive+0xfc>
        }
        else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e58:	2b80      	cmp	r3, #128	; 0x80
 8006e5a:	d80c      	bhi.n	8006e76 <HAL_SAI_Receive+0xe6>
        {
          *((uint16_t*)hsai->pBuffPtr) = hsai->Instance->DR;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e66:	b292      	uxth	r2, r2
 8006e68:	801a      	strh	r2, [r3, #0]
          hsai->pBuffPtr+= 2;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e6e:	1c9a      	adds	r2, r3, #2
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	665a      	str	r2, [r3, #100]	; 0x64
 8006e74:	e00a      	b.n	8006e8c <HAL_SAI_Receive+0xfc>
        }
        else
        {
          *((uint32_t*)hsai->pBuffPtr) = hsai->Instance->DR;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e7e:	69d2      	ldr	r2, [r2, #28]
 8006e80:	601a      	str	r2, [r3, #0]
          hsai->pBuffPtr+= 4;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	665a      	str	r2, [r3, #100]	; 0x64
        }
        hsai->XferCount--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006e9c:	e030      	b.n	8006f00 <HAL_SAI_Receive+0x170>
      }
      else
      {
        /* Check for the Timeout */
        if((Timeout != HAL_MAX_DELAY) && ((Timeout == 0)||((HAL_GetTick() - tickstart) > Timeout)))
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d02c      	beq.n	8006f00 <HAL_SAI_Receive+0x170>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d007      	beq.n	8006ebc <HAL_SAI_Receive+0x12c>
 8006eac:	f7fc f874 	bl	8002f98 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d221      	bcs.n	8006f00 <HAL_SAI_Receive+0x170>
        {
          /* Update error code */
          hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Clear all the flags */
          hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	619a      	str	r2, [r3, #24]

          /* Disable SAI peripheral */
          SAI_Disable(hsai);
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f000 f874 	bl	8006fc4 <SAI_Disable>

          /* Flush the fifo */
          SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0208 	orr.w	r2, r2, #8
 8006eea:	605a      	str	r2, [r3, #4]

          /* Change the SAI state */
          hsai->State = HAL_SAI_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

          /* Process Unlocked */
          __HAL_UNLOCK(hsai);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e00f      	b.n	8006f20 <HAL_SAI_Receive+0x190>
    while(hsai->XferCount > 0)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d18a      	bne.n	8006e20 <HAL_SAI_Receive+0x90>
        }
      }
    }

    hsai->State = HAL_SAI_STATE_READY;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e000      	b.n	8006f20 <HAL_SAI_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8006f1e:	2302      	movs	r3, #2
  }
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3718      	adds	r7, #24
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <SAI_FillFifo>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static void SAI_FillFifo(SAI_HandleTypeDef *hsai)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* fill the fifo with data before to enabled the SAI */
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8006f30:	e034      	b.n	8006f9c <SAI_FillFifo+0x74>
  {
    if((hsai->Init.DataSize == SAI_DATASIZE_8) && (hsai->Init.CompandingMode == SAI_NOCOMPANDING))
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d10d      	bne.n	8006f56 <SAI_FillFifo+0x2e>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <SAI_FillFifo+0x2e>
    {
      hsai->Instance->DR = (*hsai->pBuffPtr++);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f46:	1c59      	adds	r1, r3, #1
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	6651      	str	r1, [r2, #100]	; 0x64
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	61da      	str	r2, [r3, #28]
 8006f54:	e01a      	b.n	8006f8c <SAI_FillFifo+0x64>
    }
    else if(hsai->Init.DataSize <= SAI_DATASIZE_16)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f5a:	2b80      	cmp	r3, #128	; 0x80
 8006f5c:	d80b      	bhi.n	8006f76 <SAI_FillFifo+0x4e>
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6812      	ldr	r2, [r2, #0]
 8006f68:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6e:	1c9a      	adds	r2, r3, #2
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	665a      	str	r2, [r3, #100]	; 0x64
 8006f74:	e00a      	b.n	8006f8c <SAI_FillFifo+0x64>
    }
    else
    {
      hsai->Instance->DR = *((uint32_t *)hsai->pBuffPtr);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	61da      	str	r2, [r3, #28]
      hsai->pBuffPtr+= 4;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f86:	1d1a      	adds	r2, r3, #4
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	665a      	str	r2, [r3, #100]	; 0x64
    }
    hsai->XferCount--;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  while(((hsai->Instance->SR & SAI_xSR_FLVL) != SAI_FIFOSTATUS_FULL) && (hsai->XferCount > 0))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006faa:	d004      	beq.n	8006fb6 <SAI_FillFifo+0x8e>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1bd      	bne.n	8006f32 <SAI_FillFifo+0xa>
  }
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8006fc4:	b490      	push	{r4, r7}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8006fcc:	4b16      	ldr	r3, [pc, #88]	; (8007028 <SAI_Disable+0x64>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	; (800702c <SAI_Disable+0x68>)
 8006fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd6:	0b1b      	lsrs	r3, r3, #12
 8006fd8:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006fec:	601a      	str	r2, [r3, #0]

  do 
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8006fee:	4623      	mov	r3, r4
 8006ff0:	1e5c      	subs	r4, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <SAI_Disable+0x48>
    {         
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ffc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	73fb      	strb	r3, [r7, #15]
      break;
 800700a:	e006      	b.n	800701a <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e9      	bne.n	8006fee <SAI_Disable+0x2a>

  return status;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bc90      	pop	{r4, r7}
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	20000058 	.word	0x20000058
 800702c:	95cbec1b 	.word	0x95cbec1b

08007030 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e025      	b.n	8007090 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d106      	bne.n	800705e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f003 fa41 	bl	800a4e0 <HAL_SDRAM_MspInit>
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2202      	movs	r2, #2
 8007062:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f001 faf3 	bl	800865c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6818      	ldr	r0, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	461a      	mov	r2, r3
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	f001 fb5d 	bl	8008740 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d101      	bne.n	80070b4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80070b0:	2302      	movs	r3, #2
 80070b2:	e018      	b.n	80070e6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	68b9      	ldr	r1, [r7, #8]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 fbbb 	bl	8008840 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d104      	bne.n	80070dc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2205      	movs	r2, #5
 80070d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80070da:	e003      	b.n	80070e4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b082      	sub	sp, #8
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
 80070f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d101      	bne.n	8007108 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007104:	2302      	movs	r3, #2
 8007106:	e00e      	b.n	8007126 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f001 fbb3 	bl	8008882 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e01d      	b.n	800717c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d106      	bne.n	800715a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f002 ff59 	bl	800a00c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2202      	movs	r2, #2
 800715e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	3304      	adds	r3, #4
 800716a:	4619      	mov	r1, r3
 800716c:	4610      	mov	r0, r2
 800716e:	f000 f93f 	bl	80073f0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3708      	adds	r7, #8
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2202      	movs	r2, #2
 8007190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b082      	sub	sp, #8
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d101      	bne.n	80071cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e01d      	b.n	8007208 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d2:	b2db      	uxtb	r3, r3
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d106      	bne.n	80071e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f002 ffe1 	bl	800a1a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2202      	movs	r2, #2
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f000 f8f9 	bl	80073f0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}  
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007224:	2b01      	cmp	r3, #1
 8007226:	d101      	bne.n	800722c <HAL_TIM_ConfigClockSource+0x1c>
 8007228:	2302      	movs	r3, #2
 800722a:	e0d8      	b.n	80073de <HAL_TIM_ConfigClockSource+0x1ce>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4b68      	ldr	r3, [pc, #416]	; (80073e8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8007248:	4013      	ands	r3, r2
 800724a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007252:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007264:	d052      	beq.n	800730c <HAL_TIM_ConfigClockSource+0xfc>
 8007266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800726a:	f200 80ae 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 800726e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007272:	d027      	beq.n	80072c4 <HAL_TIM_ConfigClockSource+0xb4>
 8007274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007278:	f200 80a7 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 800727c:	2b70      	cmp	r3, #112	; 0x70
 800727e:	d02a      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0xc6>
 8007280:	2b70      	cmp	r3, #112	; 0x70
 8007282:	f200 80a2 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 8007286:	2b60      	cmp	r3, #96	; 0x60
 8007288:	d063      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x142>
 800728a:	2b60      	cmp	r3, #96	; 0x60
 800728c:	f200 809d 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 8007290:	2b50      	cmp	r3, #80	; 0x50
 8007292:	d04e      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x122>
 8007294:	2b50      	cmp	r3, #80	; 0x50
 8007296:	f200 8098 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 800729a:	2b40      	cmp	r3, #64	; 0x40
 800729c:	d069      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x162>
 800729e:	2b40      	cmp	r3, #64	; 0x40
 80072a0:	f200 8093 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 80072a4:	2b30      	cmp	r3, #48	; 0x30
 80072a6:	f000 8089 	beq.w	80073bc <HAL_TIM_ConfigClockSource+0x1ac>
 80072aa:	2b30      	cmp	r3, #48	; 0x30
 80072ac:	f200 808d 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d07c      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x19e>
 80072b4:	2b20      	cmp	r3, #32
 80072b6:	f200 8088 	bhi.w	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d069      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x182>
 80072be:	2b10      	cmp	r3, #16
 80072c0:	d06e      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x190>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
    default:
    break;    
 80072c2:	e082      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x1ba>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6899      	ldr	r1, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	4b47      	ldr	r3, [pc, #284]	; (80073ec <HAL_TIM_ConfigClockSource+0x1dc>)
 80072d0:	400b      	ands	r3, r1
 80072d2:	6093      	str	r3, [r2, #8]
    break;
 80072d4:	e07a      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6899      	ldr	r1, [r3, #8]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f000 fb86 	bl	80079f6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	4b3c      	ldr	r3, [pc, #240]	; (80073e8 <HAL_TIM_ConfigClockSource+0x1d8>)
 80072f6:	4013      	ands	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007300:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	609a      	str	r2, [r3, #8]
    break;
 800730a:	e05f      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance, 
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6899      	ldr	r1, [r3, #8]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f000 fb6b 	bl	80079f6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800732e:	609a      	str	r2, [r3, #8]
    break;
 8007330:	e04c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6859      	ldr	r1, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	461a      	mov	r2, r3
 8007340:	f000 fad2 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2150      	movs	r1, #80	; 0x50
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fb33 	bl	80079b6 <TIM_ITRx_SetConfig>
    break;
 8007350:	e03c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	461a      	mov	r2, r3
 8007360:	f000 faf5 	bl	800794e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2160      	movs	r1, #96	; 0x60
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fb23 	bl	80079b6 <TIM_ITRx_SetConfig>
    break;
 8007370:	e02c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fab2 	bl	80078e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2140      	movs	r1, #64	; 0x40
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fb13 	bl	80079b6 <TIM_ITRx_SetConfig>
    break;
 8007390:	e01c      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fb0c 	bl	80079b6 <TIM_ITRx_SetConfig>
    break;
 800739e:	e015      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2110      	movs	r1, #16
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fb05 	bl	80079b6 <TIM_ITRx_SetConfig>
    break;
 80073ac:	e00e      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2120      	movs	r1, #32
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fafe 	bl	80079b6 <TIM_ITRx_SetConfig>
    break;
 80073ba:	e007      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	2130      	movs	r1, #48	; 0x30
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 faf7 	bl	80079b6 <TIM_ITRx_SetConfig>
    break;
 80073c8:	e000      	b.n	80073cc <HAL_TIM_ConfigClockSource+0x1bc>
    break;    
 80073ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	fffeff88 	.word	0xfffeff88
 80073ec:	fffefff8 	.word	0xfffefff8

080073f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a47      	ldr	r2, [pc, #284]	; (8007524 <TIM_Base_SetConfig+0x134>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d013      	beq.n	8007434 <TIM_Base_SetConfig+0x44>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007412:	d00f      	beq.n	8007434 <TIM_Base_SetConfig+0x44>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a44      	ldr	r2, [pc, #272]	; (8007528 <TIM_Base_SetConfig+0x138>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00b      	beq.n	8007434 <TIM_Base_SetConfig+0x44>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a43      	ldr	r2, [pc, #268]	; (800752c <TIM_Base_SetConfig+0x13c>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d007      	beq.n	8007434 <TIM_Base_SetConfig+0x44>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a42      	ldr	r2, [pc, #264]	; (8007530 <TIM_Base_SetConfig+0x140>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d003      	beq.n	8007434 <TIM_Base_SetConfig+0x44>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a41      	ldr	r2, [pc, #260]	; (8007534 <TIM_Base_SetConfig+0x144>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d101      	bne.n	8007438 <TIM_Base_SetConfig+0x48>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <TIM_Base_SetConfig+0x4a>
 8007438:	2300      	movs	r3, #0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a34      	ldr	r2, [pc, #208]	; (8007524 <TIM_Base_SetConfig+0x134>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d02b      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800745e:	d027      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a31      	ldr	r2, [pc, #196]	; (8007528 <TIM_Base_SetConfig+0x138>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d023      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a30      	ldr	r2, [pc, #192]	; (800752c <TIM_Base_SetConfig+0x13c>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d01f      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a2f      	ldr	r2, [pc, #188]	; (8007530 <TIM_Base_SetConfig+0x140>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d01b      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a2e      	ldr	r2, [pc, #184]	; (8007534 <TIM_Base_SetConfig+0x144>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d017      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a2d      	ldr	r2, [pc, #180]	; (8007538 <TIM_Base_SetConfig+0x148>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d013      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a2c      	ldr	r2, [pc, #176]	; (800753c <TIM_Base_SetConfig+0x14c>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d00f      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a2b      	ldr	r2, [pc, #172]	; (8007540 <TIM_Base_SetConfig+0x150>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00b      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a2a      	ldr	r2, [pc, #168]	; (8007544 <TIM_Base_SetConfig+0x154>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d007      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a29      	ldr	r2, [pc, #164]	; (8007548 <TIM_Base_SetConfig+0x158>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_Base_SetConfig+0xc0>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a28      	ldr	r2, [pc, #160]	; (800754c <TIM_Base_SetConfig+0x15c>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d101      	bne.n	80074b4 <TIM_Base_SetConfig+0xc4>
 80074b0:	2301      	movs	r3, #1
 80074b2:	e000      	b.n	80074b6 <TIM_Base_SetConfig+0xc6>
 80074b4:	2300      	movs	r3, #0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	689a      	ldr	r2, [r3, #8]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <TIM_Base_SetConfig+0x134>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d003      	beq.n	8007500 <TIM_Base_SetConfig+0x110>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a0e      	ldr	r2, [pc, #56]	; (8007534 <TIM_Base_SetConfig+0x144>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d101      	bne.n	8007504 <TIM_Base_SetConfig+0x114>
 8007500:	2301      	movs	r3, #1
 8007502:	e000      	b.n	8007506 <TIM_Base_SetConfig+0x116>
 8007504:	2300      	movs	r3, #0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	615a      	str	r2, [r3, #20]
}
 8007518:	bf00      	nop
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	40010000 	.word	0x40010000
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40010400 	.word	0x40010400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800
 8007544:	40001800 	.word	0x40001800
 8007548:	40001c00 	.word	0x40001c00
 800754c:	40002000 	.word	0x40002000

08007550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007550:	b480      	push	{r7}
 8007552:	b087      	sub	sp, #28
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;  
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	4b2a      	ldr	r3, [pc, #168]	; (8007630 <TIM_OC1_SetConfig+0xe0>)
 8007588:	4013      	ands	r3, r2
 800758a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f023 0302 	bic.w	r3, r3, #2
 80075a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a20      	ldr	r2, [pc, #128]	; (8007634 <TIM_OC1_SetConfig+0xe4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_OC1_SetConfig+0x70>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <TIM_OC1_SetConfig+0xe8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d101      	bne.n	80075c4 <TIM_OC1_SetConfig+0x74>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <TIM_OC1_SetConfig+0x76>
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01e      	beq.n	8007608 <TIM_OC1_SetConfig+0xb8>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f023 0308 	bic.w	r3, r3, #8
 80075d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	697a      	ldr	r2, [r7, #20]
 80075d8:	4313      	orrs	r3, r2
 80075da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f023 0304 	bic.w	r3, r3, #4
 80075e2:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4313      	orrs	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	621a      	str	r2, [r3, #32]
} 
 8007622:	bf00      	nop
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	fffeff8f 	.word	0xfffeff8f
 8007634:	40010000 	.word	0x40010000
 8007638:	40010400 	.word	0x40010400

0800763c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;
 800764e:	2300      	movs	r3, #0
 8007650:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f023 0210 	bic.w	r2, r3, #16
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	4b2c      	ldr	r3, [pc, #176]	; (8007724 <TIM_OC2_SetConfig+0xe8>)
 8007674:	4013      	ands	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800767e:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	021b      	lsls	r3, r3, #8
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	011b      	lsls	r3, r3, #4
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	4313      	orrs	r3, r2
 800769e:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a21      	ldr	r2, [pc, #132]	; (8007728 <TIM_OC2_SetConfig+0xec>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d003      	beq.n	80076b0 <TIM_OC2_SetConfig+0x74>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a20      	ldr	r2, [pc, #128]	; (800772c <TIM_OC2_SetConfig+0xf0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d101      	bne.n	80076b4 <TIM_OC2_SetConfig+0x78>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e000      	b.n	80076b6 <TIM_OC2_SetConfig+0x7a>
 80076b4:	2300      	movs	r3, #0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d021      	beq.n	80076fe <TIM_OC2_SetConfig+0xc2>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	011b      	lsls	r3, r3, #4
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d4:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80076dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	621a      	str	r2, [r3, #32]
}
 8007718:	bf00      	nop
 800771a:	371c      	adds	r7, #28
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	feff8fff 	.word	0xfeff8fff
 8007728:	40010000 	.word	0x40010000
 800772c:	40010400 	.word	0x40010400

08007730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0;   
 8007742:	2300      	movs	r3, #0
 8007744:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4b2c      	ldr	r3, [pc, #176]	; (8007818 <TIM_OC3_SetConfig+0xe8>)
 8007768:	4013      	ands	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0303 	bic.w	r3, r3, #3
 8007772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007784:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	021b      	lsls	r3, r3, #8
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a21      	ldr	r2, [pc, #132]	; (800781c <TIM_OC3_SetConfig+0xec>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_OC3_SetConfig+0x72>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a20      	ldr	r2, [pc, #128]	; (8007820 <TIM_OC3_SetConfig+0xf0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d101      	bne.n	80077a6 <TIM_OC3_SetConfig+0x76>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <TIM_OC3_SetConfig+0x78>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d021      	beq.n	80077f0 <TIM_OC3_SetConfig+0xc0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	021b      	lsls	r3, r3, #8
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4313      	orrs	r3, r2
 80077be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077c6:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	fffeff8f 	.word	0xfffeff8f
 800781c:	40010000 	.word	0x40010000
 8007820:	40010400 	.word	0x40010400

08007824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0;
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4b20      	ldr	r3, [pc, #128]	; (80078dc <TIM_OC4_SetConfig+0xb8>)
 800785c:	4013      	ands	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007866:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800787a:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	031b      	lsls	r3, r3, #12
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a15      	ldr	r2, [pc, #84]	; (80078e0 <TIM_OC4_SetConfig+0xbc>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC4_SetConfig+0x74>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a14      	ldr	r2, [pc, #80]	; (80078e4 <TIM_OC4_SetConfig+0xc0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d101      	bne.n	800789c <TIM_OC4_SetConfig+0x78>
 8007898:	2301      	movs	r3, #1
 800789a:	e000      	b.n	800789e <TIM_OC4_SetConfig+0x7a>
 800789c:	2300      	movs	r3, #0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d009      	beq.n	80078b6 <TIM_OC4_SetConfig+0x92>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80078a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	019b      	lsls	r3, r3, #6
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	697a      	ldr	r2, [r7, #20]
 80078ba:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	68fa      	ldr	r2, [r7, #12]
 80078ce:	621a      	str	r2, [r3, #32]
}
 80078d0:	bf00      	nop
 80078d2:	371c      	adds	r7, #28
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	feff8fff 	.word	0xfeff8fff
 80078e0:	40010000 	.word	0x40010000
 80078e4:	40010400 	.word	0x40010400

080078e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b087      	sub	sp, #28
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0;
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f023 0201 	bic.w	r2, r3, #1
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800791a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	4313      	orrs	r3, r2
 8007924:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f023 030a 	bic.w	r3, r3, #10
 800792c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	621a      	str	r2, [r3, #32]
}
 8007942:	bf00      	nop
 8007944:	371c      	adds	r7, #28
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800794e:	b480      	push	{r7}
 8007950:	b087      	sub	sp, #28
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	607a      	str	r2, [r7, #4]
uint32_t tmpccmr1 = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	f023 0210 	bic.w	r2, r3, #16
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6a1b      	ldr	r3, [r3, #32]
 8007978:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	031b      	lsls	r3, r3, #12
 8007986:	697a      	ldr	r2, [r7, #20]
 8007988:	4313      	orrs	r3, r2
 800798a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007992:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	011b      	lsls	r3, r3, #4
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	4313      	orrs	r3, r2
 800799c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	621a      	str	r2, [r3, #32]
}
 80079aa:	bf00      	nop
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80079d4:	887b      	ldrh	r3, [r7, #2]
 80079d6:	f043 0307 	orr.w	r3, r3, #7
 80079da:	b29b      	uxth	r3, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	609a      	str	r2, [r3, #8]
}
 80079ea:	bf00      	nop
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b087      	sub	sp, #28
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	60f8      	str	r0, [r7, #12]
 80079fe:	60b9      	str	r1, [r7, #8]
 8007a00:	607a      	str	r2, [r7, #4]
 8007a02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	021a      	lsls	r2, r3, #8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	697a      	ldr	r2, [r7, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	697a      	ldr	r2, [r7, #20]
 8007a2c:	609a      	str	r2, [r3, #8]
} 
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e03d      	b.n	8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a1a      	ldr	r2, [pc, #104]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d004      	beq.n	8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x44>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a19      	ldr	r2, [pc, #100]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d108      	bne.n	8007a92 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aaa:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	689b      	ldr	r3, [r3, #8]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
} 
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3714      	adds	r7, #20
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	40010000 	.word	0x40010000
 8007ae0:	40010400 	.word	0x40010400

08007ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e105      	b.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x226>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2b14      	cmp	r3, #20
 8007b12:	f200 80f0 	bhi.w	8007cf6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b71 	.word	0x08007b71
 8007b20:	08007cf7 	.word	0x08007cf7
 8007b24:	08007cf7 	.word	0x08007cf7
 8007b28:	08007cf7 	.word	0x08007cf7
 8007b2c:	08007bb1 	.word	0x08007bb1
 8007b30:	08007cf7 	.word	0x08007cf7
 8007b34:	08007cf7 	.word	0x08007cf7
 8007b38:	08007cf7 	.word	0x08007cf7
 8007b3c:	08007bf3 	.word	0x08007bf3
 8007b40:	08007cf7 	.word	0x08007cf7
 8007b44:	08007cf7 	.word	0x08007cf7
 8007b48:	08007cf7 	.word	0x08007cf7
 8007b4c:	08007c33 	.word	0x08007c33
 8007b50:	08007cf7 	.word	0x08007cf7
 8007b54:	08007cf7 	.word	0x08007cf7
 8007b58:	08007cf7 	.word	0x08007cf7
 8007b5c:	08007c75 	.word	0x08007c75
 8007b60:	08007cf7 	.word	0x08007cf7
 8007b64:	08007cf7 	.word	0x08007cf7
 8007b68:	08007cf7 	.word	0x08007cf7
 8007b6c:	08007cb5 	.word	0x08007cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68b9      	ldr	r1, [r7, #8]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff fcea 	bl	8007550 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	699a      	ldr	r2, [r3, #24]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f042 0208 	orr.w	r2, r2, #8
 8007b8a:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	699a      	ldr	r2, [r3, #24]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0204 	bic.w	r2, r2, #4
 8007b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6999      	ldr	r1, [r3, #24]
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	691a      	ldr	r2, [r3, #16]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	430a      	orrs	r2, r1
 8007bac:	619a      	str	r2, [r3, #24]
    }
    break;
 8007bae:	e0a3      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff fd40 	bl	800763c <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699a      	ldr	r2, [r3, #24]
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bca:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	699a      	ldr	r2, [r3, #24]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6999      	ldr	r1, [r3, #24]
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	691b      	ldr	r3, [r3, #16]
 8007be6:	021a      	lsls	r2, r3, #8
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	619a      	str	r2, [r3, #24]
    }
    break;
 8007bf0:	e082      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff fd99 	bl	8007730 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69da      	ldr	r2, [r3, #28]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f042 0208 	orr.w	r2, r2, #8
 8007c0c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	69da      	ldr	r2, [r3, #28]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0204 	bic.w	r2, r2, #4
 8007c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	69d9      	ldr	r1, [r3, #28]
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	61da      	str	r2, [r3, #28]
    }
    break;
 8007c30:	e062      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68b9      	ldr	r1, [r7, #8]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff fdf3 	bl	8007824 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	69da      	ldr	r2, [r3, #28]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c4c:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69da      	ldr	r2, [r3, #28]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;  
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	69d9      	ldr	r1, [r3, #28]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	021a      	lsls	r2, r3, #8
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	61da      	str	r2, [r3, #28]
    }
    break;
 8007c72:	e041      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68b9      	ldr	r1, [r7, #8]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f000 f84a 	bl	8007d14 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0208 	orr.w	r2, r2, #8
 8007c8e:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0204 	bic.w	r2, r2, #4
 8007c9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	691a      	ldr	r2, [r3, #16]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8007cb2:	e021      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 f882 	bl	8007dc4 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;  
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	691b      	ldr	r3, [r3, #16]
 8007cea:	021a      	lsls	r2, r3, #8
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	430a      	orrs	r2, r1
 8007cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
    break;
 8007cf4:	e000      	b.n	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    
    default:
    break;    
 8007cf6:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop

08007d14 <TIM_OC5_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6a1b      	ldr	r3, [r3, #32]
 8007d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <TIM_OC5_SetConfig+0xa4>)
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d60:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	041b      	lsls	r3, r3, #16
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a12      	ldr	r2, [pc, #72]	; (8007dbc <TIM_OC5_SetConfig+0xa8>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d003      	beq.n	8007d7e <TIM_OC5_SetConfig+0x6a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a11      	ldr	r2, [pc, #68]	; (8007dc0 <TIM_OC5_SetConfig+0xac>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d109      	bne.n	8007d92 <TIM_OC5_SetConfig+0x7e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	621a      	str	r2, [r3, #32]
}
 8007dac:	bf00      	nop
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	fffeff8f 	.word	0xfffeff8f
 8007dbc:	40010000 	.word	0x40010000
 8007dc0:	40010400 	.word	0x40010400

08007dc4 <TIM_OC6_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0; 
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4b1c      	ldr	r3, [pc, #112]	; (8007e6c <TIM_OC6_SetConfig+0xa8>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e12:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	051b      	lsls	r3, r3, #20
 8007e1a:	68fa      	ldr	r2, [r7, #12]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <TIM_OC6_SetConfig+0xac>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC6_SetConfig+0x6c>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a12      	ldr	r2, [pc, #72]	; (8007e74 <TIM_OC6_SetConfig+0xb0>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d109      	bne.n	8007e44 <TIM_OC6_SetConfig+0x80>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	029b      	lsls	r3, r3, #10
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	feff8fff 	.word	0xfeff8fff
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40010400 	.word	0x40010400

08007e78 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e043      	b.n	8007f12 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d106      	bne.n	8007ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f002 fa00 	bl	800a2a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2224      	movs	r2, #36	; 0x24
 8007ea8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f022 0201 	bic.w	r2, r2, #1
 8007eba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f877 	bl	8007fb0 <UART_SetConfig>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d101      	bne.n	8007ecc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e022      	b.n	8007f12 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d002      	beq.n	8007eda <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 faeb 	bl	80084b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ee8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	689a      	ldr	r2, [r3, #8]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ef8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f042 0201 	orr.w	r2, r2, #1
 8007f08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 fb72 	bl	80085f4 <UART_CheckIdleState>
 8007f10:	4603      	mov	r3, r0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	60f8      	str	r0, [r7, #12]
 8007f22:	60b9      	str	r1, [r7, #8]
 8007f24:	603b      	str	r3, [r7, #0]
 8007f26:	4613      	mov	r3, r2
 8007f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f2a:	e02c      	b.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f32:	d028      	beq.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8007f3a:	f7fb f82d 	bl	8002f98 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d81d      	bhi.n	8007f86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689a      	ldr	r2, [r3, #8]
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 0201 	bic.w	r2, r2, #1
 8007f68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2220      	movs	r2, #32
 8007f6e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2220      	movs	r2, #32
 8007f76:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e00f      	b.n	8007fa6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69da      	ldr	r2, [r3, #28]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	bf0c      	ite	eq
 8007f96:	2301      	moveq	r3, #1
 8007f98:	2300      	movne	r3, #0
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d0c3      	beq.n	8007f2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3710      	adds	r7, #16
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
	...

08007fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689a      	ldr	r2, [r3, #8]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691b      	ldr	r3, [r3, #16]
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	4bb5      	ldr	r3, [pc, #724]	; (80082c0 <UART_SetConfig+0x310>)
 8007fec:	4013      	ands	r3, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699a      	ldr	r2, [r3, #24]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	430a      	orrs	r2, r1
 800802c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4aa4      	ldr	r2, [pc, #656]	; (80082c4 <UART_SetConfig+0x314>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d11f      	bne.n	8008078 <UART_SetConfig+0xc8>
 8008038:	4ba3      	ldr	r3, [pc, #652]	; (80082c8 <UART_SetConfig+0x318>)
 800803a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b03      	cmp	r3, #3
 8008044:	f200 8139 	bhi.w	80082ba <UART_SetConfig+0x30a>
 8008048:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0xa0>)
 800804a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804e:	bf00      	nop
 8008050:	08008061 	.word	0x08008061
 8008054:	0800806d 	.word	0x0800806d
 8008058:	08008067 	.word	0x08008067
 800805c:	08008073 	.word	0x08008073
 8008060:	2301      	movs	r3, #1
 8008062:	75fb      	strb	r3, [r7, #23]
 8008064:	e129      	b.n	80082ba <UART_SetConfig+0x30a>
 8008066:	2302      	movs	r3, #2
 8008068:	75fb      	strb	r3, [r7, #23]
 800806a:	e126      	b.n	80082ba <UART_SetConfig+0x30a>
 800806c:	2304      	movs	r3, #4
 800806e:	75fb      	strb	r3, [r7, #23]
 8008070:	e123      	b.n	80082ba <UART_SetConfig+0x30a>
 8008072:	2308      	movs	r3, #8
 8008074:	75fb      	strb	r3, [r7, #23]
 8008076:	e120      	b.n	80082ba <UART_SetConfig+0x30a>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a93      	ldr	r2, [pc, #588]	; (80082cc <UART_SetConfig+0x31c>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d130      	bne.n	80080e4 <UART_SetConfig+0x134>
 8008082:	4b91      	ldr	r3, [pc, #580]	; (80082c8 <UART_SetConfig+0x318>)
 8008084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008088:	f003 030c 	and.w	r3, r3, #12
 800808c:	2b0c      	cmp	r3, #12
 800808e:	f200 8114 	bhi.w	80082ba <UART_SetConfig+0x30a>
 8008092:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <UART_SetConfig+0xe8>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080cd 	.word	0x080080cd
 800809c:	080082bb 	.word	0x080082bb
 80080a0:	080082bb 	.word	0x080082bb
 80080a4:	080082bb 	.word	0x080082bb
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	080082bb 	.word	0x080082bb
 80080b0:	080082bb 	.word	0x080082bb
 80080b4:	080082bb 	.word	0x080082bb
 80080b8:	080080d3 	.word	0x080080d3
 80080bc:	080082bb 	.word	0x080082bb
 80080c0:	080082bb 	.word	0x080082bb
 80080c4:	080082bb 	.word	0x080082bb
 80080c8:	080080df 	.word	0x080080df
 80080cc:	2300      	movs	r3, #0
 80080ce:	75fb      	strb	r3, [r7, #23]
 80080d0:	e0f3      	b.n	80082ba <UART_SetConfig+0x30a>
 80080d2:	2302      	movs	r3, #2
 80080d4:	75fb      	strb	r3, [r7, #23]
 80080d6:	e0f0      	b.n	80082ba <UART_SetConfig+0x30a>
 80080d8:	2304      	movs	r3, #4
 80080da:	75fb      	strb	r3, [r7, #23]
 80080dc:	e0ed      	b.n	80082ba <UART_SetConfig+0x30a>
 80080de:	2308      	movs	r3, #8
 80080e0:	75fb      	strb	r3, [r7, #23]
 80080e2:	e0ea      	b.n	80082ba <UART_SetConfig+0x30a>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a79      	ldr	r2, [pc, #484]	; (80082d0 <UART_SetConfig+0x320>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d11f      	bne.n	800812e <UART_SetConfig+0x17e>
 80080ee:	4b76      	ldr	r3, [pc, #472]	; (80082c8 <UART_SetConfig+0x318>)
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080f8:	2b30      	cmp	r3, #48	; 0x30
 80080fa:	d015      	beq.n	8008128 <UART_SetConfig+0x178>
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	f200 80dc 	bhi.w	80082ba <UART_SetConfig+0x30a>
 8008102:	2b20      	cmp	r3, #32
 8008104:	d00a      	beq.n	800811c <UART_SetConfig+0x16c>
 8008106:	2b20      	cmp	r3, #32
 8008108:	f200 80d7 	bhi.w	80082ba <UART_SetConfig+0x30a>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d002      	beq.n	8008116 <UART_SetConfig+0x166>
 8008110:	2b10      	cmp	r3, #16
 8008112:	d006      	beq.n	8008122 <UART_SetConfig+0x172>
 8008114:	e0d1      	b.n	80082ba <UART_SetConfig+0x30a>
 8008116:	2300      	movs	r3, #0
 8008118:	75fb      	strb	r3, [r7, #23]
 800811a:	e0ce      	b.n	80082ba <UART_SetConfig+0x30a>
 800811c:	2302      	movs	r3, #2
 800811e:	75fb      	strb	r3, [r7, #23]
 8008120:	e0cb      	b.n	80082ba <UART_SetConfig+0x30a>
 8008122:	2304      	movs	r3, #4
 8008124:	75fb      	strb	r3, [r7, #23]
 8008126:	e0c8      	b.n	80082ba <UART_SetConfig+0x30a>
 8008128:	2308      	movs	r3, #8
 800812a:	75fb      	strb	r3, [r7, #23]
 800812c:	e0c5      	b.n	80082ba <UART_SetConfig+0x30a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a68      	ldr	r2, [pc, #416]	; (80082d4 <UART_SetConfig+0x324>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d11f      	bne.n	8008178 <UART_SetConfig+0x1c8>
 8008138:	4b63      	ldr	r3, [pc, #396]	; (80082c8 <UART_SetConfig+0x318>)
 800813a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008142:	2bc0      	cmp	r3, #192	; 0xc0
 8008144:	d015      	beq.n	8008172 <UART_SetConfig+0x1c2>
 8008146:	2bc0      	cmp	r3, #192	; 0xc0
 8008148:	f200 80b7 	bhi.w	80082ba <UART_SetConfig+0x30a>
 800814c:	2b80      	cmp	r3, #128	; 0x80
 800814e:	d00a      	beq.n	8008166 <UART_SetConfig+0x1b6>
 8008150:	2b80      	cmp	r3, #128	; 0x80
 8008152:	f200 80b2 	bhi.w	80082ba <UART_SetConfig+0x30a>
 8008156:	2b00      	cmp	r3, #0
 8008158:	d002      	beq.n	8008160 <UART_SetConfig+0x1b0>
 800815a:	2b40      	cmp	r3, #64	; 0x40
 800815c:	d006      	beq.n	800816c <UART_SetConfig+0x1bc>
 800815e:	e0ac      	b.n	80082ba <UART_SetConfig+0x30a>
 8008160:	2300      	movs	r3, #0
 8008162:	75fb      	strb	r3, [r7, #23]
 8008164:	e0a9      	b.n	80082ba <UART_SetConfig+0x30a>
 8008166:	2302      	movs	r3, #2
 8008168:	75fb      	strb	r3, [r7, #23]
 800816a:	e0a6      	b.n	80082ba <UART_SetConfig+0x30a>
 800816c:	2304      	movs	r3, #4
 800816e:	75fb      	strb	r3, [r7, #23]
 8008170:	e0a3      	b.n	80082ba <UART_SetConfig+0x30a>
 8008172:	2308      	movs	r3, #8
 8008174:	75fb      	strb	r3, [r7, #23]
 8008176:	e0a0      	b.n	80082ba <UART_SetConfig+0x30a>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a56      	ldr	r2, [pc, #344]	; (80082d8 <UART_SetConfig+0x328>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d124      	bne.n	80081cc <UART_SetConfig+0x21c>
 8008182:	4b51      	ldr	r3, [pc, #324]	; (80082c8 <UART_SetConfig+0x318>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800818c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008190:	d019      	beq.n	80081c6 <UART_SetConfig+0x216>
 8008192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008196:	f200 8090 	bhi.w	80082ba <UART_SetConfig+0x30a>
 800819a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800819e:	d00c      	beq.n	80081ba <UART_SetConfig+0x20a>
 80081a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081a4:	f200 8089 	bhi.w	80082ba <UART_SetConfig+0x30a>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d003      	beq.n	80081b4 <UART_SetConfig+0x204>
 80081ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b0:	d006      	beq.n	80081c0 <UART_SetConfig+0x210>
 80081b2:	e082      	b.n	80082ba <UART_SetConfig+0x30a>
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
 80081b8:	e07f      	b.n	80082ba <UART_SetConfig+0x30a>
 80081ba:	2302      	movs	r3, #2
 80081bc:	75fb      	strb	r3, [r7, #23]
 80081be:	e07c      	b.n	80082ba <UART_SetConfig+0x30a>
 80081c0:	2304      	movs	r3, #4
 80081c2:	75fb      	strb	r3, [r7, #23]
 80081c4:	e079      	b.n	80082ba <UART_SetConfig+0x30a>
 80081c6:	2308      	movs	r3, #8
 80081c8:	75fb      	strb	r3, [r7, #23]
 80081ca:	e076      	b.n	80082ba <UART_SetConfig+0x30a>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a42      	ldr	r2, [pc, #264]	; (80082dc <UART_SetConfig+0x32c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d122      	bne.n	800821c <UART_SetConfig+0x26c>
 80081d6:	4b3c      	ldr	r3, [pc, #240]	; (80082c8 <UART_SetConfig+0x318>)
 80081d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081e4:	d017      	beq.n	8008216 <UART_SetConfig+0x266>
 80081e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081ea:	d866      	bhi.n	80082ba <UART_SetConfig+0x30a>
 80081ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f0:	d00b      	beq.n	800820a <UART_SetConfig+0x25a>
 80081f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f6:	d860      	bhi.n	80082ba <UART_SetConfig+0x30a>
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <UART_SetConfig+0x254>
 80081fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008200:	d006      	beq.n	8008210 <UART_SetConfig+0x260>
 8008202:	e05a      	b.n	80082ba <UART_SetConfig+0x30a>
 8008204:	2301      	movs	r3, #1
 8008206:	75fb      	strb	r3, [r7, #23]
 8008208:	e057      	b.n	80082ba <UART_SetConfig+0x30a>
 800820a:	2302      	movs	r3, #2
 800820c:	75fb      	strb	r3, [r7, #23]
 800820e:	e054      	b.n	80082ba <UART_SetConfig+0x30a>
 8008210:	2304      	movs	r3, #4
 8008212:	75fb      	strb	r3, [r7, #23]
 8008214:	e051      	b.n	80082ba <UART_SetConfig+0x30a>
 8008216:	2308      	movs	r3, #8
 8008218:	75fb      	strb	r3, [r7, #23]
 800821a:	e04e      	b.n	80082ba <UART_SetConfig+0x30a>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a2f      	ldr	r2, [pc, #188]	; (80082e0 <UART_SetConfig+0x330>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d122      	bne.n	800826c <UART_SetConfig+0x2bc>
 8008226:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <UART_SetConfig+0x318>)
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008230:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008234:	d017      	beq.n	8008266 <UART_SetConfig+0x2b6>
 8008236:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800823a:	d83e      	bhi.n	80082ba <UART_SetConfig+0x30a>
 800823c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008240:	d00b      	beq.n	800825a <UART_SetConfig+0x2aa>
 8008242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008246:	d838      	bhi.n	80082ba <UART_SetConfig+0x30a>
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <UART_SetConfig+0x2a4>
 800824c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008250:	d006      	beq.n	8008260 <UART_SetConfig+0x2b0>
 8008252:	e032      	b.n	80082ba <UART_SetConfig+0x30a>
 8008254:	2300      	movs	r3, #0
 8008256:	75fb      	strb	r3, [r7, #23]
 8008258:	e02f      	b.n	80082ba <UART_SetConfig+0x30a>
 800825a:	2302      	movs	r3, #2
 800825c:	75fb      	strb	r3, [r7, #23]
 800825e:	e02c      	b.n	80082ba <UART_SetConfig+0x30a>
 8008260:	2304      	movs	r3, #4
 8008262:	75fb      	strb	r3, [r7, #23]
 8008264:	e029      	b.n	80082ba <UART_SetConfig+0x30a>
 8008266:	2308      	movs	r3, #8
 8008268:	75fb      	strb	r3, [r7, #23]
 800826a:	e026      	b.n	80082ba <UART_SetConfig+0x30a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a1c      	ldr	r2, [pc, #112]	; (80082e4 <UART_SetConfig+0x334>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d138      	bne.n	80082e8 <UART_SetConfig+0x338>
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <UART_SetConfig+0x318>)
 8008278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800827c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008280:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008284:	d017      	beq.n	80082b6 <UART_SetConfig+0x306>
 8008286:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800828a:	d816      	bhi.n	80082ba <UART_SetConfig+0x30a>
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008290:	d00b      	beq.n	80082aa <UART_SetConfig+0x2fa>
 8008292:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008296:	d810      	bhi.n	80082ba <UART_SetConfig+0x30a>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d003      	beq.n	80082a4 <UART_SetConfig+0x2f4>
 800829c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a0:	d006      	beq.n	80082b0 <UART_SetConfig+0x300>
 80082a2:	e00a      	b.n	80082ba <UART_SetConfig+0x30a>
 80082a4:	2300      	movs	r3, #0
 80082a6:	75fb      	strb	r3, [r7, #23]
 80082a8:	e007      	b.n	80082ba <UART_SetConfig+0x30a>
 80082aa:	2302      	movs	r3, #2
 80082ac:	75fb      	strb	r3, [r7, #23]
 80082ae:	e004      	b.n	80082ba <UART_SetConfig+0x30a>
 80082b0:	2304      	movs	r3, #4
 80082b2:	75fb      	strb	r3, [r7, #23]
 80082b4:	e001      	b.n	80082ba <UART_SetConfig+0x30a>
 80082b6:	2308      	movs	r3, #8
 80082b8:	75fb      	strb	r3, [r7, #23]
 80082ba:	bf00      	nop
 80082bc:	e015      	b.n	80082ea <UART_SetConfig+0x33a>
 80082be:	bf00      	nop
 80082c0:	efff69f3 	.word	0xefff69f3
 80082c4:	40011000 	.word	0x40011000
 80082c8:	40023800 	.word	0x40023800
 80082cc:	40004400 	.word	0x40004400
 80082d0:	40004800 	.word	0x40004800
 80082d4:	40004c00 	.word	0x40004c00
 80082d8:	40005000 	.word	0x40005000
 80082dc:	40011400 	.word	0x40011400
 80082e0:	40007800 	.word	0x40007800
 80082e4:	40007c00 	.word	0x40007c00
 80082e8:	bf00      	nop

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082f2:	d16c      	bne.n	80083ce <UART_SetConfig+0x41e>
  {
    switch (clocksource)
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b08      	cmp	r3, #8
 80082f8:	d854      	bhi.n	80083a4 <UART_SetConfig+0x3f4>
 80082fa:	a201      	add	r2, pc, #4	; (adr r2, 8008300 <UART_SetConfig+0x350>)
 80082fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008300:	08008325 	.word	0x08008325
 8008304:	08008341 	.word	0x08008341
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080083a5 	.word	0x080083a5
 8008310:	08008373 	.word	0x08008373
 8008314:	080083a5 	.word	0x080083a5
 8008318:	080083a5 	.word	0x080083a5
 800831c:	080083a5 	.word	0x080083a5
 8008320:	0800838f 	.word	0x0800838f
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008324:	f7fd fd96 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 8008328:	4603      	mov	r3, r0
 800832a:	005a      	lsls	r2, r3, #1
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	085b      	lsrs	r3, r3, #1
 8008332:	441a      	add	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	fbb2 f3f3 	udiv	r3, r2, r3
 800833c:	82bb      	strh	r3, [r7, #20]
      break;
 800833e:	e034      	b.n	80083aa <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008340:	f7fd fd9c 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8008344:	4603      	mov	r3, r0
 8008346:	005a      	lsls	r2, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	085b      	lsrs	r3, r3, #1
 800834e:	441a      	add	r2, r3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	82bb      	strh	r3, [r7, #20]
      break;
 800835a:	e026      	b.n	80083aa <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	085a      	lsrs	r2, r3, #1
 8008362:	4b51      	ldr	r3, [pc, #324]	; (80084a8 <UART_SetConfig+0x4f8>)
 8008364:	4413      	add	r3, r2
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	6852      	ldr	r2, [r2, #4]
 800836a:	fbb3 f3f2 	udiv	r3, r3, r2
 800836e:	82bb      	strh	r3, [r7, #20]
      break;
 8008370:	e01b      	b.n	80083aa <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8008372:	f7fd fcad 	bl	8005cd0 <HAL_RCC_GetSysClockFreq>
 8008376:	4603      	mov	r3, r0
 8008378:	005a      	lsls	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	441a      	add	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	82bb      	strh	r3, [r7, #20]
      break;
 800838c:	e00d      	b.n	80083aa <UART_SetConfig+0x3fa>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	085b      	lsrs	r3, r3, #1
 8008394:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a0:	82bb      	strh	r3, [r7, #20]
      break;
 80083a2:	e002      	b.n	80083aa <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	74fb      	strb	r3, [r7, #19]
      break;
 80083a8:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 80083aa:	8abb      	ldrh	r3, [r7, #20]
 80083ac:	f023 030f 	bic.w	r3, r3, #15
 80083b0:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083b2:	8abb      	ldrh	r3, [r7, #20]
 80083b4:	105b      	asrs	r3, r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	b29a      	uxth	r2, r3
 80083be:	897b      	ldrh	r3, [r7, #10]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	897a      	ldrh	r2, [r7, #10]
 80083ca:	60da      	str	r2, [r3, #12]
 80083cc:	e067      	b.n	800849e <UART_SetConfig+0x4ee>
  }
  else
  {
    switch (clocksource)
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d861      	bhi.n	8008498 <UART_SetConfig+0x4e8>
 80083d4:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <UART_SetConfig+0x42c>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	08008401 	.word	0x08008401
 80083e0:	08008421 	.word	0x08008421
 80083e4:	08008441 	.word	0x08008441
 80083e8:	08008499 	.word	0x08008499
 80083ec:	0800845d 	.word	0x0800845d
 80083f0:	08008499 	.word	0x08008499
 80083f4:	08008499 	.word	0x08008499
 80083f8:	08008499 	.word	0x08008499
 80083fc:	0800847d 	.word	0x0800847d
    {
    case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8008400:	f7fd fd28 	bl	8005e54 <HAL_RCC_GetPCLK1Freq>
 8008404:	4602      	mov	r2, r0
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	441a      	add	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	fbb2 f3f3 	udiv	r3, r2, r3
 8008416:	b29a      	uxth	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60da      	str	r2, [r3, #12]
      break;
 800841e:	e03e      	b.n	800849e <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8008420:	f7fd fd2c 	bl	8005e7c <HAL_RCC_GetPCLK2Freq>
 8008424:	4602      	mov	r2, r0
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	085b      	lsrs	r3, r3, #1
 800842c:	441a      	add	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	fbb2 f3f3 	udiv	r3, r2, r3
 8008436:	b29a      	uxth	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60da      	str	r2, [r3, #12]
      break;
 800843e:	e02e      	b.n	800849e <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	085a      	lsrs	r2, r3, #1
 8008446:	4b19      	ldr	r3, [pc, #100]	; (80084ac <UART_SetConfig+0x4fc>)
 8008448:	4413      	add	r3, r2
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	6852      	ldr	r2, [r2, #4]
 800844e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60da      	str	r2, [r3, #12]
      break;
 800845a:	e020      	b.n	800849e <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800845c:	f7fd fc38 	bl	8005cd0 <HAL_RCC_GetSysClockFreq>
 8008460:	4602      	mov	r2, r0
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	685b      	ldr	r3, [r3, #4]
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	441a      	add	r2, r3
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008472:	b29a      	uxth	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	60da      	str	r2, [r3, #12]
      break;
 800847a:	e010      	b.n	800849e <UART_SetConfig+0x4ee>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	085b      	lsrs	r3, r3, #1
 8008482:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	fbb2 f3f3 	udiv	r3, r2, r3
 800848e:	b29a      	uxth	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60da      	str	r2, [r3, #12]
      break;
 8008496:	e002      	b.n	800849e <UART_SetConfig+0x4ee>
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	74fb      	strb	r3, [r7, #19]
      break;
 800849c:	bf00      	nop
    }
  }

  return ret;
 800849e:	7cfb      	ldrb	r3, [r7, #19]

}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	01e84800 	.word	0x01e84800
 80084ac:	00f42400 	.word	0x00f42400

080084b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features
  * @param huart uart handle
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	f003 0302 	and.w	r3, r3, #2
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008500:	f003 0304 	and.w	r3, r3, #4
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	f003 0308 	and.w	r3, r3, #8
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008544:	f003 0310 	and.w	r3, r3, #16
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01a      	beq.n	80085c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ae:	d10a      	bne.n	80085c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	605a      	str	r2, [r3, #4]
  }
}
 80085e8:	bf00      	nop
 80085ea:	370c      	adds	r7, #12
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008606:	f7fa fcc7 	bl	8002f98 <HAL_GetTick>
 800860a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0308 	and.w	r3, r3, #8
 8008616:	2b08      	cmp	r3, #8
 8008618:	d10e      	bne.n	8008638 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800861a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7ff fc76 	bl	8007f1a <UART_WaitOnFlagUntilTimeout>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8008634:	2303      	movs	r3, #3
 8008636:	e00c      	b.n	8008652 <UART_CheckIdleState+0x5e>
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2220      	movs	r2, #32
 800863c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState= HAL_UART_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2220      	movs	r2, #32
 8008644:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800865c:	b480      	push	{r7}
 800865e:	b085      	sub	sp, #20
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800866a:	2300      	movs	r3, #0
 800866c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2b01      	cmp	r3, #1
 8008674:	d027      	beq.n	80086c6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	4b2f      	ldr	r3, [pc, #188]	; (800873c <FMC_SDRAM_Init+0xe0>)
 8008680:	4013      	ands	r3, r2
 8008682:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800868c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8008692:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8008698:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800869e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 80086a4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 80086aa:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 80086b0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80086b6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	e032      	b.n	800872c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80086d2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80086dc:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80086e2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4313      	orrs	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	4b12      	ldr	r3, [pc, #72]	; (800873c <FMC_SDRAM_Init+0xe0>)
 80086f4:	4013      	ands	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008700:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 8008706:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800870c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 8008712:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8008718:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4313      	orrs	r3, r2
 800871e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3714      	adds	r7, #20
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	ffff8000 	.word	0xffff8000

08008740 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8008750:	2300      	movs	r3, #0
 8008752:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d02e      	beq.n	80087b8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008766:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	3b01      	subs	r3, #1
 8008774:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008776:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	3b01      	subs	r3, #1
 800877e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8008780:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	3b01      	subs	r3, #1
 8008788:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800878a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	3b01      	subs	r3, #1
 8008792:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8008794:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	3b01      	subs	r3, #1
 800879c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800879e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	3b01      	subs	r3, #1
 80087a6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80087a8:	4313      	orrs	r3, r2
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	609a      	str	r2, [r3, #8]
 80087b6:	e039      	b.n	800882c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80087be:	697a      	ldr	r2, [r7, #20]
 80087c0:	4b1e      	ldr	r3, [pc, #120]	; (800883c <FMC_SDRAM_Timing_Init+0xfc>)
 80087c2:	4013      	ands	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	695b      	ldr	r3, [r3, #20]
 80087d2:	3b01      	subs	r3, #1
 80087d4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80087d6:	4313      	orrs	r3, r2
 80087d8:	697a      	ldr	r2, [r7, #20]
 80087da:	4313      	orrs	r3, r2
 80087dc:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087ea:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	3b01      	subs	r3, #1
 80087f8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80087fa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	3b01      	subs	r3, #1
 8008802:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 8008804:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	3b01      	subs	r3, #1
 800880c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800880e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	3b01      	subs	r3, #1
 8008816:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8008818:	4313      	orrs	r3, r2
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	ff0f0fff 	.word	0xff0f0fff

08008840 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008840:	b480      	push	{r7}
 8008842:	b087      	sub	sp, #28
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008858:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	3b01      	subs	r3, #1
 8008860:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008862:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800886e:	697a      	ldr	r2, [r7, #20]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	371c      	adds	r7, #28
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
 800888a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	005b      	lsls	r3, r3, #1
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <lcd_start_page>:
#include "stm32746g_discovery_audio.h"
#include "stlogo.h"

void lcd_start_page(void);

void lcd_start_page(void){
 80088a8:	b598      	push	{r3, r4, r7, lr}
 80088aa:	af00      	add	r7, sp, #0
 	BSP_LCD_LayerDefaultInit(LTDC_ACTIVE_LAYER, LCD_FRAME_BUFFER);
 80088ac:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80088b0:	2001      	movs	r0, #1
 80088b2:	f7f9 fbb9 	bl	8002028 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_SelectLayer(LTDC_ACTIVE_LAYER);
 80088b6:	2001      	movs	r0, #1
 80088b8:	f7f9 fc16 	bl	80020e8 <BSP_LCD_SelectLayer>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80088bc:	4828      	ldr	r0, [pc, #160]	; (8008960 <lcd_start_page+0xb8>)
 80088be:	f7f9 fc55 	bl	800216c <BSP_LCD_SetFont>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80088c2:	f04f 30ff 	mov.w	r0, #4294967295
 80088c6:	f7f9 fc37 	bl	8002138 <BSP_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	f7f9 fc67 	bl	80021a0 <BSP_LCD_Clear>
    BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 80088d2:	4824      	ldr	r0, [pc, #144]	; (8008964 <lcd_start_page+0xbc>)
 80088d4:	f7f9 fc18 	bl	8002108 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32F746G DSP", CENTER_MODE);
 80088d8:	2301      	movs	r3, #1
 80088da:	4a23      	ldr	r2, [pc, #140]	; (8008968 <lcd_start_page+0xc0>)
 80088dc:	210a      	movs	r1, #10
 80088de:	2000      	movs	r0, #0
 80088e0:	f7f9 fcca 	bl	8002278 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, 35, (uint8_t *)"Master ESET", CENTER_MODE);
 80088e4:	2301      	movs	r3, #1
 80088e6:	4a21      	ldr	r2, [pc, #132]	; (800896c <lcd_start_page+0xc4>)
 80088e8:	2123      	movs	r1, #35	; 0x23
 80088ea:	2000      	movs	r0, #0
 80088ec:	f7f9 fcc4 	bl	8002278 <BSP_LCD_DisplayStringAt>

    /* Draw Bitmap */
     //BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)logo_usmb);
     BSP_LCD_DrawBitmap((BSP_LCD_GetXSize() - 80) / 2, 65, (uint8_t *)stlogo);
 80088f0:	f7f9 fb72 	bl	8001fd8 <BSP_LCD_GetXSize>
 80088f4:	4603      	mov	r3, r0
 80088f6:	3b50      	subs	r3, #80	; 0x50
 80088f8:	085b      	lsrs	r3, r3, #1
 80088fa:	4a1d      	ldr	r2, [pc, #116]	; (8008970 <lcd_start_page+0xc8>)
 80088fc:	2141      	movs	r1, #65	; 0x41
 80088fe:	4618      	mov	r0, r3
 8008900:	f7f9 fdca 	bl	8002498 <BSP_LCD_DrawBitmap>
     BSP_LCD_SetFont(&Font12);
 8008904:	481b      	ldr	r0, [pc, #108]	; (8008974 <lcd_start_page+0xcc>)
 8008906:	f7f9 fc31 	bl	800216c <BSP_LCD_SetFont>
     BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 20, (uint8_t *)"Copyright (c) Master ESET", CENTER_MODE);
 800890a:	f7f9 fb79 	bl	8002000 <BSP_LCD_GetYSize>
 800890e:	4603      	mov	r3, r0
 8008910:	b29b      	uxth	r3, r3
 8008912:	3b14      	subs	r3, #20
 8008914:	b299      	uxth	r1, r3
 8008916:	2301      	movs	r3, #1
 8008918:	4a17      	ldr	r2, [pc, #92]	; (8008978 <lcd_start_page+0xd0>)
 800891a:	2000      	movs	r0, #0
 800891c:	f7f9 fcac 	bl	8002278 <BSP_LCD_DisplayStringAt>

     BSP_LCD_SetFont(&Font16);
 8008920:	4816      	ldr	r0, [pc, #88]	; (800897c <lcd_start_page+0xd4>)
 8008922:	f7f9 fc23 	bl	800216c <BSP_LCD_SetFont>
     BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8008926:	4816      	ldr	r0, [pc, #88]	; (8008980 <lcd_start_page+0xd8>)
 8008928:	f7f9 fbee 	bl	8002108 <BSP_LCD_SetTextColor>
     BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 15, BSP_LCD_GetXSize(), 60);
 800892c:	f7f9 fb68 	bl	8002000 <BSP_LCD_GetYSize>
 8008930:	4603      	mov	r3, r0
 8008932:	085b      	lsrs	r3, r3, #1
 8008934:	b29b      	uxth	r3, r3
 8008936:	330f      	adds	r3, #15
 8008938:	b29c      	uxth	r4, r3
 800893a:	f7f9 fb4d 	bl	8001fd8 <BSP_LCD_GetXSize>
 800893e:	4603      	mov	r3, r0
 8008940:	b29a      	uxth	r2, r3
 8008942:	233c      	movs	r3, #60	; 0x3c
 8008944:	4621      	mov	r1, r4
 8008946:	2000      	movs	r0, #0
 8008948:	f7f9 fe58 	bl	80025fc <BSP_LCD_FillRect>
     BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	f7f9 fbda 	bl	8002108 <BSP_LCD_SetTextColor>
     BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8008954:	480a      	ldr	r0, [pc, #40]	; (8008980 <lcd_start_page+0xd8>)
 8008956:	f7f9 fbef 	bl	8002138 <BSP_LCD_SetBackColor>
     //BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 30, (uint8_t *)"Press User Button to start :", CENTER_MODE);
}
 800895a:	bf00      	nop
 800895c:	bd98      	pop	{r3, r4, r7, pc}
 800895e:	bf00      	nop
 8008960:	20000034 	.word	0x20000034
 8008964:	ff000080 	.word	0xff000080
 8008968:	0800a77c 	.word	0x0800a77c
 800896c:	0800a78c 	.word	0x0800a78c
 8008970:	0800d2c8 	.word	0x0800d2c8
 8008974:	20000044 	.word	0x20000044
 8008978:	0800a798 	.word	0x0800a798
 800897c:	2000003c 	.word	0x2000003c
 8008980:	ff0000ff 	.word	0xff0000ff

08008984 <SCB_EnableICache>:
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008988:	f3bf 8f4f 	dsb	sy
}
 800898c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800898e:	f3bf 8f6f 	isb	sy
}
 8008992:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8008994:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <SCB_EnableICache+0x3c>)
 8008996:	2200      	movs	r2, #0
 8008998:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800899c:	4b08      	ldr	r3, [pc, #32]	; (80089c0 <SCB_EnableICache+0x3c>)
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	4a07      	ldr	r2, [pc, #28]	; (80089c0 <SCB_EnableICache+0x3c>)
 80089a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089a6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80089a8:	f3bf 8f4f 	dsb	sy
}
 80089ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80089ae:	f3bf 8f6f 	isb	sy
}
 80089b2:	bf00      	nop
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	e000ed00 	.word	0xe000ed00

080089c4 <SCB_EnableDCache>:
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 80089ca:	4b1f      	ldr	r3, [pc, #124]	; (8008a48 <SCB_EnableDCache+0x84>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80089d2:	f3bf 8f4f 	dsb	sy
}
 80089d6:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80089d8:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <SCB_EnableDCache+0x84>)
 80089da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089de:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	0b5b      	lsrs	r3, r3, #13
 80089e4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80089e8:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	08db      	lsrs	r3, r3, #3
 80089ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089f2:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80089fc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8008a02:	4911      	ldr	r1, [pc, #68]	; (8008a48 <SCB_EnableDCache+0x84>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	1e5a      	subs	r2, r3, #1
 8008a0e:	60ba      	str	r2, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1ef      	bne.n	80089f4 <SCB_EnableDCache+0x30>
    } while(sets--);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	1e5a      	subs	r2, r3, #1
 8008a18:	60fa      	str	r2, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d1e5      	bne.n	80089ea <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8008a1e:	f3bf 8f4f 	dsb	sy
}
 8008a22:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8008a24:	4b08      	ldr	r3, [pc, #32]	; (8008a48 <SCB_EnableDCache+0x84>)
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	4a07      	ldr	r2, [pc, #28]	; (8008a48 <SCB_EnableDCache+0x84>)
 8008a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a2e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008a30:	f3bf 8f4f 	dsb	sy
}
 8008a34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008a36:	f3bf 8f6f 	isb	sy
}
 8008a3a:	bf00      	nop
}
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	e000ed00 	.word	0xe000ed00

08008a4c <initGpio>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void initGpio(void){
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b086      	sub	sp, #24
 8008a50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a52:	1d3b      	adds	r3, r7, #4
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	609a      	str	r2, [r3, #8]
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pin Output Level */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8008a60:	2200      	movs	r2, #0
 8008a62:	2101      	movs	r1, #1
 8008a64:	4809      	ldr	r0, [pc, #36]	; (8008a8c <initGpio+0x40>)
 8008a66:	f7fb fbf5 	bl	8004254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	607b      	str	r3, [r7, #4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	60bb      	str	r3, [r7, #8]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a76:	2303      	movs	r3, #3
 8008a78:	613b      	str	r3, [r7, #16]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a7a:	1d3b      	adds	r3, r7, #4
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	4803      	ldr	r0, [pc, #12]	; (8008a8c <initGpio+0x40>)
 8008a80:	f7fb f930 	bl	8003ce4 <HAL_GPIO_Init>
}
 8008a84:	bf00      	nop
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	40020000 	.word	0x40020000

08008a90 <reverb_filter>:
	HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputLeft,1,SAI_WAIT);
	HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputRight,1,SAI_WAIT);
}

void reverb_filter(uint16_t i_delay_in_ms, uint16_t i_gain)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	460a      	mov	r2, r1
 8008a9a:	80fb      	strh	r3, [r7, #6]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	80bb      	strh	r3, [r7, #4]
	// Variable declaration
	uint16_t index_delay;

	// Variable initialization
	index_delay    = ((i_delay_in_ms * AUDIOFREQ_16K) / SCALING_MILI_TO_UNIT) - 1;
 8008aa0:	88fb      	ldrh	r3, [r7, #6]
 8008aa2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8008aa6:	fb02 f303 	mul.w	r3, r2, r3
 8008aaa:	4a4c      	ldr	r2, [pc, #304]	; (8008bdc <reverb_filter+0x14c>)
 8008aac:	fba2 2303 	umull	r2, r3, r2, r3
 8008ab0:	099b      	lsrs	r3, r3, #6
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	81fb      	strh	r3, [r7, #14]
	echOutputRight = 0;
 8008ab8:	4b49      	ldr	r3, [pc, #292]	; (8008be0 <reverb_filter+0x150>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	801a      	strh	r2, [r3, #0]
	echOutputLeft  = 0;
 8008abe:	4b49      	ldr	r3, [pc, #292]	; (8008be4 <reverb_filter+0x154>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	801a      	strh	r2, [r3, #0]

	/* Reception des échantillons d'entrée */
	HAL_SAI_Receive (&hsai_BlockB2,(uint8_t *)&echInputLeft, 1,SAI_WAIT);
 8008ac4:	2364      	movs	r3, #100	; 0x64
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4947      	ldr	r1, [pc, #284]	; (8008be8 <reverb_filter+0x158>)
 8008aca:	4848      	ldr	r0, [pc, #288]	; (8008bec <reverb_filter+0x15c>)
 8008acc:	f7fe f960 	bl	8006d90 <HAL_SAI_Receive>
	HAL_SAI_Receive (&hsai_BlockB2,(uint8_t *)&echInputRight,1,SAI_WAIT);
 8008ad0:	2364      	movs	r3, #100	; 0x64
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	4946      	ldr	r1, [pc, #280]	; (8008bf0 <reverb_filter+0x160>)
 8008ad6:	4845      	ldr	r0, [pc, #276]	; (8008bec <reverb_filter+0x15c>)
 8008ad8:	f7fe f95a 	bl	8006d90 <HAL_SAI_Receive>

	// Compute filter output
	echOutputRight = echInputRight + (bufferOutputRight[(index + index_delay) % BUFFER_SIZE_OUTPUT] * i_gain) / SCALING_MILI_TO_UNIT;
 8008adc:	4b45      	ldr	r3, [pc, #276]	; (8008bf4 <reverb_filter+0x164>)
 8008ade:	881b      	ldrh	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	89fb      	ldrh	r3, [r7, #14]
 8008ae4:	441a      	add	r2, r3
 8008ae6:	4b3d      	ldr	r3, [pc, #244]	; (8008bdc <reverb_filter+0x14c>)
 8008ae8:	fb83 1302 	smull	r1, r3, r3, r2
 8008aec:	1219      	asrs	r1, r3, #8
 8008aee:	17d3      	asrs	r3, r2, #31
 8008af0:	1acb      	subs	r3, r1, r3
 8008af2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008af6:	fb01 f303 	mul.w	r3, r1, r3
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	4a3e      	ldr	r2, [pc, #248]	; (8008bf8 <reverb_filter+0x168>)
 8008afe:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008b02:	461a      	mov	r2, r3
 8008b04:	88bb      	ldrh	r3, [r7, #4]
 8008b06:	fb03 f302 	mul.w	r3, r3, r2
 8008b0a:	4a34      	ldr	r2, [pc, #208]	; (8008bdc <reverb_filter+0x14c>)
 8008b0c:	fb82 1203 	smull	r1, r2, r2, r3
 8008b10:	1192      	asrs	r2, r2, #6
 8008b12:	17db      	asrs	r3, r3, #31
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	4b35      	ldr	r3, [pc, #212]	; (8008bf0 <reverb_filter+0x160>)
 8008b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	4413      	add	r3, r2
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	b21a      	sxth	r2, r3
 8008b26:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <reverb_filter+0x150>)
 8008b28:	801a      	strh	r2, [r3, #0]
	echOutputLeft  = echInputLeft  + (bufferOutputLeft[ (index + index_delay) % BUFFER_SIZE_OUTPUT] * i_gain) / SCALING_MILI_TO_UNIT;
 8008b2a:	4b32      	ldr	r3, [pc, #200]	; (8008bf4 <reverb_filter+0x164>)
 8008b2c:	881b      	ldrh	r3, [r3, #0]
 8008b2e:	461a      	mov	r2, r3
 8008b30:	89fb      	ldrh	r3, [r7, #14]
 8008b32:	441a      	add	r2, r3
 8008b34:	4b29      	ldr	r3, [pc, #164]	; (8008bdc <reverb_filter+0x14c>)
 8008b36:	fb83 1302 	smull	r1, r3, r3, r2
 8008b3a:	1219      	asrs	r1, r3, #8
 8008b3c:	17d3      	asrs	r3, r2, #31
 8008b3e:	1acb      	subs	r3, r1, r3
 8008b40:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8008b44:	fb01 f303 	mul.w	r3, r1, r3
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	4a2c      	ldr	r2, [pc, #176]	; (8008bfc <reverb_filter+0x16c>)
 8008b4c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8008b50:	461a      	mov	r2, r3
 8008b52:	88bb      	ldrh	r3, [r7, #4]
 8008b54:	fb03 f302 	mul.w	r3, r3, r2
 8008b58:	4a20      	ldr	r2, [pc, #128]	; (8008bdc <reverb_filter+0x14c>)
 8008b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8008b5e:	1192      	asrs	r2, r2, #6
 8008b60:	17db      	asrs	r3, r3, #31
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <reverb_filter+0x158>)
 8008b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	4413      	add	r3, r2
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	b21a      	sxth	r2, r3
 8008b74:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <reverb_filter+0x154>)
 8008b76:	801a      	strh	r2, [r3, #0]

	// Save output into buffer
	bufferOutputRight[index] = echOutputRight;
 8008b78:	4b1e      	ldr	r3, [pc, #120]	; (8008bf4 <reverb_filter+0x164>)
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	4b18      	ldr	r3, [pc, #96]	; (8008be0 <reverb_filter+0x150>)
 8008b80:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008b84:	4b1c      	ldr	r3, [pc, #112]	; (8008bf8 <reverb_filter+0x168>)
 8008b86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	bufferOutputLeft[index]  = echOutputLeft;
 8008b8a:	4b1a      	ldr	r3, [pc, #104]	; (8008bf4 <reverb_filter+0x164>)
 8008b8c:	881b      	ldrh	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4b14      	ldr	r3, [pc, #80]	; (8008be4 <reverb_filter+0x154>)
 8008b92:	f9b3 1000 	ldrsh.w	r1, [r3]
 8008b96:	4b19      	ldr	r3, [pc, #100]	; (8008bfc <reverb_filter+0x16c>)
 8008b98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	// Update index filter
	if(index == 0)
 8008b9c:	4b15      	ldr	r3, [pc, #84]	; (8008bf4 <reverb_filter+0x164>)
 8008b9e:	881b      	ldrh	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <reverb_filter+0x11e>
	{
		index = BUFFER_SIZE_INPUT - 1;
 8008ba4:	4b13      	ldr	r3, [pc, #76]	; (8008bf4 <reverb_filter+0x164>)
 8008ba6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8008baa:	801a      	strh	r2, [r3, #0]
 8008bac:	e005      	b.n	8008bba <reverb_filter+0x12a>
	}
	else
	{
		index--;
 8008bae:	4b11      	ldr	r3, [pc, #68]	; (8008bf4 <reverb_filter+0x164>)
 8008bb0:	881b      	ldrh	r3, [r3, #0]
 8008bb2:	3b01      	subs	r3, #1
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <reverb_filter+0x164>)
 8008bb8:	801a      	strh	r2, [r3, #0]
	}

	/* Envoi des échantillons de sortie */
	HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputLeft,1,SAI_WAIT);
 8008bba:	2364      	movs	r3, #100	; 0x64
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	4909      	ldr	r1, [pc, #36]	; (8008be4 <reverb_filter+0x154>)
 8008bc0:	480f      	ldr	r0, [pc, #60]	; (8008c00 <reverb_filter+0x170>)
 8008bc2:	f7fe f817 	bl	8006bf4 <HAL_SAI_Transmit>
	HAL_SAI_Transmit(&hsai_BlockA2,(uint8_t *)&echOutputRight,1,SAI_WAIT);
 8008bc6:	2364      	movs	r3, #100	; 0x64
 8008bc8:	2201      	movs	r2, #1
 8008bca:	4905      	ldr	r1, [pc, #20]	; (8008be0 <reverb_filter+0x150>)
 8008bcc:	480c      	ldr	r0, [pc, #48]	; (8008c00 <reverb_filter+0x170>)
 8008bce:	f7fe f811 	bl	8006bf4 <HAL_SAI_Transmit>
}
 8008bd2:	bf00      	nop
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	10624dd3 	.word	0x10624dd3
 8008be0:	200040bc 	.word	0x200040bc
 8008be4:	200040be 	.word	0x200040be
 8008be8:	200040b8 	.word	0x200040b8
 8008bec:	200041ec 	.word	0x200041ec
 8008bf0:	200040ba 	.word	0x200040ba
 8008bf4:	20000056 	.word	0x20000056
 8008bf8:	20000238 	.word	0x20000238
 8008bfc:	20002178 	.word	0x20002178
 8008c00:	200042fc 	.word	0x200042fc

08008c04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8008c08:	f7ff febc 	bl	8008984 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8008c0c:	f7ff feda 	bl	80089c4 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008c10:	f7fa f962 	bl	8002ed8 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008c14:	f000 f844 	bl	8008ca0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8008c18:	f000 fd46 	bl	80096a8 <MX_GPIO_Init>
	MX_I2C3_Init();
 8008c1c:	f000 f926 	bl	8008e6c <MX_I2C3_Init>
	MX_SAI2_Init();
 8008c20:	f000 f9f4 	bl	800900c <MX_SAI2_Init>
	MX_TIM1_Init();
 8008c24:	f000 fa9e 	bl	8009164 <MX_TIM1_Init>
	MX_TIM2_Init();
 8008c28:	f000 faee 	bl	8009208 <MX_TIM2_Init>
	MX_TIM5_Init();
 8008c2c:	f000 fb88 	bl	8009340 <MX_TIM5_Init>
	MX_TIM8_Init();
 8008c30:	f000 fbfc 	bl	800942c <MX_TIM8_Init>
	MX_TIM12_Init();
 8008c34:	f000 fc4c 	bl	80094d0 <MX_TIM12_Init>
	MX_USART1_UART_Init();
 8008c38:	f000 fc8e 	bl	8009558 <MX_USART1_UART_Init>
	MX_USART6_UART_Init();
 8008c3c:	f000 fcbc 	bl	80095b8 <MX_USART6_UART_Init>
	MX_FMC_Init();
 8008c40:	f000 fcea 	bl	8009618 <MX_FMC_Init>
	MX_LTDC_Init();
 8008c44:	f000 f952 	bl	8008eec <MX_LTDC_Init>
	MX_DMA2D_Init();
 8008c48:	f000 f8de 	bl	8008e08 <MX_DMA2D_Init>
	MX_TIM3_Init();
 8008c4c:	f000 fb2a 	bl	80092a4 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	__HAL_SAI_ENABLE(&hsai_BlockA2); // Must be before Initialisation of WM8994
 8008c50:	4b10      	ldr	r3, [pc, #64]	; (8008c94 <main+0x90>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <main+0x90>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008c5e:	601a      	str	r2, [r3, #0]
	__HAL_SAI_ENABLE(&hsai_BlockB2); // Must be before Initialisation of WM8994
 8008c60:	4b0d      	ldr	r3, [pc, #52]	; (8008c98 <main+0x94>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	4b0c      	ldr	r3, [pc, #48]	; (8008c98 <main+0x94>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008c6e:	601a      	str	r2, [r3, #0]
	wm8994Init();
 8008c70:	f001 f82c 	bl	8009ccc <wm8994Init>
	BSP_LCD_Init();
 8008c74:	f7f9 f940 	bl	8001ef8 <BSP_LCD_Init>
	lcd_start_page();
 8008c78:	f7ff fe16 	bl	80088a8 <lcd_start_page>
	HAL_TIM_Base_Start(&htim3);
 8008c7c:	4807      	ldr	r0, [pc, #28]	; (8008c9c <main+0x98>)
 8008c7e:	f7fe fa81 	bl	8007184 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	initGpio();			// Toggle PA0 pour la mesure du temps de calcul
 8008c82:	f7ff fee3 	bl	8008a4c <initGpio>

	while(1){
//		passThrough();
//		echo_filter(250, 600);
		reverb_filter(250, 600);
 8008c86:	f44f 7116 	mov.w	r1, #600	; 0x258
 8008c8a:	20fa      	movs	r0, #250	; 0xfa
 8008c8c:	f7ff ff00 	bl	8008a90 <reverb_filter>
 8008c90:	e7f9      	b.n	8008c86 <main+0x82>
 8008c92:	bf00      	nop
 8008c94:	200042fc 	.word	0x200042fc
 8008c98:	200041ec 	.word	0x200041ec
 8008c9c:	200043c0 	.word	0x200043c0

08008ca0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b0b4      	sub	sp, #208	; 0xd0
 8008ca4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ca6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008caa:	2230      	movs	r2, #48	; 0x30
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 fd50 	bl	800a754 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008cb4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008cb8:	2200      	movs	r2, #0
 8008cba:	601a      	str	r2, [r3, #0]
 8008cbc:	605a      	str	r2, [r3, #4]
 8008cbe:	609a      	str	r2, [r3, #8]
 8008cc0:	60da      	str	r2, [r3, #12]
 8008cc2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008cc4:	f107 0308 	add.w	r3, r7, #8
 8008cc8:	2284      	movs	r2, #132	; 0x84
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f001 fd41 	bl	800a754 <memset>

	/**Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8008cd2:	f7fc fc45 	bl	8005560 <HAL_PWR_EnableBkUpAccess>
	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8008cd6:	4b49      	ldr	r3, [pc, #292]	; (8008dfc <SystemClock_Config+0x15c>)
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	4a48      	ldr	r2, [pc, #288]	; (8008dfc <SystemClock_Config+0x15c>)
 8008cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8008ce2:	4b46      	ldr	r3, [pc, #280]	; (8008dfc <SystemClock_Config+0x15c>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cea:	607b      	str	r3, [r7, #4]
 8008cec:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008cee:	4b44      	ldr	r3, [pc, #272]	; (8008e00 <SystemClock_Config+0x160>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a43      	ldr	r2, [pc, #268]	; (8008e00 <SystemClock_Config+0x160>)
 8008cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cf8:	6013      	str	r3, [r2, #0]
 8008cfa:	4b41      	ldr	r3, [pc, #260]	; (8008e00 <SystemClock_Config+0x160>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d02:	603b      	str	r3, [r7, #0]
 8008d04:	683b      	ldr	r3, [r7, #0]
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d06:	2301      	movs	r3, #1
 8008d08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d14:	2302      	movs	r3, #2
 8008d16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8008d22:	2319      	movs	r3, #25
 8008d24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8008d28:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8008d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d30:	2302      	movs	r3, #2
 8008d32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8008d36:	2309      	movs	r3, #9
 8008d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d3c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fc fc6d 	bl	8005620 <HAL_RCC_OscConfig>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 8008d4c:	f000 ffba 	bl	8009cc4 <Error_Handler>
	}
	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008d50:	f7fc fc16 	bl	8005580 <HAL_PWREx_EnableOverDrive>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8008d5a:	f000 ffb3 	bl	8009cc4 <Error_Handler>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d5e:	230f      	movs	r3, #15
 8008d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d64:	2302      	movs	r3, #2
 8008d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008d74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8008d80:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8008d84:	2106      	movs	r1, #6
 8008d86:	4618      	mov	r0, r3
 8008d88:	f7fc feba 	bl	8005b00 <HAL_RCC_ClockConfig>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <SystemClock_Config+0xf6>
	{
		Error_Handler();
 8008d92:	f000 ff97 	bl	8009cc4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 8008d96:	4b1b      	ldr	r3, [pc, #108]	; (8008e04 <SystemClock_Config+0x164>)
 8008d98:	60bb      	str	r3, [r7, #8]
			|RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
			|RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 344;
 8008d9a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 8008d9e:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8008da0:	2302      	movs	r3, #2
 8008da2:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008da4:	2302      	movs	r3, #2
 8008da6:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SQ = 7;
 8008da8:	2307      	movs	r3, #7
 8008daa:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8008dac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008db0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8008db2:	2305      	movs	r3, #5
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8008db6:	2302      	movs	r3, #2
 8008db8:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLI2SDivQ = 1;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8008dc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008dca:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8008dcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008dd0:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dde:	f107 0308 	add.w	r3, r7, #8
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fd f85e 	bl	8005ea4 <HAL_RCCEx_PeriphCLKConfig>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <SystemClock_Config+0x152>
	{
		Error_Handler();
 8008dee:	f000 ff69 	bl	8009cc4 <Error_Handler>
	}
}
 8008df2:	bf00      	nop
 8008df4:	37d0      	adds	r7, #208	; 0xd0
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
 8008dfa:	bf00      	nop
 8008dfc:	40023800 	.word	0x40023800
 8008e00:	40007000 	.word	0x40007000
 8008e04:	00110848 	.word	0x00110848

08008e08 <MX_DMA2D_Init>:
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8008e0c:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e0e:	4a16      	ldr	r2, [pc, #88]	; (8008e68 <MX_DMA2D_Init+0x60>)
 8008e10:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8008e12:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8008e18:	4b12      	ldr	r3, [pc, #72]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8008e1e:	4b11      	ldr	r3, [pc, #68]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8008e2a:	4b0e      	ldr	r3, [pc, #56]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008e30:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e32:	2200      	movs	r2, #0
 8008e34:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8008e36:	4b0b      	ldr	r3, [pc, #44]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8008e3c:	4809      	ldr	r0, [pc, #36]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e3e:	f7fa fba7 	bl	8003590 <HAL_DMA2D_Init>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_DMA2D_Init+0x44>
	{
		Error_Handler();
 8008e48:	f000 ff3c 	bl	8009cc4 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8008e4c:	2101      	movs	r1, #1
 8008e4e:	4805      	ldr	r0, [pc, #20]	; (8008e64 <MX_DMA2D_Init+0x5c>)
 8008e50:	f7fa fe0c 	bl	8003a6c <HAL_DMA2D_ConfigLayer>
 8008e54:	4603      	mov	r3, r0
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d001      	beq.n	8008e5e <MX_DMA2D_Init+0x56>
	{
		Error_Handler();
 8008e5a:	f000 ff33 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */
	//__HAL_RCC_DMA2D_CLK_ENABLE();
	/* USER CODE END DMA2D_Init 2 */

}
 8008e5e:	bf00      	nop
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200045c8 	.word	0x200045c8
 8008e68:	4002b000 	.word	0x4002b000

08008e6c <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8008e70:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e72:	4a1c      	ldr	r2, [pc, #112]	; (8008ee4 <MX_I2C3_Init+0x78>)
 8008e74:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x00C0EAFF;
 8008e76:	4b1a      	ldr	r3, [pc, #104]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e78:	4a1b      	ldr	r2, [pc, #108]	; (8008ee8 <MX_I2C3_Init+0x7c>)
 8008e7a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8008e7c:	4b18      	ldr	r3, [pc, #96]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e7e:	2200      	movs	r2, #0
 8008e80:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008e82:	4b17      	ldr	r3, [pc, #92]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e84:	2201      	movs	r2, #1
 8008e86:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008e88:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8008e8e:	4b14      	ldr	r3, [pc, #80]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008e94:	4b12      	ldr	r3, [pc, #72]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008e9a:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008ea6:	480e      	ldr	r0, [pc, #56]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008ea8:	f7fb f9ee 	bl	8004288 <HAL_I2C_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <MX_I2C3_Init+0x4a>
	{
		Error_Handler();
 8008eb2:	f000 ff07 	bl	8009cc4 <Error_Handler>
	}
	/**Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	4809      	ldr	r0, [pc, #36]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008eba:	f7fb ff25 	bl	8004d08 <HAL_I2CEx_ConfigAnalogFilter>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <MX_I2C3_Init+0x5c>
	{
		Error_Handler();
 8008ec4:	f000 fefe 	bl	8009cc4 <Error_Handler>
	}
	/**Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <MX_I2C3_Init+0x74>)
 8008ecc:	f7fb ff67 	bl	8004d9e <HAL_I2CEx_ConfigDigitalFilter>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d001      	beq.n	8008eda <MX_I2C3_Init+0x6e>
	{
		Error_Handler();
 8008ed6:	f000 fef5 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8008eda:	bf00      	nop
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20004270 	.word	0x20004270
 8008ee4:	40005c00 	.word	0x40005c00
 8008ee8:	00c0eaff 	.word	0x00c0eaff

08008eec <MX_LTDC_Init>:
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b08e      	sub	sp, #56	; 0x38
 8008ef0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8008ef2:	1d3b      	adds	r3, r7, #4
 8008ef4:	2234      	movs	r2, #52	; 0x34
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 fc2b 	bl	800a754 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8008efe:	4b40      	ldr	r3, [pc, #256]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f00:	4a40      	ldr	r2, [pc, #256]	; (8009004 <MX_LTDC_Init+0x118>)
 8008f02:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8008f04:	4b3e      	ldr	r3, [pc, #248]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8008f0a:	4b3d      	ldr	r3, [pc, #244]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8008f10:	4b3b      	ldr	r3, [pc, #236]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8008f16:	4b3a      	ldr	r3, [pc, #232]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8008f1c:	4b38      	ldr	r3, [pc, #224]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f1e:	2228      	movs	r2, #40	; 0x28
 8008f20:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8008f22:	4b37      	ldr	r3, [pc, #220]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f24:	2209      	movs	r2, #9
 8008f26:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 8008f28:	4b35      	ldr	r3, [pc, #212]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f2a:	2235      	movs	r2, #53	; 0x35
 8008f2c:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8008f2e:	4b34      	ldr	r3, [pc, #208]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f30:	220b      	movs	r2, #11
 8008f32:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8008f34:	4b32      	ldr	r3, [pc, #200]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f36:	f240 2215 	movw	r2, #533	; 0x215
 8008f3a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8008f3c:	4b30      	ldr	r3, [pc, #192]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f3e:	f240 121b 	movw	r2, #283	; 0x11b
 8008f42:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8008f44:	4b2e      	ldr	r3, [pc, #184]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f46:	f240 2235 	movw	r2, #565	; 0x235
 8008f4a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 8008f4c:	4b2c      	ldr	r3, [pc, #176]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f4e:	f240 121d 	movw	r2, #285	; 0x11d
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8008f54:	4b2a      	ldr	r3, [pc, #168]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 8008f5c:	4b28      	ldr	r3, [pc, #160]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8008f64:	4b26      	ldr	r3, [pc, #152]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8008f6c:	4824      	ldr	r0, [pc, #144]	; (8009000 <MX_LTDC_Init+0x114>)
 8008f6e:	f7fb ff65 	bl	8004e3c <HAL_LTDC_Init>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <MX_LTDC_Init+0x90>
	{
		Error_Handler();
 8008f78:	f000 fea4 	bl	8009cc4 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8008f80:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008f84:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8008f86:	2300      	movs	r3, #0
 8008f88:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 8008f8a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008f8e:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8008f90:	2302      	movs	r3, #2
 8008f92:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8008f94:	23ff      	movs	r3, #255	; 0xff
 8008f96:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8008f9c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008fa0:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8008fa2:	2307      	movs	r3, #7
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8008fa6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8008faa:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8008fac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8008fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8008fb2:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008fb6:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8008fca:	1d3b      	adds	r3, r7, #4
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4619      	mov	r1, r3
 8008fd0:	480b      	ldr	r0, [pc, #44]	; (8009000 <MX_LTDC_Init+0x114>)
 8008fd2:	f7fc f8d9 	bl	8005188 <HAL_LTDC_ConfigLayer>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <MX_LTDC_Init+0xf4>
	{
		Error_Handler();
 8008fdc:	f000 fe72 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */
	__HAL_RCC_LTDC_CLK_ENABLE();
 8008fe0:	4b09      	ldr	r3, [pc, #36]	; (8009008 <MX_LTDC_Init+0x11c>)
 8008fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe4:	4a08      	ldr	r2, [pc, #32]	; (8009008 <MX_LTDC_Init+0x11c>)
 8008fe6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008fea:	6453      	str	r3, [r2, #68]	; 0x44
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <MX_LTDC_Init+0x11c>)
 8008fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ff4:	603b      	str	r3, [r7, #0]
 8008ff6:	683b      	ldr	r3, [r7, #0]

	/* USER CODE END LTDC_Init 2 */

}
 8008ff8:	bf00      	nop
 8008ffa:	3738      	adds	r7, #56	; 0x38
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20004400 	.word	0x20004400
 8009004:	40016800 	.word	0x40016800
 8009008:	40023800 	.word	0x40023800

0800900c <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8009010:	4b50      	ldr	r3, [pc, #320]	; (8009154 <MX_SAI2_Init+0x148>)
 8009012:	4a51      	ldr	r2, [pc, #324]	; (8009158 <MX_SAI2_Init+0x14c>)
 8009014:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8009016:	4b4f      	ldr	r3, [pc, #316]	; (8009154 <MX_SAI2_Init+0x148>)
 8009018:	2200      	movs	r2, #0
 800901a:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 800901c:	4b4d      	ldr	r3, [pc, #308]	; (8009154 <MX_SAI2_Init+0x148>)
 800901e:	2200      	movs	r2, #0
 8009020:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_16;
 8009022:	4b4c      	ldr	r3, [pc, #304]	; (8009154 <MX_SAI2_Init+0x148>)
 8009024:	2280      	movs	r2, #128	; 0x80
 8009026:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8009028:	4b4a      	ldr	r3, [pc, #296]	; (8009154 <MX_SAI2_Init+0x148>)
 800902a:	2200      	movs	r2, #0
 800902c:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 800902e:	4b49      	ldr	r3, [pc, #292]	; (8009154 <MX_SAI2_Init+0x148>)
 8009030:	2201      	movs	r2, #1
 8009032:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8009034:	4b47      	ldr	r3, [pc, #284]	; (8009154 <MX_SAI2_Init+0x148>)
 8009036:	2200      	movs	r2, #0
 8009038:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLE;
 800903a:	4b46      	ldr	r3, [pc, #280]	; (8009154 <MX_SAI2_Init+0x148>)
 800903c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009040:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8009042:	4b44      	ldr	r3, [pc, #272]	; (8009154 <MX_SAI2_Init+0x148>)
 8009044:	2200      	movs	r2, #0
 8009046:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8009048:	4b42      	ldr	r3, [pc, #264]	; (8009154 <MX_SAI2_Init+0x148>)
 800904a:	2201      	movs	r2, #1
 800904c:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_16K;
 800904e:	4b41      	ldr	r3, [pc, #260]	; (8009154 <MX_SAI2_Init+0x148>)
 8009050:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8009054:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8009056:	4b3f      	ldr	r3, [pc, #252]	; (8009154 <MX_SAI2_Init+0x148>)
 8009058:	2200      	movs	r2, #0
 800905a:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800905c:	4b3d      	ldr	r3, [pc, #244]	; (8009154 <MX_SAI2_Init+0x148>)
 800905e:	2200      	movs	r2, #0
 8009060:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8009062:	4b3c      	ldr	r3, [pc, #240]	; (8009154 <MX_SAI2_Init+0x148>)
 8009064:	2200      	movs	r2, #0
 8009066:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009068:	4b3a      	ldr	r3, [pc, #232]	; (8009154 <MX_SAI2_Init+0x148>)
 800906a:	2200      	movs	r2, #0
 800906c:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 64;
 800906e:	4b39      	ldr	r3, [pc, #228]	; (8009154 <MX_SAI2_Init+0x148>)
 8009070:	2240      	movs	r2, #64	; 0x40
 8009072:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 32;
 8009074:	4b37      	ldr	r3, [pc, #220]	; (8009154 <MX_SAI2_Init+0x148>)
 8009076:	2220      	movs	r2, #32
 8009078:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 800907a:	4b36      	ldr	r3, [pc, #216]	; (8009154 <MX_SAI2_Init+0x148>)
 800907c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009080:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8009082:	4b34      	ldr	r3, [pc, #208]	; (8009154 <MX_SAI2_Init+0x148>)
 8009084:	2200      	movs	r2, #0
 8009086:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8009088:	4b32      	ldr	r3, [pc, #200]	; (8009154 <MX_SAI2_Init+0x148>)
 800908a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800908e:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8009090:	4b30      	ldr	r3, [pc, #192]	; (8009154 <MX_SAI2_Init+0x148>)
 8009092:	2200      	movs	r2, #0
 8009094:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8009096:	4b2f      	ldr	r3, [pc, #188]	; (8009154 <MX_SAI2_Init+0x148>)
 8009098:	2200      	movs	r2, #0
 800909a:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 4;
 800909c:	4b2d      	ldr	r3, [pc, #180]	; (8009154 <MX_SAI2_Init+0x148>)
 800909e:	2204      	movs	r2, #4
 80090a0:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000005;
 80090a2:	4b2c      	ldr	r3, [pc, #176]	; (8009154 <MX_SAI2_Init+0x148>)
 80090a4:	2205      	movs	r2, #5
 80090a6:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 80090a8:	482a      	ldr	r0, [pc, #168]	; (8009154 <MX_SAI2_Init+0x148>)
 80090aa:	f7fd fc2d 	bl	8006908 <HAL_SAI_Init>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_SAI2_Init+0xac>
	{
		Error_Handler();
 80090b4:	f000 fe06 	bl	8009cc4 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 80090b8:	4b28      	ldr	r3, [pc, #160]	; (800915c <MX_SAI2_Init+0x150>)
 80090ba:	4a29      	ldr	r2, [pc, #164]	; (8009160 <MX_SAI2_Init+0x154>)
 80090bc:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80090be:	4b27      	ldr	r3, [pc, #156]	; (800915c <MX_SAI2_Init+0x150>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80090c4:	4b25      	ldr	r3, [pc, #148]	; (800915c <MX_SAI2_Init+0x150>)
 80090c6:	2203      	movs	r2, #3
 80090c8:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_16;
 80090ca:	4b24      	ldr	r3, [pc, #144]	; (800915c <MX_SAI2_Init+0x150>)
 80090cc:	2280      	movs	r2, #128	; 0x80
 80090ce:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80090d0:	4b22      	ldr	r3, [pc, #136]	; (800915c <MX_SAI2_Init+0x150>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 80090d6:	4b21      	ldr	r3, [pc, #132]	; (800915c <MX_SAI2_Init+0x150>)
 80090d8:	2201      	movs	r2, #1
 80090da:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80090dc:	4b1f      	ldr	r3, [pc, #124]	; (800915c <MX_SAI2_Init+0x150>)
 80090de:	2201      	movs	r2, #1
 80090e0:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80090e2:	4b1e      	ldr	r3, [pc, #120]	; (800915c <MX_SAI2_Init+0x150>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 80090e8:	4b1c      	ldr	r3, [pc, #112]	; (800915c <MX_SAI2_Init+0x150>)
 80090ea:	2201      	movs	r2, #1
 80090ec:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80090ee:	4b1b      	ldr	r3, [pc, #108]	; (800915c <MX_SAI2_Init+0x150>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80090f4:	4b19      	ldr	r3, [pc, #100]	; (800915c <MX_SAI2_Init+0x150>)
 80090f6:	2200      	movs	r2, #0
 80090f8:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80090fa:	4b18      	ldr	r3, [pc, #96]	; (800915c <MX_SAI2_Init+0x150>)
 80090fc:	2200      	movs	r2, #0
 80090fe:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8009100:	4b16      	ldr	r3, [pc, #88]	; (800915c <MX_SAI2_Init+0x150>)
 8009102:	2200      	movs	r2, #0
 8009104:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 64;
 8009106:	4b15      	ldr	r3, [pc, #84]	; (800915c <MX_SAI2_Init+0x150>)
 8009108:	2240      	movs	r2, #64	; 0x40
 800910a:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 800910c:	4b13      	ldr	r3, [pc, #76]	; (800915c <MX_SAI2_Init+0x150>)
 800910e:	2220      	movs	r2, #32
 8009110:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8009112:	4b12      	ldr	r3, [pc, #72]	; (800915c <MX_SAI2_Init+0x150>)
 8009114:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009118:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800911a:	4b10      	ldr	r3, [pc, #64]	; (800915c <MX_SAI2_Init+0x150>)
 800911c:	2200      	movs	r2, #0
 800911e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8009120:	4b0e      	ldr	r3, [pc, #56]	; (800915c <MX_SAI2_Init+0x150>)
 8009122:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009126:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8009128:	4b0c      	ldr	r3, [pc, #48]	; (800915c <MX_SAI2_Init+0x150>)
 800912a:	2200      	movs	r2, #0
 800912c:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800912e:	4b0b      	ldr	r3, [pc, #44]	; (800915c <MX_SAI2_Init+0x150>)
 8009130:	2200      	movs	r2, #0
 8009132:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 4;
 8009134:	4b09      	ldr	r3, [pc, #36]	; (800915c <MX_SAI2_Init+0x150>)
 8009136:	2204      	movs	r2, #4
 8009138:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x0000000A;
 800913a:	4b08      	ldr	r3, [pc, #32]	; (800915c <MX_SAI2_Init+0x150>)
 800913c:	220a      	movs	r2, #10
 800913e:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8009140:	4806      	ldr	r0, [pc, #24]	; (800915c <MX_SAI2_Init+0x150>)
 8009142:	f7fd fbe1 	bl	8006908 <HAL_SAI_Init>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <MX_SAI2_Init+0x144>
	{
		Error_Handler();
 800914c:	f000 fdba 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */

}
 8009150:	bf00      	nop
 8009152:	bd80      	pop	{r7, pc}
 8009154:	200042fc 	.word	0x200042fc
 8009158:	40015c04 	.word	0x40015c04
 800915c:	200041ec 	.word	0x200041ec
 8009160:	40015c24 	.word	0x40015c24

08009164 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800916a:	f107 0310 	add.w	r3, r7, #16
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
 8009172:	605a      	str	r2, [r3, #4]
 8009174:	609a      	str	r2, [r3, #8]
 8009176:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009178:	1d3b      	adds	r3, r7, #4
 800917a:	2200      	movs	r2, #0
 800917c:	601a      	str	r2, [r3, #0]
 800917e:	605a      	str	r2, [r3, #4]
 8009180:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8009182:	4b1f      	ldr	r3, [pc, #124]	; (8009200 <MX_TIM1_Init+0x9c>)
 8009184:	4a1f      	ldr	r2, [pc, #124]	; (8009204 <MX_TIM1_Init+0xa0>)
 8009186:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8009188:	4b1d      	ldr	r3, [pc, #116]	; (8009200 <MX_TIM1_Init+0x9c>)
 800918a:	2200      	movs	r2, #0
 800918c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800918e:	4b1c      	ldr	r3, [pc, #112]	; (8009200 <MX_TIM1_Init+0x9c>)
 8009190:	2200      	movs	r2, #0
 8009192:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 8009194:	4b1a      	ldr	r3, [pc, #104]	; (8009200 <MX_TIM1_Init+0x9c>)
 8009196:	2200      	movs	r2, #0
 8009198:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800919a:	4b19      	ldr	r3, [pc, #100]	; (8009200 <MX_TIM1_Init+0x9c>)
 800919c:	2200      	movs	r2, #0
 800919e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80091a0:	4b17      	ldr	r3, [pc, #92]	; (8009200 <MX_TIM1_Init+0x9c>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80091a6:	4b16      	ldr	r3, [pc, #88]	; (8009200 <MX_TIM1_Init+0x9c>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80091ac:	4814      	ldr	r0, [pc, #80]	; (8009200 <MX_TIM1_Init+0x9c>)
 80091ae:	f7fd ffbe 	bl	800712e <HAL_TIM_Base_Init>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d001      	beq.n	80091bc <MX_TIM1_Init+0x58>
	{
		Error_Handler();
 80091b8:	f000 fd84 	bl	8009cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091c0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80091c2:	f107 0310 	add.w	r3, r7, #16
 80091c6:	4619      	mov	r1, r3
 80091c8:	480d      	ldr	r0, [pc, #52]	; (8009200 <MX_TIM1_Init+0x9c>)
 80091ca:	f7fe f821 	bl	8007210 <HAL_TIM_ConfigClockSource>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d001      	beq.n	80091d8 <MX_TIM1_Init+0x74>
	{
		Error_Handler();
 80091d4:	f000 fd76 	bl	8009cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091d8:	2300      	movs	r3, #0
 80091da:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80091dc:	2300      	movs	r3, #0
 80091de:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80091e4:	1d3b      	adds	r3, r7, #4
 80091e6:	4619      	mov	r1, r3
 80091e8:	4805      	ldr	r0, [pc, #20]	; (8009200 <MX_TIM1_Init+0x9c>)
 80091ea:	f7fe fc27 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <MX_TIM1_Init+0x94>
	{
		Error_Handler();
 80091f4:	f000 fd66 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80091f8:	bf00      	nop
 80091fa:	3720      	adds	r7, #32
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	20004518 	.word	0x20004518
 8009204:	40010000 	.word	0x40010000

08009208 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b088      	sub	sp, #32
 800920c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800920e:	f107 0310 	add.w	r3, r7, #16
 8009212:	2200      	movs	r2, #0
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	605a      	str	r2, [r3, #4]
 8009218:	609a      	str	r2, [r3, #8]
 800921a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800921c:	1d3b      	adds	r3, r7, #4
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
 8009222:	605a      	str	r2, [r3, #4]
 8009224:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8009226:	4b1e      	ldr	r3, [pc, #120]	; (80092a0 <MX_TIM2_Init+0x98>)
 8009228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800922c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 32000;
 800922e:	4b1c      	ldr	r3, [pc, #112]	; (80092a0 <MX_TIM2_Init+0x98>)
 8009230:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8009234:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009236:	4b1a      	ldr	r3, [pc, #104]	; (80092a0 <MX_TIM2_Init+0x98>)
 8009238:	2200      	movs	r2, #0
 800923a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0;
 800923c:	4b18      	ldr	r3, [pc, #96]	; (80092a0 <MX_TIM2_Init+0x98>)
 800923e:	2200      	movs	r2, #0
 8009240:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009242:	4b17      	ldr	r3, [pc, #92]	; (80092a0 <MX_TIM2_Init+0x98>)
 8009244:	2200      	movs	r2, #0
 8009246:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009248:	4b15      	ldr	r3, [pc, #84]	; (80092a0 <MX_TIM2_Init+0x98>)
 800924a:	2280      	movs	r2, #128	; 0x80
 800924c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800924e:	4814      	ldr	r0, [pc, #80]	; (80092a0 <MX_TIM2_Init+0x98>)
 8009250:	f7fd ff6d 	bl	800712e <HAL_TIM_Base_Init>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 800925a:	f000 fd33 	bl	8009cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800925e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009262:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009264:	f107 0310 	add.w	r3, r7, #16
 8009268:	4619      	mov	r1, r3
 800926a:	480d      	ldr	r0, [pc, #52]	; (80092a0 <MX_TIM2_Init+0x98>)
 800926c:	f7fd ffd0 	bl	8007210 <HAL_TIM_ConfigClockSource>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 8009276:	f000 fd25 	bl	8009cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800927a:	2300      	movs	r3, #0
 800927c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009282:	1d3b      	adds	r3, r7, #4
 8009284:	4619      	mov	r1, r3
 8009286:	4806      	ldr	r0, [pc, #24]	; (80092a0 <MX_TIM2_Init+0x98>)
 8009288:	f7fe fbd8 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8009292:	f000 fd17 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8009296:	bf00      	nop
 8009298:	3720      	adds	r7, #32
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20004608 	.word	0x20004608

080092a4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b088      	sub	sp, #32
 80092a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80092aa:	f107 0310 	add.w	r3, r7, #16
 80092ae:	2200      	movs	r2, #0
 80092b0:	601a      	str	r2, [r3, #0]
 80092b2:	605a      	str	r2, [r3, #4]
 80092b4:	609a      	str	r2, [r3, #8]
 80092b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092b8:	1d3b      	adds	r3, r7, #4
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
 80092be:	605a      	str	r2, [r3, #4]
 80092c0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80092c2:	4b1d      	ldr	r3, [pc, #116]	; (8009338 <MX_TIM3_Init+0x94>)
 80092c4:	4a1d      	ldr	r2, [pc, #116]	; (800933c <MX_TIM3_Init+0x98>)
 80092c6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 80092c8:	4b1b      	ldr	r3, [pc, #108]	; (8009338 <MX_TIM3_Init+0x94>)
 80092ca:	2263      	movs	r2, #99	; 0x63
 80092cc:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092ce:	4b1a      	ldr	r3, [pc, #104]	; (8009338 <MX_TIM3_Init+0x94>)
 80092d0:	2200      	movs	r2, #0
 80092d2:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80092d4:	4b18      	ldr	r3, [pc, #96]	; (8009338 <MX_TIM3_Init+0x94>)
 80092d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092da:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092dc:	4b16      	ldr	r3, [pc, #88]	; (8009338 <MX_TIM3_Init+0x94>)
 80092de:	2200      	movs	r2, #0
 80092e0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092e2:	4b15      	ldr	r3, [pc, #84]	; (8009338 <MX_TIM3_Init+0x94>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80092e8:	4813      	ldr	r0, [pc, #76]	; (8009338 <MX_TIM3_Init+0x94>)
 80092ea:	f7fd ff20 	bl	800712e <HAL_TIM_Base_Init>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 80092f4:	f000 fce6 	bl	8009cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80092f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092fc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80092fe:	f107 0310 	add.w	r3, r7, #16
 8009302:	4619      	mov	r1, r3
 8009304:	480c      	ldr	r0, [pc, #48]	; (8009338 <MX_TIM3_Init+0x94>)
 8009306:	f7fd ff83 	bl	8007210 <HAL_TIM_ConfigClockSource>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8009310:	f000 fcd8 	bl	8009cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009314:	2300      	movs	r3, #0
 8009316:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009318:	2300      	movs	r3, #0
 800931a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800931c:	1d3b      	adds	r3, r7, #4
 800931e:	4619      	mov	r1, r3
 8009320:	4805      	ldr	r0, [pc, #20]	; (8009338 <MX_TIM3_Init+0x94>)
 8009322:	f7fe fb8b 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d001      	beq.n	8009330 <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 800932c:	f000 fcca 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8009330:	bf00      	nop
 8009332:	3720      	adds	r7, #32
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	200043c0 	.word	0x200043c0
 800933c:	40000400 	.word	0x40000400

08009340 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08e      	sub	sp, #56	; 0x38
 8009344:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	605a      	str	r2, [r3, #4]
 8009350:	609a      	str	r2, [r3, #8]
 8009352:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009354:	f107 031c 	add.w	r3, r7, #28
 8009358:	2200      	movs	r2, #0
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	605a      	str	r2, [r3, #4]
 800935e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8009360:	463b      	mov	r3, r7
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	605a      	str	r2, [r3, #4]
 8009368:	609a      	str	r2, [r3, #8]
 800936a:	60da      	str	r2, [r3, #12]
 800936c:	611a      	str	r2, [r3, #16]
 800936e:	615a      	str	r2, [r3, #20]
 8009370:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8009372:	4b2c      	ldr	r3, [pc, #176]	; (8009424 <MX_TIM5_Init+0xe4>)
 8009374:	4a2c      	ldr	r2, [pc, #176]	; (8009428 <MX_TIM5_Init+0xe8>)
 8009376:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8009378:	4b2a      	ldr	r3, [pc, #168]	; (8009424 <MX_TIM5_Init+0xe4>)
 800937a:	2200      	movs	r2, #0
 800937c:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800937e:	4b29      	ldr	r3, [pc, #164]	; (8009424 <MX_TIM5_Init+0xe4>)
 8009380:	2200      	movs	r2, #0
 8009382:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 0;
 8009384:	4b27      	ldr	r3, [pc, #156]	; (8009424 <MX_TIM5_Init+0xe4>)
 8009386:	2200      	movs	r2, #0
 8009388:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800938a:	4b26      	ldr	r3, [pc, #152]	; (8009424 <MX_TIM5_Init+0xe4>)
 800938c:	2200      	movs	r2, #0
 800938e:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009390:	4b24      	ldr	r3, [pc, #144]	; (8009424 <MX_TIM5_Init+0xe4>)
 8009392:	2200      	movs	r2, #0
 8009394:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009396:	4823      	ldr	r0, [pc, #140]	; (8009424 <MX_TIM5_Init+0xe4>)
 8009398:	f7fd fec9 	bl	800712e <HAL_TIM_Base_Init>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <MX_TIM5_Init+0x66>
	{
		Error_Handler();
 80093a2:	f000 fc8f 	bl	8009cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093aa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80093ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80093b0:	4619      	mov	r1, r3
 80093b2:	481c      	ldr	r0, [pc, #112]	; (8009424 <MX_TIM5_Init+0xe4>)
 80093b4:	f7fd ff2c 	bl	8007210 <HAL_TIM_ConfigClockSource>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <MX_TIM5_Init+0x82>
	{
		Error_Handler();
 80093be:	f000 fc81 	bl	8009cc4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80093c2:	4818      	ldr	r0, [pc, #96]	; (8009424 <MX_TIM5_Init+0xe4>)
 80093c4:	f7fd fef9 	bl	80071ba <HAL_TIM_PWM_Init>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <MX_TIM5_Init+0x92>
	{
		Error_Handler();
 80093ce:	f000 fc79 	bl	8009cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093d6:	2300      	movs	r3, #0
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80093da:	f107 031c 	add.w	r3, r7, #28
 80093de:	4619      	mov	r1, r3
 80093e0:	4810      	ldr	r0, [pc, #64]	; (8009424 <MX_TIM5_Init+0xe4>)
 80093e2:	f7fe fb2b 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <MX_TIM5_Init+0xb0>
	{
		Error_Handler();
 80093ec:	f000 fc6a 	bl	8009cc4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093f0:	2360      	movs	r3, #96	; 0x60
 80093f2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80093fc:	2300      	movs	r3, #0
 80093fe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009400:	463b      	mov	r3, r7
 8009402:	220c      	movs	r2, #12
 8009404:	4619      	mov	r1, r3
 8009406:	4807      	ldr	r0, [pc, #28]	; (8009424 <MX_TIM5_Init+0xe4>)
 8009408:	f7fe fb6c 	bl	8007ae4 <HAL_TIM_PWM_ConfigChannel>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <MX_TIM5_Init+0xd6>
	{
		Error_Handler();
 8009412:	f000 fc57 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8009416:	4803      	ldr	r0, [pc, #12]	; (8009424 <MX_TIM5_Init+0xe4>)
 8009418:	f000 fee6 	bl	800a1e8 <HAL_TIM_MspPostInit>

}
 800941c:	bf00      	nop
 800941e:	3738      	adds	r7, #56	; 0x38
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}
 8009424:	20004380 	.word	0x20004380
 8009428:	40000c00 	.word	0x40000c00

0800942c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009432:	f107 0310 	add.w	r3, r7, #16
 8009436:	2200      	movs	r2, #0
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	605a      	str	r2, [r3, #4]
 800943c:	609a      	str	r2, [r3, #8]
 800943e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009440:	1d3b      	adds	r3, r7, #4
 8009442:	2200      	movs	r2, #0
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	605a      	str	r2, [r3, #4]
 8009448:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 800944a:	4b1f      	ldr	r3, [pc, #124]	; (80094c8 <MX_TIM8_Init+0x9c>)
 800944c:	4a1f      	ldr	r2, [pc, #124]	; (80094cc <MX_TIM8_Init+0xa0>)
 800944e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8009450:	4b1d      	ldr	r3, [pc, #116]	; (80094c8 <MX_TIM8_Init+0x9c>)
 8009452:	2200      	movs	r2, #0
 8009454:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009456:	4b1c      	ldr	r3, [pc, #112]	; (80094c8 <MX_TIM8_Init+0x9c>)
 8009458:	2200      	movs	r2, #0
 800945a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 0;
 800945c:	4b1a      	ldr	r3, [pc, #104]	; (80094c8 <MX_TIM8_Init+0x9c>)
 800945e:	2200      	movs	r2, #0
 8009460:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009462:	4b19      	ldr	r3, [pc, #100]	; (80094c8 <MX_TIM8_Init+0x9c>)
 8009464:	2200      	movs	r2, #0
 8009466:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8009468:	4b17      	ldr	r3, [pc, #92]	; (80094c8 <MX_TIM8_Init+0x9c>)
 800946a:	2200      	movs	r2, #0
 800946c:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800946e:	4b16      	ldr	r3, [pc, #88]	; (80094c8 <MX_TIM8_Init+0x9c>)
 8009470:	2200      	movs	r2, #0
 8009472:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8009474:	4814      	ldr	r0, [pc, #80]	; (80094c8 <MX_TIM8_Init+0x9c>)
 8009476:	f7fd fe5a 	bl	800712e <HAL_TIM_Base_Init>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <MX_TIM8_Init+0x58>
	{
		Error_Handler();
 8009480:	f000 fc20 	bl	8009cc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009488:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800948a:	f107 0310 	add.w	r3, r7, #16
 800948e:	4619      	mov	r1, r3
 8009490:	480d      	ldr	r0, [pc, #52]	; (80094c8 <MX_TIM8_Init+0x9c>)
 8009492:	f7fd febd 	bl	8007210 <HAL_TIM_ConfigClockSource>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <MX_TIM8_Init+0x74>
	{
		Error_Handler();
 800949c:	f000 fc12 	bl	8009cc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80094a0:	2300      	movs	r3, #0
 80094a2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80094a4:	2300      	movs	r3, #0
 80094a6:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80094ac:	1d3b      	adds	r3, r7, #4
 80094ae:	4619      	mov	r1, r3
 80094b0:	4805      	ldr	r0, [pc, #20]	; (80094c8 <MX_TIM8_Init+0x9c>)
 80094b2:	f7fe fac3 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <MX_TIM8_Init+0x94>
	{
		Error_Handler();
 80094bc:	f000 fc02 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80094c0:	bf00      	nop
 80094c2:	3720      	adds	r7, #32
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	200042bc 	.word	0x200042bc
 80094cc:	40010400 	.word	0x40010400

080094d0 <MX_TIM12_Init>:
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b088      	sub	sp, #32
 80094d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80094d6:	1d3b      	adds	r3, r7, #4
 80094d8:	2200      	movs	r2, #0
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	609a      	str	r2, [r3, #8]
 80094e0:	60da      	str	r2, [r3, #12]
 80094e2:	611a      	str	r2, [r3, #16]
 80094e4:	615a      	str	r2, [r3, #20]
 80094e6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80094e8:	4b19      	ldr	r3, [pc, #100]	; (8009550 <MX_TIM12_Init+0x80>)
 80094ea:	4a1a      	ldr	r2, [pc, #104]	; (8009554 <MX_TIM12_Init+0x84>)
 80094ec:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 0;
 80094ee:	4b18      	ldr	r3, [pc, #96]	; (8009550 <MX_TIM12_Init+0x80>)
 80094f0:	2200      	movs	r2, #0
 80094f2:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094f4:	4b16      	ldr	r3, [pc, #88]	; (8009550 <MX_TIM12_Init+0x80>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 0;
 80094fa:	4b15      	ldr	r3, [pc, #84]	; (8009550 <MX_TIM12_Init+0x80>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009500:	4b13      	ldr	r3, [pc, #76]	; (8009550 <MX_TIM12_Init+0x80>)
 8009502:	2200      	movs	r2, #0
 8009504:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009506:	4b12      	ldr	r3, [pc, #72]	; (8009550 <MX_TIM12_Init+0x80>)
 8009508:	2200      	movs	r2, #0
 800950a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800950c:	4810      	ldr	r0, [pc, #64]	; (8009550 <MX_TIM12_Init+0x80>)
 800950e:	f7fd fe54 	bl	80071ba <HAL_TIM_PWM_Init>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <MX_TIM12_Init+0x4c>
	{
		Error_Handler();
 8009518:	f000 fbd4 	bl	8009cc4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800951c:	2360      	movs	r3, #96	; 0x60
 800951e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8009520:	2300      	movs	r3, #0
 8009522:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009524:	2300      	movs	r3, #0
 8009526:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800952c:	1d3b      	adds	r3, r7, #4
 800952e:	2200      	movs	r2, #0
 8009530:	4619      	mov	r1, r3
 8009532:	4807      	ldr	r0, [pc, #28]	; (8009550 <MX_TIM12_Init+0x80>)
 8009534:	f7fe fad6 	bl	8007ae4 <HAL_TIM_PWM_ConfigChannel>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <MX_TIM12_Init+0x72>
	{
		Error_Handler();
 800953e:	f000 fbc1 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8009542:	4803      	ldr	r0, [pc, #12]	; (8009550 <MX_TIM12_Init+0x80>)
 8009544:	f000 fe50 	bl	800a1e8 <HAL_TIM_MspPostInit>

}
 8009548:	bf00      	nop
 800954a:	3720      	adds	r7, #32
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20004648 	.word	0x20004648
 8009554:	40001800 	.word	0x40001800

08009558 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800955c:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 800955e:	4a15      	ldr	r2, [pc, #84]	; (80095b4 <MX_USART1_UART_Init+0x5c>)
 8009560:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 8009564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009568:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800956a:	4b11      	ldr	r3, [pc, #68]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 800956c:	2200      	movs	r2, #0
 800956e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8009570:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 8009572:	2200      	movs	r2, #0
 8009574:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8009576:	4b0e      	ldr	r3, [pc, #56]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 8009578:	2200      	movs	r2, #0
 800957a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800957c:	4b0c      	ldr	r3, [pc, #48]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 800957e:	220c      	movs	r2, #12
 8009580:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009582:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 8009584:	2200      	movs	r2, #0
 8009586:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009588:	4b09      	ldr	r3, [pc, #36]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 800958a:	2200      	movs	r2, #0
 800958c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800958e:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 8009590:	2200      	movs	r2, #0
 8009592:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009594:	4b06      	ldr	r3, [pc, #24]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 8009596:	2200      	movs	r2, #0
 8009598:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800959a:	4805      	ldr	r0, [pc, #20]	; (80095b0 <MX_USART1_UART_Init+0x58>)
 800959c:	f7fe fc6c 	bl	8007e78 <HAL_UART_Init>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d001      	beq.n	80095aa <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80095a6:	f000 fb8d 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80095aa:	bf00      	nop
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	200044a8 	.word	0x200044a8
 80095b4:	40011000 	.word	0x40011000

080095b8 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80095bc:	4b14      	ldr	r3, [pc, #80]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095be:	4a15      	ldr	r2, [pc, #84]	; (8009614 <MX_USART6_UART_Init+0x5c>)
 80095c0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80095c2:	4b13      	ldr	r3, [pc, #76]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80095c8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80095ca:	4b11      	ldr	r3, [pc, #68]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80095d6:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095d8:	2200      	movs	r2, #0
 80095da:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80095dc:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095de:	220c      	movs	r2, #12
 80095e0:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80095e2:	4b0b      	ldr	r3, [pc, #44]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80095e8:	4b09      	ldr	r3, [pc, #36]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095ea:	2200      	movs	r2, #0
 80095ec:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80095ee:	4b08      	ldr	r3, [pc, #32]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	621a      	str	r2, [r3, #32]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80095f4:	4b06      	ldr	r3, [pc, #24]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80095fa:	4805      	ldr	r0, [pc, #20]	; (8009610 <MX_USART6_UART_Init+0x58>)
 80095fc:	f7fe fc3c 	bl	8007e78 <HAL_UART_Init>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <MX_USART6_UART_Init+0x52>
	{
		Error_Handler();
 8009606:	f000 fb5d 	bl	8009cc4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800960a:	bf00      	nop
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	20004558 	.word	0x20004558
 8009614:	40011400 	.word	0x40011400

08009618 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
	FMC_SDRAM_TimingTypeDef SdramTiming;

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 800961e:	4b20      	ldr	r3, [pc, #128]	; (80096a0 <MX_FMC_Init+0x88>)
 8009620:	4a20      	ldr	r2, [pc, #128]	; (80096a4 <MX_FMC_Init+0x8c>)
 8009622:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8009624:	4b1e      	ldr	r3, [pc, #120]	; (80096a0 <MX_FMC_Init+0x88>)
 8009626:	2200      	movs	r2, #0
 8009628:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800962a:	4b1d      	ldr	r3, [pc, #116]	; (80096a0 <MX_FMC_Init+0x88>)
 800962c:	2200      	movs	r2, #0
 800962e:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8009630:	4b1b      	ldr	r3, [pc, #108]	; (80096a0 <MX_FMC_Init+0x88>)
 8009632:	2204      	movs	r2, #4
 8009634:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8009636:	4b1a      	ldr	r3, [pc, #104]	; (80096a0 <MX_FMC_Init+0x88>)
 8009638:	2210      	movs	r2, #16
 800963a:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800963c:	4b18      	ldr	r3, [pc, #96]	; (80096a0 <MX_FMC_Init+0x88>)
 800963e:	2240      	movs	r2, #64	; 0x40
 8009640:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8009642:	4b17      	ldr	r3, [pc, #92]	; (80096a0 <MX_FMC_Init+0x88>)
 8009644:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8009648:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800964a:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <MX_FMC_Init+0x88>)
 800964c:	2200      	movs	r2, #0
 800964e:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8009650:	4b13      	ldr	r3, [pc, #76]	; (80096a0 <MX_FMC_Init+0x88>)
 8009652:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009656:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8009658:	4b11      	ldr	r3, [pc, #68]	; (80096a0 <MX_FMC_Init+0x88>)
 800965a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800965e:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009660:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <MX_FMC_Init+0x88>)
 8009662:	2200      	movs	r2, #0
 8009664:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8009666:	2302      	movs	r3, #2
 8009668:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 800966a:	2307      	movs	r3, #7
 800966c:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 800966e:	2304      	movs	r3, #4
 8009670:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8009672:	2307      	movs	r3, #7
 8009674:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8009676:	2303      	movs	r3, #3
 8009678:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 800967a:	2302      	movs	r3, #2
 800967c:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 800967e:	2302      	movs	r3, #2
 8009680:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009682:	1d3b      	adds	r3, r7, #4
 8009684:	4619      	mov	r1, r3
 8009686:	4806      	ldr	r0, [pc, #24]	; (80096a0 <MX_FMC_Init+0x88>)
 8009688:	f7fd fcd2 	bl	8007030 <HAL_SDRAM_Init>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <MX_FMC_Init+0x7e>
	{
		Error_Handler( );
 8009692:	f000 fb17 	bl	8009cc4 <Error_Handler>
	}

}
 8009696:	bf00      	nop
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	20004688 	.word	0x20004688
 80096a4:	a0000140 	.word	0xa0000140

080096a8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b090      	sub	sp, #64	; 0x40
 80096ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80096b2:	2200      	movs	r2, #0
 80096b4:	601a      	str	r2, [r3, #0]
 80096b6:	605a      	str	r2, [r3, #4]
 80096b8:	609a      	str	r2, [r3, #8]
 80096ba:	60da      	str	r2, [r3, #12]
 80096bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80096be:	4bae      	ldr	r3, [pc, #696]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c2:	4aad      	ldr	r2, [pc, #692]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096c4:	f043 0310 	orr.w	r3, r3, #16
 80096c8:	6313      	str	r3, [r2, #48]	; 0x30
 80096ca:	4bab      	ldr	r3, [pc, #684]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ce:	f003 0310 	and.w	r3, r3, #16
 80096d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80096d6:	4ba8      	ldr	r3, [pc, #672]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096da:	4aa7      	ldr	r2, [pc, #668]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096e0:	6313      	str	r3, [r2, #48]	; 0x30
 80096e2:	4ba5      	ldr	r3, [pc, #660]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ea:	627b      	str	r3, [r7, #36]	; 0x24
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80096ee:	4ba2      	ldr	r3, [pc, #648]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f2:	4aa1      	ldr	r2, [pc, #644]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096f4:	f043 0302 	orr.w	r3, r3, #2
 80096f8:	6313      	str	r3, [r2, #48]	; 0x30
 80096fa:	4b9f      	ldr	r3, [pc, #636]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80096fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	623b      	str	r3, [r7, #32]
 8009704:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8009706:	4b9c      	ldr	r3, [pc, #624]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	4a9b      	ldr	r2, [pc, #620]	; (8009978 <MX_GPIO_Init+0x2d0>)
 800970c:	f043 0308 	orr.w	r3, r3, #8
 8009710:	6313      	str	r3, [r2, #48]	; 0x30
 8009712:	4b99      	ldr	r3, [pc, #612]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009716:	f003 0308 	and.w	r3, r3, #8
 800971a:	61fb      	str	r3, [r7, #28]
 800971c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800971e:	4b96      	ldr	r3, [pc, #600]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009722:	4a95      	ldr	r2, [pc, #596]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009724:	f043 0304 	orr.w	r3, r3, #4
 8009728:	6313      	str	r3, [r2, #48]	; 0x30
 800972a:	4b93      	ldr	r3, [pc, #588]	; (8009978 <MX_GPIO_Init+0x2d0>)
 800972c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	61bb      	str	r3, [r7, #24]
 8009734:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009736:	4b90      	ldr	r3, [pc, #576]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800973a:	4a8f      	ldr	r2, [pc, #572]	; (8009978 <MX_GPIO_Init+0x2d0>)
 800973c:	f043 0301 	orr.w	r3, r3, #1
 8009740:	6313      	str	r3, [r2, #48]	; 0x30
 8009742:	4b8d      	ldr	r3, [pc, #564]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	617b      	str	r3, [r7, #20]
 800974c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800974e:	4b8a      	ldr	r3, [pc, #552]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009752:	4a89      	ldr	r2, [pc, #548]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009754:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009758:	6313      	str	r3, [r2, #48]	; 0x30
 800975a:	4b87      	ldr	r3, [pc, #540]	; (8009978 <MX_GPIO_Init+0x2d0>)
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009762:	613b      	str	r3, [r7, #16]
 8009764:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8009766:	4b84      	ldr	r3, [pc, #528]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800976a:	4a83      	ldr	r2, [pc, #524]	; (8009978 <MX_GPIO_Init+0x2d0>)
 800976c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009770:	6313      	str	r3, [r2, #48]	; 0x30
 8009772:	4b81      	ldr	r3, [pc, #516]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800977e:	4b7e      	ldr	r3, [pc, #504]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009782:	4a7d      	ldr	r2, [pc, #500]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009784:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009788:	6313      	str	r3, [r2, #48]	; 0x30
 800978a:	4b7b      	ldr	r3, [pc, #492]	; (8009978 <MX_GPIO_Init+0x2d0>)
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009792:	60bb      	str	r3, [r7, #8]
 8009794:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8009796:	4b78      	ldr	r3, [pc, #480]	; (8009978 <MX_GPIO_Init+0x2d0>)
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	4a77      	ldr	r2, [pc, #476]	; (8009978 <MX_GPIO_Init+0x2d0>)
 800979c:	f043 0320 	orr.w	r3, r3, #32
 80097a0:	6313      	str	r3, [r2, #48]	; 0x30
 80097a2:	4b75      	ldr	r3, [pc, #468]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80097a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a6:	f003 0320 	and.w	r3, r3, #32
 80097aa:	607b      	str	r3, [r7, #4]
 80097ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80097ae:	4b72      	ldr	r3, [pc, #456]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80097b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b2:	4a71      	ldr	r2, [pc, #452]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80097b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097b8:	6313      	str	r3, [r2, #48]	; 0x30
 80097ba:	4b6f      	ldr	r3, [pc, #444]	; (8009978 <MX_GPIO_Init+0x2d0>)
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80097c6:	2201      	movs	r2, #1
 80097c8:	2120      	movs	r1, #32
 80097ca:	486c      	ldr	r0, [pc, #432]	; (800997c <MX_GPIO_Init+0x2d4>)
 80097cc:	f7fa fd42 	bl	8004254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 80097d0:	2200      	movs	r2, #0
 80097d2:	210e      	movs	r1, #14
 80097d4:	486a      	ldr	r0, [pc, #424]	; (8009980 <MX_GPIO_Init+0x2d8>)
 80097d6:	f7fa fd3d 	bl	8004254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80097da:	2201      	movs	r2, #1
 80097dc:	2108      	movs	r1, #8
 80097de:	4869      	ldr	r0, [pc, #420]	; (8009984 <MX_GPIO_Init+0x2dc>)
 80097e0:	f7fa fd38 	bl	8004254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80097e4:	2201      	movs	r2, #1
 80097e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097ea:	4865      	ldr	r0, [pc, #404]	; (8009980 <MX_GPIO_Init+0x2d8>)
 80097ec:	f7fa fd32 	bl	8004254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80097f0:	2200      	movs	r2, #0
 80097f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097f6:	4864      	ldr	r0, [pc, #400]	; (8009988 <MX_GPIO_Init+0x2e0>)
 80097f8:	f7fa fd2c 	bl	8004254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80097fc:	2200      	movs	r2, #0
 80097fe:	21c8      	movs	r1, #200	; 0xc8
 8009800:	4862      	ldr	r0, [pc, #392]	; (800998c <MX_GPIO_Init+0x2e4>)
 8009802:	f7fa fd27 	bl	8004254 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8009806:	2308      	movs	r3, #8
 8009808:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800980a:	2300      	movs	r3, #0
 800980c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800980e:	2300      	movs	r3, #0
 8009810:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009816:	4619      	mov	r1, r3
 8009818:	485d      	ldr	r0, [pc, #372]	; (8009990 <MX_GPIO_Init+0x2e8>)
 800981a:	f7fa fa63 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800981e:	2304      	movs	r3, #4
 8009820:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009822:	2302      	movs	r3, #2
 8009824:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009826:	2300      	movs	r3, #0
 8009828:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800982a:	2303      	movs	r3, #3
 800982c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800982e:	2309      	movs	r3, #9
 8009830:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8009832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009836:	4619      	mov	r1, r3
 8009838:	4855      	ldr	r0, [pc, #340]	; (8009990 <MX_GPIO_Init+0x2e8>)
 800983a:	f7fa fa53 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800983e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8009842:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009844:	2302      	movs	r3, #2
 8009846:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009848:	2300      	movs	r3, #0
 800984a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800984c:	2303      	movs	r3, #3
 800984e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009850:	230b      	movs	r3, #11
 8009852:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009858:	4619      	mov	r1, r3
 800985a:	484c      	ldr	r0, [pc, #304]	; (800998c <MX_GPIO_Init+0x2e4>)
 800985c:	f7fa fa42 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8009860:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009864:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009866:	2312      	movs	r3, #18
 8009868:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800986a:	2301      	movs	r3, #1
 800986c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800986e:	2300      	movs	r3, #0
 8009870:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8009872:	2304      	movs	r3, #4
 8009874:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009876:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800987a:	4619      	mov	r1, r3
 800987c:	4845      	ldr	r0, [pc, #276]	; (8009994 <MX_GPIO_Init+0x2ec>)
 800987e:	f7fa fa31 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8009882:	f643 4323 	movw	r3, #15395	; 0x3c23
 8009886:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009888:	2302      	movs	r3, #2
 800988a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800988c:	2300      	movs	r3, #0
 800988e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009890:	2303      	movs	r3, #3
 8009892:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009894:	230a      	movs	r3, #10
 8009896:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800989c:	4619      	mov	r1, r3
 800989e:	483d      	ldr	r0, [pc, #244]	; (8009994 <MX_GPIO_Init+0x2ec>)
 80098a0:	f7fa fa20 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80098a4:	2380      	movs	r3, #128	; 0x80
 80098a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098a8:	2302      	movs	r3, #2
 80098aa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ac:	2300      	movs	r3, #0
 80098ae:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098b0:	2300      	movs	r3, #0
 80098b2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80098b4:	2308      	movs	r3, #8
 80098b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80098b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098bc:	4619      	mov	r1, r3
 80098be:	482f      	ldr	r0, [pc, #188]	; (800997c <MX_GPIO_Init+0x2d4>)
 80098c0:	f7fa fa10 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
	GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80098c4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80098c8:	62fb      	str	r3, [r7, #44]	; 0x2c
			|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ca:	2302      	movs	r3, #2
 80098cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ce:	2300      	movs	r3, #0
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098d2:	2303      	movs	r3, #3
 80098d4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80098d6:	230c      	movs	r3, #12
 80098d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098de:	4619      	mov	r1, r3
 80098e0:	482d      	ldr	r0, [pc, #180]	; (8009998 <MX_GPIO_Init+0x2f0>)
 80098e2:	f7fa f9ff 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80098e6:	2360      	movs	r3, #96	; 0x60
 80098e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ea:	2302      	movs	r3, #2
 80098ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ee:	2300      	movs	r3, #0
 80098f0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098f2:	2300      	movs	r3, #0
 80098f4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80098f6:	230d      	movs	r3, #13
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80098fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098fe:	4619      	mov	r1, r3
 8009900:	4823      	ldr	r0, [pc, #140]	; (8009990 <MX_GPIO_Init+0x2e8>)
 8009902:	f7fa f9ef 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8009906:	2340      	movs	r3, #64	; 0x40
 8009908:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800990a:	2302      	movs	r3, #2
 800990c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800990e:	2300      	movs	r3, #0
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009912:	2303      	movs	r3, #3
 8009914:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8009916:	230a      	movs	r3, #10
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800991a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800991e:	4619      	mov	r1, r3
 8009920:	481c      	ldr	r0, [pc, #112]	; (8009994 <MX_GPIO_Init+0x2ec>)
 8009922:	f7fa f9df 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8009926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800992a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800992c:	2300      	movs	r3, #0
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009930:	2300      	movs	r3, #0
 8009932:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009938:	4619      	mov	r1, r3
 800993a:	4818      	ldr	r0, [pc, #96]	; (800999c <MX_GPIO_Init+0x2f4>)
 800993c:	f7fa f9d2 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8009940:	2340      	movs	r3, #64	; 0x40
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009944:	4b16      	ldr	r3, [pc, #88]	; (80099a0 <MX_GPIO_Init+0x2f8>)
 8009946:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009948:	2300      	movs	r3, #0
 800994a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800994c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009950:	4619      	mov	r1, r3
 8009952:	480a      	ldr	r0, [pc, #40]	; (800997c <MX_GPIO_Init+0x2d4>)
 8009954:	f7fa f9c6 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8009958:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800995c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800995e:	2302      	movs	r3, #2
 8009960:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009962:	2300      	movs	r3, #0
 8009964:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009966:	2303      	movs	r3, #3
 8009968:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800996a:	230a      	movs	r3, #10
 800996c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800996e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009972:	4619      	mov	r1, r3
 8009974:	e016      	b.n	80099a4 <MX_GPIO_Init+0x2fc>
 8009976:	bf00      	nop
 8009978:	40023800 	.word	0x40023800
 800997c:	40020c00 	.word	0x40020c00
 8009980:	40022000 	.word	0x40022000
 8009984:	40022800 	.word	0x40022800
 8009988:	40021c00 	.word	0x40021c00
 800998c:	40021800 	.word	0x40021800
 8009990:	40021000 	.word	0x40021000
 8009994:	40020400 	.word	0x40020400
 8009998:	40020800 	.word	0x40020800
 800999c:	40022400 	.word	0x40022400
 80099a0:	10120000 	.word	0x10120000
 80099a4:	48bb      	ldr	r0, [pc, #748]	; (8009c94 <MX_GPIO_Init+0x5ec>)
 80099a6:	f7fa f99d 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80099aa:	2320      	movs	r3, #32
 80099ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099ae:	2301      	movs	r3, #1
 80099b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b2:	2300      	movs	r3, #0
 80099b4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099b6:	2300      	movs	r3, #0
 80099b8:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80099ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099be:	4619      	mov	r1, r3
 80099c0:	48b5      	ldr	r0, [pc, #724]	; (8009c98 <MX_GPIO_Init+0x5f0>)
 80099c2:	f7fa f98f 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80099c6:	2308      	movs	r3, #8
 80099c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099ca:	2302      	movs	r3, #2
 80099cc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099d2:	2300      	movs	r3, #0
 80099d4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80099d6:	230d      	movs	r3, #13
 80099d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80099da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099de:	4619      	mov	r1, r3
 80099e0:	48ad      	ldr	r0, [pc, #692]	; (8009c98 <MX_GPIO_Init+0x5f0>)
 80099e2:	f7fa f97f 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 80099e6:	f241 030e 	movw	r3, #4110	; 0x100e
 80099ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099ec:	2301      	movs	r3, #1
 80099ee:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099f0:	2300      	movs	r3, #0
 80099f2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80099f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099fc:	4619      	mov	r1, r3
 80099fe:	48a7      	ldr	r0, [pc, #668]	; (8009c9c <MX_GPIO_Init+0x5f4>)
 8009a00:	f7fa f970 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8009a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8009a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a16:	4619      	mov	r1, r3
 8009a18:	48a1      	ldr	r0, [pc, #644]	; (8009ca0 <MX_GPIO_Init+0x5f8>)
 8009a1a:	f7fa f963 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8009a1e:	2308      	movs	r3, #8
 8009a20:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a22:	2301      	movs	r3, #1
 8009a24:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a26:	2300      	movs	r3, #0
 8009a28:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8009a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a32:	4619      	mov	r1, r3
 8009a34:	489b      	ldr	r0, [pc, #620]	; (8009ca4 <MX_GPIO_Init+0x5fc>)
 8009a36:	f7fa f955 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8009a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a40:	2302      	movs	r3, #2
 8009a42:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a44:	2300      	movs	r3, #0
 8009a46:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009a4c:	230d      	movs	r3, #13
 8009a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8009a50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a54:	4619      	mov	r1, r3
 8009a56:	4894      	ldr	r0, [pc, #592]	; (8009ca8 <MX_GPIO_Init+0x600>)
 8009a58:	f7fa f944 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8009a5c:	2310      	movs	r3, #16
 8009a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a60:	2300      	movs	r3, #0
 8009a62:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a64:	2300      	movs	r3, #0
 8009a66:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8009a68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	488a      	ldr	r0, [pc, #552]	; (8009c98 <MX_GPIO_Init+0x5f0>)
 8009a70:	f7fa f938 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SDMMC_CMD_Pin */
	GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8009a74:	2304      	movs	r3, #4
 8009a76:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a78:	2302      	movs	r3, #2
 8009a7a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a80:	2303      	movs	r3, #3
 8009a82:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009a84:	230c      	movs	r3, #12
 8009a86:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8009a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4882      	ldr	r0, [pc, #520]	; (8009c98 <MX_GPIO_Init+0x5f0>)
 8009a90:	f7fa f928 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8009a94:	f248 0304 	movw	r3, #32772	; 0x8004
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	4880      	ldr	r0, [pc, #512]	; (8009cac <MX_GPIO_Init+0x604>)
 8009aaa:	f7fa f91b 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8009aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009abc:	2300      	movs	r3, #0
 8009abe:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8009ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4879      	ldr	r0, [pc, #484]	; (8009cac <MX_GPIO_Init+0x604>)
 8009ac8:	f7fa f90c 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8009acc:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8009ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
			|DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ada:	2300      	movs	r3, #0
 8009adc:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009ade:	230d      	movs	r3, #13
 8009ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009ae2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	4870      	ldr	r0, [pc, #448]	; (8009cac <MX_GPIO_Init+0x604>)
 8009aea:	f7fa f8fb 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8009aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8009af4:	4b6e      	ldr	r3, [pc, #440]	; (8009cb0 <MX_GPIO_Init+0x608>)
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af8:	2300      	movs	r3, #0
 8009afa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8009afc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b00:	4619      	mov	r1, r3
 8009b02:	4866      	ldr	r0, [pc, #408]	; (8009c9c <MX_GPIO_Init+0x5f4>)
 8009b04:	f7fa f8ee 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8009b08:	2310      	movs	r3, #16
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b14:	2303      	movs	r3, #3
 8009b16:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009b18:	230a      	movs	r3, #10
 8009b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8009b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b20:	4619      	mov	r1, r3
 8009b22:	4862      	ldr	r0, [pc, #392]	; (8009cac <MX_GPIO_Init+0x604>)
 8009b24:	f7fa f8de 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8009b28:	23c8      	movs	r3, #200	; 0xc8
 8009b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b30:	2300      	movs	r3, #0
 8009b32:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b34:	2300      	movs	r3, #0
 8009b36:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009b38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	485a      	ldr	r0, [pc, #360]	; (8009ca8 <MX_GPIO_Init+0x600>)
 8009b40:	f7fa f8d0 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
                           ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8009b44:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8009b48:	62fb      	str	r3, [r7, #44]	; 0x2c
			|ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b56:	4619      	mov	r1, r3
 8009b58:	4856      	ldr	r0, [pc, #344]	; (8009cb4 <MX_GPIO_Init+0x60c>)
 8009b5a:	f7fa f8c3 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8009b5e:	2305      	movs	r3, #5
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b62:	2302      	movs	r3, #2
 8009b64:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009b6e:	230a      	movs	r3, #10
 8009b70:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b76:	4619      	mov	r1, r3
 8009b78:	4849      	ldr	r0, [pc, #292]	; (8009ca0 <MX_GPIO_Init+0x5f8>)
 8009b7a:	f7fa f8b3 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8009b7e:	2332      	movs	r3, #50	; 0x32
 8009b80:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b82:	2302      	movs	r3, #2
 8009b84:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b8e:	230b      	movs	r3, #11
 8009b90:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b96:	4619      	mov	r1, r3
 8009b98:	4841      	ldr	r0, [pc, #260]	; (8009ca0 <MX_GPIO_Init+0x5f8>)
 8009b9a:	f7fa f8a3 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009b9e:	2304      	movs	r3, #4
 8009ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009baa:	2303      	movs	r3, #3
 8009bac:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009bae:	2309      	movs	r3, #9
 8009bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	483f      	ldr	r0, [pc, #252]	; (8009cb8 <MX_GPIO_Init+0x610>)
 8009bba:	f7fa f893 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8009bbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8009bd0:	2309      	movs	r3, #9
 8009bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bd8:	4619      	mov	r1, r3
 8009bda:	482f      	ldr	r0, [pc, #188]	; (8009c98 <MX_GPIO_Init+0x5f0>)
 8009bdc:	f7fa f882 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8009be0:	2304      	movs	r3, #4
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009be4:	2300      	movs	r3, #0
 8009be6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8009bec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	482d      	ldr	r0, [pc, #180]	; (8009ca8 <MX_GPIO_Init+0x600>)
 8009bf4:	f7fa f876 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8009bf8:	2386      	movs	r3, #134	; 0x86
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c04:	2303      	movs	r3, #3
 8009c06:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009c08:	230b      	movs	r3, #11
 8009c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c10:	4619      	mov	r1, r3
 8009c12:	4820      	ldr	r0, [pc, #128]	; (8009c94 <MX_GPIO_Init+0x5ec>)
 8009c14:	f7fa f866 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8009c24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c28:	4619      	mov	r1, r3
 8009c2a:	481a      	ldr	r0, [pc, #104]	; (8009c94 <MX_GPIO_Init+0x5ec>)
 8009c2c:	f7fa f85a 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8009c30:	2350      	movs	r3, #80	; 0x50
 8009c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c34:	2302      	movs	r3, #2
 8009c36:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8009c40:	230d      	movs	r3, #13
 8009c42:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c48:	4619      	mov	r1, r3
 8009c4a:	4812      	ldr	r0, [pc, #72]	; (8009c94 <MX_GPIO_Init+0x5ec>)
 8009c4c:	f7fa f84a 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8009c50:	2328      	movs	r3, #40	; 0x28
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c54:	2302      	movs	r3, #2
 8009c56:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8009c60:	230a      	movs	r3, #10
 8009c62:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c68:	4619      	mov	r1, r3
 8009c6a:	480a      	ldr	r0, [pc, #40]	; (8009c94 <MX_GPIO_Init+0x5ec>)
 8009c6c:	f7fa f83a 	bl	8003ce4 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8009c70:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8009c74:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c76:	2302      	movs	r3, #2
 8009c78:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009c82:	2305      	movs	r3, #5
 8009c84:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	480a      	ldr	r0, [pc, #40]	; (8009cb8 <MX_GPIO_Init+0x610>)
 8009c8e:	f7fa f829 	bl	8003ce4 <HAL_GPIO_Init>
 8009c92:	e013      	b.n	8009cbc <MX_GPIO_Init+0x614>
 8009c94:	40020000 	.word	0x40020000
 8009c98:	40020c00 	.word	0x40020c00
 8009c9c:	40022000 	.word	0x40022000
 8009ca0:	40020800 	.word	0x40020800
 8009ca4:	40022800 	.word	0x40022800
 8009ca8:	40021800 	.word	0x40021800
 8009cac:	40021c00 	.word	0x40021c00
 8009cb0:	10120000 	.word	0x10120000
 8009cb4:	40021400 	.word	0x40021400
 8009cb8:	40020400 	.word	0x40020400

}
 8009cbc:	bf00      	nop
 8009cbe:	3740      	adds	r7, #64	; 0x40
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while(1);
 8009cc8:	e7fe      	b.n	8009cc8 <Error_Handler+0x4>
	...

08009ccc <wm8994Init>:
#include "stm32746g_discovery_audio.h"

extern AUDIO_DrvTypeDef  *audio_drv;

uint8_t wm8994Init(void){
 8009ccc:	b590      	push	{r4, r7, lr}
 8009cce:	b083      	sub	sp, #12
 8009cd0:	af00      	add	r7, sp, #0
	uint32_t deviceid = 0x00;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	607b      	str	r3, [r7, #4]

	deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8009cd6:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <wm8994Init+0x50>)
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2034      	movs	r0, #52	; 0x34
 8009cdc:	4798      	blx	r3
 8009cde:	6078      	str	r0, [r7, #4]
	if((deviceid) == WM8994_ID){
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f648 1294 	movw	r2, #35220	; 0x8994
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d112      	bne.n	8009d10 <wm8994Init+0x44>
		wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <wm8994Init+0x50>)
 8009cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cee:	2034      	movs	r0, #52	; 0x34
 8009cf0:	4798      	blx	r3
	 	audio_drv = &wm8994_drv;
 8009cf2:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <wm8994Init+0x54>)
 8009cf4:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <wm8994Init+0x50>)
 8009cf6:	601a      	str	r2, [r3, #0]
	 	//audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
	 	  audio_drv->Init(AUDIO_I2C_ADDRESS, INPUT_DEVICE_DIGITAL_MICROPHONE_2 | OUTPUT_DEVICE_HEADPHONE, DEFAULT_VOLUME_MIDDLE, AUDIO_FREQUENCY_16K);
 8009cf8:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <wm8994Init+0x54>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681c      	ldr	r4, [r3, #0]
 8009cfe:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8009d02:	2264      	movs	r2, #100	; 0x64
 8009d04:	f240 2102 	movw	r1, #514	; 0x202
 8009d08:	2034      	movs	r0, #52	; 0x34
 8009d0a:	47a0      	blx	r4
	 	return AUDIO_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	e000      	b.n	8009d12 <wm8994Init+0x46>
	 }
	 else{
	 	return AUDIO_ERROR;
 8009d10:	2301      	movs	r3, #1
	 }
}
 8009d12:	4618      	mov	r0, r3
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd90      	pop	{r4, r7, pc}
 8009d1a:	bf00      	nop
 8009d1c:	20000000 	.word	0x20000000
 8009d20:	20004108 	.word	0x20004108

08009d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8009d2a:	4b0f      	ldr	r3, [pc, #60]	; (8009d68 <HAL_MspInit+0x44>)
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	4a0e      	ldr	r2, [pc, #56]	; (8009d68 <HAL_MspInit+0x44>)
 8009d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d34:	6413      	str	r3, [r2, #64]	; 0x40
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <HAL_MspInit+0x44>)
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d3e:	607b      	str	r3, [r7, #4]
 8009d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d42:	4b09      	ldr	r3, [pc, #36]	; (8009d68 <HAL_MspInit+0x44>)
 8009d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d46:	4a08      	ldr	r2, [pc, #32]	; (8009d68 <HAL_MspInit+0x44>)
 8009d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8009d4e:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <HAL_MspInit+0x44>)
 8009d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d56:	603b      	str	r3, [r7, #0]
 8009d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009d5a:	bf00      	nop
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	40023800 	.word	0x40023800

08009d6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]

  if(hdma2d->Instance==DMA2D)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a0d      	ldr	r2, [pc, #52]	; (8009db0 <HAL_DMA2D_MspInit+0x44>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d113      	bne.n	8009da6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8009d7e:	4b0d      	ldr	r3, [pc, #52]	; (8009db4 <HAL_DMA2D_MspInit+0x48>)
 8009d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d82:	4a0c      	ldr	r2, [pc, #48]	; (8009db4 <HAL_DMA2D_MspInit+0x48>)
 8009d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d88:	6313      	str	r3, [r2, #48]	; 0x30
 8009d8a:	4b0a      	ldr	r3, [pc, #40]	; (8009db4 <HAL_DMA2D_MspInit+0x48>)
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d92:	60fb      	str	r3, [r7, #12]
 8009d94:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8009d96:	2200      	movs	r2, #0
 8009d98:	2105      	movs	r1, #5
 8009d9a:	205a      	movs	r0, #90	; 0x5a
 8009d9c:	f7f9 fa03 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8009da0:	205a      	movs	r0, #90	; 0x5a
 8009da2:	f7f9 fa1c 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	4002b000 	.word	0x4002b000
 8009db4:	40023800 	.word	0x40023800

08009db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b08a      	sub	sp, #40	; 0x28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dc0:	f107 0314 	add.w	r3, r7, #20
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	605a      	str	r2, [r3, #4]
 8009dca:	609a      	str	r2, [r3, #8]
 8009dcc:	60da      	str	r2, [r3, #12]
 8009dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a17      	ldr	r2, [pc, #92]	; (8009e34 <HAL_I2C_MspInit+0x7c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d128      	bne.n	8009e2c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8009dda:	4b17      	ldr	r3, [pc, #92]	; (8009e38 <HAL_I2C_MspInit+0x80>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dde:	4a16      	ldr	r2, [pc, #88]	; (8009e38 <HAL_I2C_MspInit+0x80>)
 8009de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de4:	6313      	str	r3, [r2, #48]	; 0x30
 8009de6:	4b14      	ldr	r3, [pc, #80]	; (8009e38 <HAL_I2C_MspInit+0x80>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8009df2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8009df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009df8:	2312      	movs	r3, #18
 8009dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e00:	2303      	movs	r3, #3
 8009e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009e04:	2304      	movs	r3, #4
 8009e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009e08:	f107 0314 	add.w	r3, r7, #20
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	480b      	ldr	r0, [pc, #44]	; (8009e3c <HAL_I2C_MspInit+0x84>)
 8009e10:	f7f9 ff68 	bl	8003ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009e14:	4b08      	ldr	r3, [pc, #32]	; (8009e38 <HAL_I2C_MspInit+0x80>)
 8009e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e18:	4a07      	ldr	r2, [pc, #28]	; (8009e38 <HAL_I2C_MspInit+0x80>)
 8009e1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <HAL_I2C_MspInit+0x80>)
 8009e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8009e2c:	bf00      	nop
 8009e2e:	3728      	adds	r7, #40	; 0x28
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40005c00 	.word	0x40005c00
 8009e38:	40023800 	.word	0x40023800
 8009e3c:	40021c00 	.word	0x40021c00

08009e40 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]

  if(hi2c->Instance==I2C3)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a08      	ldr	r2, [pc, #32]	; (8009e70 <HAL_I2C_MspDeInit+0x30>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d10a      	bne.n	8009e68 <HAL_I2C_MspDeInit+0x28>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8009e52:	4b08      	ldr	r3, [pc, #32]	; (8009e74 <HAL_I2C_MspDeInit+0x34>)
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	4a07      	ldr	r2, [pc, #28]	; (8009e74 <HAL_I2C_MspDeInit+0x34>)
 8009e58:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009e5c:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C3 GPIO Configuration    
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA 
    */
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8009e5e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8009e62:	4805      	ldr	r0, [pc, #20]	; (8009e78 <HAL_I2C_MspDeInit+0x38>)
 8009e64:	f7fa f8ea 	bl	800403c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8009e68:	bf00      	nop
 8009e6a:	3708      	adds	r7, #8
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	40005c00 	.word	0x40005c00
 8009e74:	40023800 	.word	0x40023800
 8009e78:	40021c00 	.word	0x40021c00

08009e7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b08e      	sub	sp, #56	; 0x38
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e88:	2200      	movs	r2, #0
 8009e8a:	601a      	str	r2, [r3, #0]
 8009e8c:	605a      	str	r2, [r3, #4]
 8009e8e:	609a      	str	r2, [r3, #8]
 8009e90:	60da      	str	r2, [r3, #12]
 8009e92:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a55      	ldr	r2, [pc, #340]	; (8009ff0 <HAL_LTDC_MspInit+0x174>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	f040 80a3 	bne.w	8009fe6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8009ea0:	4b54      	ldr	r3, [pc, #336]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ea4:	4a53      	ldr	r2, [pc, #332]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009eaa:	6453      	str	r3, [r2, #68]	; 0x44
 8009eac:	4b51      	ldr	r3, [pc, #324]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009eb4:	623b      	str	r3, [r7, #32]
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009eb8:	4b4e      	ldr	r3, [pc, #312]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ebc:	4a4d      	ldr	r2, [pc, #308]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ebe:	f043 0310 	orr.w	r3, r3, #16
 8009ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ec4:	4b4b      	ldr	r3, [pc, #300]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	61fb      	str	r3, [r7, #28]
 8009ece:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8009ed0:	4b48      	ldr	r3, [pc, #288]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	4a47      	ldr	r2, [pc, #284]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009eda:	6313      	str	r3, [r2, #48]	; 0x30
 8009edc:	4b45      	ldr	r3, [pc, #276]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ee4:	61bb      	str	r3, [r7, #24]
 8009ee6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8009ee8:	4b42      	ldr	r3, [pc, #264]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eec:	4a41      	ldr	r2, [pc, #260]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ef4:	4b3f      	ldr	r3, [pc, #252]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009efc:	617b      	str	r3, [r7, #20]
 8009efe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8009f00:	4b3c      	ldr	r3, [pc, #240]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f04:	4a3b      	ldr	r2, [pc, #236]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f0a:	6313      	str	r3, [r2, #48]	; 0x30
 8009f0c:	4b39      	ldr	r3, [pc, #228]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f14:	613b      	str	r3, [r7, #16]
 8009f16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009f18:	4b36      	ldr	r3, [pc, #216]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1c:	4a35      	ldr	r2, [pc, #212]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f22:	6313      	str	r3, [r2, #48]	; 0x30
 8009f24:	4b33      	ldr	r3, [pc, #204]	; (8009ff4 <HAL_LTDC_MspInit+0x178>)
 8009f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8009f30:	2310      	movs	r3, #16
 8009f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f34:	2302      	movs	r3, #2
 8009f36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009f40:	230e      	movs	r3, #14
 8009f42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8009f44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f48:	4619      	mov	r1, r3
 8009f4a:	482b      	ldr	r0, [pc, #172]	; (8009ff8 <HAL_LTDC_MspInit+0x17c>)
 8009f4c:	f7f9 feca 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8009f50:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8009f54:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f56:	2302      	movs	r3, #2
 8009f58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009f62:	230e      	movs	r3, #14
 8009f64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8009f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	4823      	ldr	r0, [pc, #140]	; (8009ffc <HAL_LTDC_MspInit+0x180>)
 8009f6e:	f7f9 feb9 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8009f72:	23f7      	movs	r3, #247	; 0xf7
 8009f74:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f76:	2302      	movs	r3, #2
 8009f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009f82:	230e      	movs	r3, #14
 8009f84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8009f86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	481c      	ldr	r0, [pc, #112]	; (800a000 <HAL_LTDC_MspInit+0x184>)
 8009f8e:	f7f9 fea9 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8009f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f98:	2302      	movs	r3, #2
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8009fa4:	2309      	movs	r3, #9
 8009fa6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8009fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fac:	4619      	mov	r1, r3
 8009fae:	4815      	ldr	r0, [pc, #84]	; (800a004 <HAL_LTDC_MspInit+0x188>)
 8009fb0:	f7f9 fe98 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8009fb4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8009fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fba:	2302      	movs	r3, #2
 8009fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8009fc6:	230e      	movs	r3, #14
 8009fc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8009fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fce:	4619      	mov	r1, r3
 8009fd0:	480d      	ldr	r0, [pc, #52]	; (800a008 <HAL_LTDC_MspInit+0x18c>)
 8009fd2:	f7f9 fe87 	bl	8003ce4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	2105      	movs	r1, #5
 8009fda:	2058      	movs	r0, #88	; 0x58
 8009fdc:	f7f9 f8e3 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8009fe0:	2058      	movs	r0, #88	; 0x58
 8009fe2:	f7f9 f8fc 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8009fe6:	bf00      	nop
 8009fe8:	3738      	adds	r7, #56	; 0x38
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	40016800 	.word	0x40016800
 8009ff4:	40023800 	.word	0x40023800
 8009ff8:	40021000 	.word	0x40021000
 8009ffc:	40022400 	.word	0x40022400
 800a000:	40022800 	.word	0x40022800
 800a004:	40021800 	.word	0x40021800
 800a008:	40022000 	.word	0x40022000

0800a00c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b090      	sub	sp, #64	; 0x40
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a014:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a018:	2200      	movs	r2, #0
 800a01a:	601a      	str	r2, [r3, #0]
 800a01c:	605a      	str	r2, [r3, #4]
 800a01e:	609a      	str	r2, [r3, #8]
 800a020:	60da      	str	r2, [r3, #12]
 800a022:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a58      	ldr	r2, [pc, #352]	; (800a18c <HAL_TIM_Base_MspInit+0x180>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d129      	bne.n	800a082 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a02e:	4b58      	ldr	r3, [pc, #352]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a032:	4a57      	ldr	r2, [pc, #348]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a034:	f043 0301 	orr.w	r3, r3, #1
 800a038:	6453      	str	r3, [r2, #68]	; 0x44
 800a03a:	4b55      	ldr	r3, [pc, #340]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	62bb      	str	r3, [r7, #40]	; 0x28
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a046:	4b52      	ldr	r3, [pc, #328]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	4a51      	ldr	r2, [pc, #324]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a04c:	f043 0301 	orr.w	r3, r3, #1
 800a050:	6313      	str	r3, [r2, #48]	; 0x30
 800a052:	4b4f      	ldr	r3, [pc, #316]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	627b      	str	r3, [r7, #36]	; 0x24
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 800a05e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a064:	2302      	movs	r3, #2
 800a066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a068:	2300      	movs	r3, #0
 800a06a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a06c:	2300      	movs	r3, #0
 800a06e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a070:	2301      	movs	r3, #1
 800a072:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 800a074:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a078:	4619      	mov	r1, r3
 800a07a:	4846      	ldr	r0, [pc, #280]	; (800a194 <HAL_TIM_Base_MspInit+0x188>)
 800a07c:	f7f9 fe32 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800a080:	e07f      	b.n	800a182 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM2)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a08a:	d129      	bne.n	800a0e0 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a08c:	4b40      	ldr	r3, [pc, #256]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a090:	4a3f      	ldr	r2, [pc, #252]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a092:	f043 0301 	orr.w	r3, r3, #1
 800a096:	6413      	str	r3, [r2, #64]	; 0x40
 800a098:	4b3d      	ldr	r3, [pc, #244]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a09a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	623b      	str	r3, [r7, #32]
 800a0a2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0a4:	4b3a      	ldr	r3, [pc, #232]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a8:	4a39      	ldr	r2, [pc, #228]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a0aa:	f043 0301 	orr.w	r3, r3, #1
 800a0ae:	6313      	str	r3, [r2, #48]	; 0x30
 800a0b0:	4b37      	ldr	r3, [pc, #220]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b4:	f003 0301 	and.w	r3, r3, #1
 800a0b8:	61fb      	str	r3, [r7, #28]
 800a0ba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800a0bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 800a0d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	482e      	ldr	r0, [pc, #184]	; (800a194 <HAL_TIM_Base_MspInit+0x188>)
 800a0da:	f7f9 fe03 	bl	8003ce4 <HAL_GPIO_Init>
}
 800a0de:	e050      	b.n	800a182 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM3)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a2c      	ldr	r2, [pc, #176]	; (800a198 <HAL_TIM_Base_MspInit+0x18c>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d128      	bne.n	800a13c <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a0ea:	4b29      	ldr	r3, [pc, #164]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	4a28      	ldr	r2, [pc, #160]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a0f0:	f043 0302 	orr.w	r3, r3, #2
 800a0f4:	6413      	str	r3, [r2, #64]	; 0x40
 800a0f6:	4b26      	ldr	r3, [pc, #152]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	61bb      	str	r3, [r7, #24]
 800a100:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a102:	4b23      	ldr	r3, [pc, #140]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a106:	4a22      	ldr	r2, [pc, #136]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a108:	f043 0302 	orr.w	r3, r3, #2
 800a10c:	6313      	str	r3, [r2, #48]	; 0x30
 800a10e:	4b20      	ldr	r3, [pc, #128]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a112:	f003 0302 	and.w	r3, r3, #2
 800a116:	617b      	str	r3, [r7, #20]
 800a118:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800a11a:	2310      	movs	r3, #16
 800a11c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a11e:	2302      	movs	r3, #2
 800a120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a122:	2300      	movs	r3, #0
 800a124:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a126:	2300      	movs	r3, #0
 800a128:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a12a:	2302      	movs	r3, #2
 800a12c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800a12e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a132:	4619      	mov	r1, r3
 800a134:	4819      	ldr	r0, [pc, #100]	; (800a19c <HAL_TIM_Base_MspInit+0x190>)
 800a136:	f7f9 fdd5 	bl	8003ce4 <HAL_GPIO_Init>
}
 800a13a:	e022      	b.n	800a182 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM5)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a17      	ldr	r2, [pc, #92]	; (800a1a0 <HAL_TIM_Base_MspInit+0x194>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d10c      	bne.n	800a160 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a146:	4b12      	ldr	r3, [pc, #72]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14a:	4a11      	ldr	r2, [pc, #68]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a14c:	f043 0308 	orr.w	r3, r3, #8
 800a150:	6413      	str	r3, [r2, #64]	; 0x40
 800a152:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a156:	f003 0308 	and.w	r3, r3, #8
 800a15a:	613b      	str	r3, [r7, #16]
 800a15c:	693b      	ldr	r3, [r7, #16]
}
 800a15e:	e010      	b.n	800a182 <HAL_TIM_Base_MspInit+0x176>
  else if(htim_base->Instance==TIM8)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a0f      	ldr	r2, [pc, #60]	; (800a1a4 <HAL_TIM_Base_MspInit+0x198>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d10b      	bne.n	800a182 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a16a:	4b09      	ldr	r3, [pc, #36]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a16e:	4a08      	ldr	r2, [pc, #32]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a170:	f043 0302 	orr.w	r3, r3, #2
 800a174:	6453      	str	r3, [r2, #68]	; 0x44
 800a176:	4b06      	ldr	r3, [pc, #24]	; (800a190 <HAL_TIM_Base_MspInit+0x184>)
 800a178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	68fb      	ldr	r3, [r7, #12]
}
 800a182:	bf00      	nop
 800a184:	3740      	adds	r7, #64	; 0x40
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	40010000 	.word	0x40010000
 800a190:	40023800 	.word	0x40023800
 800a194:	40020000 	.word	0x40020000
 800a198:	40000400 	.word	0x40000400
 800a19c:	40020400 	.word	0x40020400
 800a1a0:	40000c00 	.word	0x40000c00
 800a1a4:	40010400 	.word	0x40010400

0800a1a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM12)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a0a      	ldr	r2, [pc, #40]	; (800a1e0 <HAL_TIM_PWM_MspInit+0x38>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d10b      	bne.n	800a1d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 800a1ba:	4b0a      	ldr	r3, [pc, #40]	; (800a1e4 <HAL_TIM_PWM_MspInit+0x3c>)
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	4a09      	ldr	r2, [pc, #36]	; (800a1e4 <HAL_TIM_PWM_MspInit+0x3c>)
 800a1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c6:	4b07      	ldr	r3, [pc, #28]	; (800a1e4 <HAL_TIM_PWM_MspInit+0x3c>)
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ce:	60fb      	str	r3, [r7, #12]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1dc:	4770      	bx	lr
 800a1de:	bf00      	nop
 800a1e0:	40001800 	.word	0x40001800
 800a1e4:	40023800 	.word	0x40023800

0800a1e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1f0:	f107 0314 	add.w	r3, r7, #20
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	601a      	str	r2, [r3, #0]
 800a1f8:	605a      	str	r2, [r3, #4]
 800a1fa:	609a      	str	r2, [r3, #8]
 800a1fc:	60da      	str	r2, [r3, #12]
 800a1fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a22      	ldr	r2, [pc, #136]	; (800a290 <HAL_TIM_MspPostInit+0xa8>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d11c      	bne.n	800a244 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a20a:	4b22      	ldr	r3, [pc, #136]	; (800a294 <HAL_TIM_MspPostInit+0xac>)
 800a20c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a20e:	4a21      	ldr	r2, [pc, #132]	; (800a294 <HAL_TIM_MspPostInit+0xac>)
 800a210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a214:	6313      	str	r3, [r2, #48]	; 0x30
 800a216:	4b1f      	ldr	r3, [pc, #124]	; (800a294 <HAL_TIM_MspPostInit+0xac>)
 800a218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21e:	613b      	str	r3, [r7, #16]
 800a220:	693b      	ldr	r3, [r7, #16]
    /**TIM5 GPIO Configuration    
    PI0     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800a222:	2301      	movs	r3, #1
 800a224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a226:	2302      	movs	r3, #2
 800a228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a22e:	2300      	movs	r3, #0
 800a230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a232:	2302      	movs	r3, #2
 800a234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800a236:	f107 0314 	add.w	r3, r7, #20
 800a23a:	4619      	mov	r1, r3
 800a23c:	4816      	ldr	r0, [pc, #88]	; (800a298 <HAL_TIM_MspPostInit+0xb0>)
 800a23e:	f7f9 fd51 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800a242:	e020      	b.n	800a286 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM12)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a14      	ldr	r2, [pc, #80]	; (800a29c <HAL_TIM_MspPostInit+0xb4>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d11b      	bne.n	800a286 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800a24e:	4b11      	ldr	r3, [pc, #68]	; (800a294 <HAL_TIM_MspPostInit+0xac>)
 800a250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a252:	4a10      	ldr	r2, [pc, #64]	; (800a294 <HAL_TIM_MspPostInit+0xac>)
 800a254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a258:	6313      	str	r3, [r2, #48]	; 0x30
 800a25a:	4b0e      	ldr	r3, [pc, #56]	; (800a294 <HAL_TIM_MspPostInit+0xac>)
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a262:	60fb      	str	r3, [r7, #12]
 800a264:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 800a266:	2340      	movs	r3, #64	; 0x40
 800a268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a26a:	2302      	movs	r3, #2
 800a26c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a26e:	2300      	movs	r3, #0
 800a270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a272:	2300      	movs	r3, #0
 800a274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800a276:	2309      	movs	r3, #9
 800a278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800a27a:	f107 0314 	add.w	r3, r7, #20
 800a27e:	4619      	mov	r1, r3
 800a280:	4807      	ldr	r0, [pc, #28]	; (800a2a0 <HAL_TIM_MspPostInit+0xb8>)
 800a282:	f7f9 fd2f 	bl	8003ce4 <HAL_GPIO_Init>
}
 800a286:	bf00      	nop
 800a288:	3728      	adds	r7, #40	; 0x28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	40000c00 	.word	0x40000c00
 800a294:	40023800 	.word	0x40023800
 800a298:	40022000 	.word	0x40022000
 800a29c:	40001800 	.word	0x40001800
 800a2a0:	40021c00 	.word	0x40021c00

0800a2a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b08c      	sub	sp, #48	; 0x30
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2ac:	f107 031c 	add.w	r3, r7, #28
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	601a      	str	r2, [r3, #0]
 800a2b4:	605a      	str	r2, [r3, #4]
 800a2b6:	609a      	str	r2, [r3, #8]
 800a2b8:	60da      	str	r2, [r3, #12]
 800a2ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a3c      	ldr	r2, [pc, #240]	; (800a3b4 <HAL_UART_MspInit+0x110>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d145      	bne.n	800a352 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a2c6:	4b3c      	ldr	r3, [pc, #240]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ca:	4a3b      	ldr	r2, [pc, #236]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2cc:	f043 0310 	orr.w	r3, r3, #16
 800a2d0:	6453      	str	r3, [r2, #68]	; 0x44
 800a2d2:	4b39      	ldr	r3, [pc, #228]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d6:	f003 0310 	and.w	r3, r3, #16
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2de:	4b36      	ldr	r3, [pc, #216]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	4a35      	ldr	r2, [pc, #212]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2e4:	f043 0302 	orr.w	r3, r3, #2
 800a2e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2ea:	4b33      	ldr	r3, [pc, #204]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	617b      	str	r3, [r7, #20]
 800a2f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2f6:	4b30      	ldr	r3, [pc, #192]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2fa:	4a2f      	ldr	r2, [pc, #188]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a2fc:	f043 0301 	orr.w	r3, r3, #1
 800a300:	6313      	str	r3, [r2, #48]	; 0x30
 800a302:	4b2d      	ldr	r3, [pc, #180]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800a30e:	2380      	movs	r3, #128	; 0x80
 800a310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a312:	2302      	movs	r3, #2
 800a314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a316:	2300      	movs	r3, #0
 800a318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a31a:	2300      	movs	r3, #0
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a31e:	2307      	movs	r3, #7
 800a320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800a322:	f107 031c 	add.w	r3, r7, #28
 800a326:	4619      	mov	r1, r3
 800a328:	4824      	ldr	r0, [pc, #144]	; (800a3bc <HAL_UART_MspInit+0x118>)
 800a32a:	f7f9 fcdb 	bl	8003ce4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800a32e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a334:	2302      	movs	r3, #2
 800a336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a33c:	2300      	movs	r3, #0
 800a33e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a340:	2307      	movs	r3, #7
 800a342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800a344:	f107 031c 	add.w	r3, r7, #28
 800a348:	4619      	mov	r1, r3
 800a34a:	481d      	ldr	r0, [pc, #116]	; (800a3c0 <HAL_UART_MspInit+0x11c>)
 800a34c:	f7f9 fcca 	bl	8003ce4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a350:	e02c      	b.n	800a3ac <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a1b      	ldr	r2, [pc, #108]	; (800a3c4 <HAL_UART_MspInit+0x120>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d127      	bne.n	800a3ac <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a35c:	4b16      	ldr	r3, [pc, #88]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a35e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a360:	4a15      	ldr	r2, [pc, #84]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a362:	f043 0320 	orr.w	r3, r3, #32
 800a366:	6453      	str	r3, [r2, #68]	; 0x44
 800a368:	4b13      	ldr	r3, [pc, #76]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a36a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36c:	f003 0320 	and.w	r3, r3, #32
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a374:	4b10      	ldr	r3, [pc, #64]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a378:	4a0f      	ldr	r2, [pc, #60]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a37a:	f043 0304 	orr.w	r3, r3, #4
 800a37e:	6313      	str	r3, [r2, #48]	; 0x30
 800a380:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <HAL_UART_MspInit+0x114>)
 800a382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a384:	f003 0304 	and.w	r3, r3, #4
 800a388:	60bb      	str	r3, [r7, #8]
 800a38a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800a38c:	23c0      	movs	r3, #192	; 0xc0
 800a38e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a390:	2302      	movs	r3, #2
 800a392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a394:	2300      	movs	r3, #0
 800a396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a398:	2303      	movs	r3, #3
 800a39a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a39c:	2308      	movs	r3, #8
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3a0:	f107 031c 	add.w	r3, r7, #28
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4808      	ldr	r0, [pc, #32]	; (800a3c8 <HAL_UART_MspInit+0x124>)
 800a3a8:	f7f9 fc9c 	bl	8003ce4 <HAL_GPIO_Init>
}
 800a3ac:	bf00      	nop
 800a3ae:	3730      	adds	r7, #48	; 0x30
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	40011000 	.word	0x40011000
 800a3b8:	40023800 	.word	0x40023800
 800a3bc:	40020400 	.word	0x40020400
 800a3c0:	40020000 	.word	0x40020000
 800a3c4:	40011400 	.word	0x40011400
 800a3c8:	40020800 	.word	0x40020800

0800a3cc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b086      	sub	sp, #24
 800a3d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct;
  if (FMC_Initialized) {
 800a3d2:	4b3b      	ldr	r3, [pc, #236]	; (800a4c0 <HAL_FMC_MspInit+0xf4>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d16d      	bne.n	800a4b6 <HAL_FMC_MspInit+0xea>
    return;
  }
  FMC_Initialized = 1;
 800a3da:	4b39      	ldr	r3, [pc, #228]	; (800a4c0 <HAL_FMC_MspInit+0xf4>)
 800a3dc:	2201      	movs	r2, #1
 800a3de:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800a3e0:	4b38      	ldr	r3, [pc, #224]	; (800a4c4 <HAL_FMC_MspInit+0xf8>)
 800a3e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3e4:	4a37      	ldr	r2, [pc, #220]	; (800a4c4 <HAL_FMC_MspInit+0xf8>)
 800a3e6:	f043 0301 	orr.w	r3, r3, #1
 800a3ea:	6393      	str	r3, [r2, #56]	; 0x38
 800a3ec:	4b35      	ldr	r3, [pc, #212]	; (800a4c4 <HAL_FMC_MspInit+0xf8>)
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	603b      	str	r3, [r7, #0]
 800a3f6:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 800a3f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 800a3fc:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3fe:	2302      	movs	r3, #2
 800a400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a406:	2303      	movs	r3, #3
 800a408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a40a:	230c      	movs	r3, #12
 800a40c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a40e:	1d3b      	adds	r3, r7, #4
 800a410:	4619      	mov	r1, r3
 800a412:	482d      	ldr	r0, [pc, #180]	; (800a4c8 <HAL_FMC_MspInit+0xfc>)
 800a414:	f7f9 fc66 	bl	8003ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 800a418:	f248 1333 	movw	r3, #33075	; 0x8133
 800a41c:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a41e:	2302      	movs	r3, #2
 800a420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a426:	2303      	movs	r3, #3
 800a428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a42a:	230c      	movs	r3, #12
 800a42c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a42e:	1d3b      	adds	r3, r7, #4
 800a430:	4619      	mov	r1, r3
 800a432:	4826      	ldr	r0, [pc, #152]	; (800a4cc <HAL_FMC_MspInit+0x100>)
 800a434:	f7f9 fc56 	bl	8003ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 800a438:	f24c 7303 	movw	r3, #50947	; 0xc703
 800a43c:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a43e:	2302      	movs	r3, #2
 800a440:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a446:	2303      	movs	r3, #3
 800a448:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a44a:	230c      	movs	r3, #12
 800a44c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a44e:	1d3b      	adds	r3, r7, #4
 800a450:	4619      	mov	r1, r3
 800a452:	481f      	ldr	r0, [pc, #124]	; (800a4d0 <HAL_FMC_MspInit+0x104>)
 800a454:	f7f9 fc46 	bl	8003ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 800a458:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800a45c:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a45e:	2302      	movs	r3, #2
 800a460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a462:	2300      	movs	r3, #0
 800a464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a466:	2303      	movs	r3, #3
 800a468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a46a:	230c      	movs	r3, #12
 800a46c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a46e:	1d3b      	adds	r3, r7, #4
 800a470:	4619      	mov	r1, r3
 800a472:	4818      	ldr	r0, [pc, #96]	; (800a4d4 <HAL_FMC_MspInit+0x108>)
 800a474:	f7f9 fc36 	bl	8003ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800a478:	2328      	movs	r3, #40	; 0x28
 800a47a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a47c:	2302      	movs	r3, #2
 800a47e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a480:	2300      	movs	r3, #0
 800a482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a484:	2303      	movs	r3, #3
 800a486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a488:	230c      	movs	r3, #12
 800a48a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a48c:	1d3b      	adds	r3, r7, #4
 800a48e:	4619      	mov	r1, r3
 800a490:	4811      	ldr	r0, [pc, #68]	; (800a4d8 <HAL_FMC_MspInit+0x10c>)
 800a492:	f7f9 fc27 	bl	8003ce4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800a496:	2308      	movs	r3, #8
 800a498:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a49a:	2302      	movs	r3, #2
 800a49c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800a4a6:	230c      	movs	r3, #12
 800a4a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 800a4aa:	1d3b      	adds	r3, r7, #4
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	480b      	ldr	r0, [pc, #44]	; (800a4dc <HAL_FMC_MspInit+0x110>)
 800a4b0:	f7f9 fc18 	bl	8003ce4 <HAL_GPIO_Init>
 800a4b4:	e000      	b.n	800a4b8 <HAL_FMC_MspInit+0xec>
    return;
 800a4b6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	200040c0 	.word	0x200040c0
 800a4c4:	40023800 	.word	0x40023800
 800a4c8:	40021000 	.word	0x40021000
 800a4cc:	40021800 	.word	0x40021800
 800a4d0:	40020c00 	.word	0x40020c00
 800a4d4:	40021400 	.word	0x40021400
 800a4d8:	40021c00 	.word	0x40021c00
 800a4dc:	40020800 	.word	0x40020800

0800a4e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800a4e8:	f7ff ff70 	bl	800a3cc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08a      	sub	sp, #40	; 0x28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a2b      	ldr	r2, [pc, #172]	; (800a5b0 <HAL_SAI_MspInit+0xbc>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d124      	bne.n	800a550 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800a506:	4b2b      	ldr	r3, [pc, #172]	; (800a5b4 <HAL_SAI_MspInit+0xc0>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10b      	bne.n	800a526 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800a50e:	4b2a      	ldr	r3, [pc, #168]	; (800a5b8 <HAL_SAI_MspInit+0xc4>)
 800a510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a512:	4a29      	ldr	r2, [pc, #164]	; (800a5b8 <HAL_SAI_MspInit+0xc4>)
 800a514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a518:	6453      	str	r3, [r2, #68]	; 0x44
 800a51a:	4b27      	ldr	r3, [pc, #156]	; (800a5b8 <HAL_SAI_MspInit+0xc4>)
 800a51c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a51e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a522:	613b      	str	r3, [r7, #16]
 800a524:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800a526:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <HAL_SAI_MspInit+0xc0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3301      	adds	r3, #1
 800a52c:	4a21      	ldr	r2, [pc, #132]	; (800a5b4 <HAL_SAI_MspInit+0xc0>)
 800a52e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800a530:	23f0      	movs	r3, #240	; 0xf0
 800a532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a534:	2302      	movs	r3, #2
 800a536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a538:	2300      	movs	r3, #0
 800a53a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a53c:	2303      	movs	r3, #3
 800a53e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800a540:	230a      	movs	r3, #10
 800a542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800a544:	f107 0314 	add.w	r3, r7, #20
 800a548:	4619      	mov	r1, r3
 800a54a:	481c      	ldr	r0, [pc, #112]	; (800a5bc <HAL_SAI_MspInit+0xc8>)
 800a54c:	f7f9 fbca 	bl	8003ce4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a1a      	ldr	r2, [pc, #104]	; (800a5c0 <HAL_SAI_MspInit+0xcc>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d125      	bne.n	800a5a6 <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800a55a:	4b16      	ldr	r3, [pc, #88]	; (800a5b4 <HAL_SAI_MspInit+0xc0>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10b      	bne.n	800a57a <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800a562:	4b15      	ldr	r3, [pc, #84]	; (800a5b8 <HAL_SAI_MspInit+0xc4>)
 800a564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a566:	4a14      	ldr	r2, [pc, #80]	; (800a5b8 <HAL_SAI_MspInit+0xc4>)
 800a568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a56c:	6453      	str	r3, [r2, #68]	; 0x44
 800a56e:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <HAL_SAI_MspInit+0xc4>)
 800a570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800a57a:	4b0e      	ldr	r3, [pc, #56]	; (800a5b4 <HAL_SAI_MspInit+0xc0>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	3301      	adds	r3, #1
 800a580:	4a0c      	ldr	r2, [pc, #48]	; (800a5b4 <HAL_SAI_MspInit+0xc0>)
 800a582:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800a584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a58a:	2302      	movs	r3, #2
 800a58c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a58e:	2300      	movs	r3, #0
 800a590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a592:	2303      	movs	r3, #3
 800a594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800a596:	230a      	movs	r3, #10
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800a59a:	f107 0314 	add.w	r3, r7, #20
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4808      	ldr	r0, [pc, #32]	; (800a5c4 <HAL_SAI_MspInit+0xd0>)
 800a5a2:	f7f9 fb9f 	bl	8003ce4 <HAL_GPIO_Init>

    }
}
 800a5a6:	bf00      	nop
 800a5a8:	3728      	adds	r7, #40	; 0x28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	40015c04 	.word	0x40015c04
 800a5b4:	200040c4 	.word	0x200040c4
 800a5b8:	40023800 	.word	0x40023800
 800a5bc:	40022000 	.word	0x40022000
 800a5c0:	40015c24 	.word	0x40015c24
 800a5c4:	40021800 	.word	0x40021800

0800a5c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a5da:	e7fe      	b.n	800a5da <HardFault_Handler+0x4>

0800a5dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5e0:	e7fe      	b.n	800a5e0 <MemManage_Handler+0x4>

0800a5e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a5e2:	b480      	push	{r7}
 800a5e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a5e6:	e7fe      	b.n	800a5e6 <BusFault_Handler+0x4>

0800a5e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5ec:	e7fe      	b.n	800a5ec <UsageFault_Handler+0x4>

0800a5ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a5ee:	b480      	push	{r7}
 800a5f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a5f2:	bf00      	nop
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a600:	bf00      	nop
 800a602:	46bd      	mov	sp, r7
 800a604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a608:	4770      	bx	lr

0800a60a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a60a:	b480      	push	{r7}
 800a60c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a60e:	bf00      	nop
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a61c:	f7f8 fca8 	bl	8002f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a620:	bf00      	nop
 800a622:	bd80      	pop	{r7, pc}

0800a624 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800a628:	4802      	ldr	r0, [pc, #8]	; (800a634 <LTDC_IRQHandler+0x10>)
 800a62a:	f7fa fce3 	bl	8004ff4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800a62e:	bf00      	nop
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20004400 	.word	0x20004400

0800a638 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800a63c:	4802      	ldr	r0, [pc, #8]	; (800a648 <DMA2D_IRQHandler+0x10>)
 800a63e:	f7f9 f904 	bl	800384a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800a642:	bf00      	nop
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	200045c8 	.word	0x200045c8

0800a64c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a64c:	b480      	push	{r7}
 800a64e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a650:	4b15      	ldr	r3, [pc, #84]	; (800a6a8 <SystemInit+0x5c>)
 800a652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a656:	4a14      	ldr	r2, [pc, #80]	; (800a6a8 <SystemInit+0x5c>)
 800a658:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a65c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800a660:	4b12      	ldr	r3, [pc, #72]	; (800a6ac <SystemInit+0x60>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a11      	ldr	r2, [pc, #68]	; (800a6ac <SystemInit+0x60>)
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a66c:	4b0f      	ldr	r3, [pc, #60]	; (800a6ac <SystemInit+0x60>)
 800a66e:	2200      	movs	r2, #0
 800a670:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800a672:	4b0e      	ldr	r3, [pc, #56]	; (800a6ac <SystemInit+0x60>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	490d      	ldr	r1, [pc, #52]	; (800a6ac <SystemInit+0x60>)
 800a678:	4b0d      	ldr	r3, [pc, #52]	; (800a6b0 <SystemInit+0x64>)
 800a67a:	4013      	ands	r3, r2
 800a67c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800a67e:	4b0b      	ldr	r3, [pc, #44]	; (800a6ac <SystemInit+0x60>)
 800a680:	4a0c      	ldr	r2, [pc, #48]	; (800a6b4 <SystemInit+0x68>)
 800a682:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800a684:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <SystemInit+0x60>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a08      	ldr	r2, [pc, #32]	; (800a6ac <SystemInit+0x60>)
 800a68a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a68e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800a690:	4b06      	ldr	r3, [pc, #24]	; (800a6ac <SystemInit+0x60>)
 800a692:	2200      	movs	r2, #0
 800a694:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800a696:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <SystemInit+0x5c>)
 800a698:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a69c:	609a      	str	r2, [r3, #8]
#endif
}
 800a69e:	bf00      	nop
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	e000ed00 	.word	0xe000ed00
 800a6ac:	40023800 	.word	0x40023800
 800a6b0:	fef6ffff 	.word	0xfef6ffff
 800a6b4:	24003010 	.word	0x24003010

0800a6b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800a6b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a6f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800a6bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800a6be:	e003      	b.n	800a6c8 <LoopCopyDataInit>

0800a6c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800a6c0:	4b0c      	ldr	r3, [pc, #48]	; (800a6f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800a6c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800a6c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800a6c6:	3104      	adds	r1, #4

0800a6c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800a6c8:	480b      	ldr	r0, [pc, #44]	; (800a6f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800a6ca:	4b0c      	ldr	r3, [pc, #48]	; (800a6fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800a6cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800a6ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800a6d0:	d3f6      	bcc.n	800a6c0 <CopyDataInit>
  ldr  r2, =_sbss
 800a6d2:	4a0b      	ldr	r2, [pc, #44]	; (800a700 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800a6d4:	e002      	b.n	800a6dc <LoopFillZerobss>

0800a6d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800a6d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800a6d8:	f842 3b04 	str.w	r3, [r2], #4

0800a6dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800a6dc:	4b09      	ldr	r3, [pc, #36]	; (800a704 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800a6de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800a6e0:	d3f9      	bcc.n	800a6d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800a6e2:	f7ff ffb3 	bl	800a64c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a6e6:	f000 f811 	bl	800a70c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a6ea:	f7fe fa8b 	bl	8008c04 <main>
  bx  lr    
 800a6ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a6f0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800a6f4:	0800f6c8 	.word	0x0800f6c8
  ldr  r0, =_sdata
 800a6f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800a6fc:	2000005c 	.word	0x2000005c
  ldr  r2, =_sbss
 800a700:	2000005c 	.word	0x2000005c
  ldr  r3, = _ebss
 800a704:	200046bc 	.word	0x200046bc

0800a708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a708:	e7fe      	b.n	800a708 <ADC_IRQHandler>
	...

0800a70c <__libc_init_array>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	4d0d      	ldr	r5, [pc, #52]	; (800a744 <__libc_init_array+0x38>)
 800a710:	4c0d      	ldr	r4, [pc, #52]	; (800a748 <__libc_init_array+0x3c>)
 800a712:	1b64      	subs	r4, r4, r5
 800a714:	10a4      	asrs	r4, r4, #2
 800a716:	2600      	movs	r6, #0
 800a718:	42a6      	cmp	r6, r4
 800a71a:	d109      	bne.n	800a730 <__libc_init_array+0x24>
 800a71c:	4d0b      	ldr	r5, [pc, #44]	; (800a74c <__libc_init_array+0x40>)
 800a71e:	4c0c      	ldr	r4, [pc, #48]	; (800a750 <__libc_init_array+0x44>)
 800a720:	f000 f820 	bl	800a764 <_init>
 800a724:	1b64      	subs	r4, r4, r5
 800a726:	10a4      	asrs	r4, r4, #2
 800a728:	2600      	movs	r6, #0
 800a72a:	42a6      	cmp	r6, r4
 800a72c:	d105      	bne.n	800a73a <__libc_init_array+0x2e>
 800a72e:	bd70      	pop	{r4, r5, r6, pc}
 800a730:	f855 3b04 	ldr.w	r3, [r5], #4
 800a734:	4798      	blx	r3
 800a736:	3601      	adds	r6, #1
 800a738:	e7ee      	b.n	800a718 <__libc_init_array+0xc>
 800a73a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a73e:	4798      	blx	r3
 800a740:	3601      	adds	r6, #1
 800a742:	e7f2      	b.n	800a72a <__libc_init_array+0x1e>
 800a744:	0800f6c0 	.word	0x0800f6c0
 800a748:	0800f6c0 	.word	0x0800f6c0
 800a74c:	0800f6c0 	.word	0x0800f6c0
 800a750:	0800f6c4 	.word	0x0800f6c4

0800a754 <memset>:
 800a754:	4402      	add	r2, r0
 800a756:	4603      	mov	r3, r0
 800a758:	4293      	cmp	r3, r2
 800a75a:	d100      	bne.n	800a75e <memset+0xa>
 800a75c:	4770      	bx	lr
 800a75e:	f803 1b01 	strb.w	r1, [r3], #1
 800a762:	e7f9      	b.n	800a758 <memset+0x4>

0800a764 <_init>:
 800a764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a766:	bf00      	nop
 800a768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76a:	bc08      	pop	{r3}
 800a76c:	469e      	mov	lr, r3
 800a76e:	4770      	bx	lr

0800a770 <_fini>:
 800a770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a772:	bf00      	nop
 800a774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a776:	bc08      	pop	{r3}
 800a778:	469e      	mov	lr, r3
 800a77a:	4770      	bx	lr
